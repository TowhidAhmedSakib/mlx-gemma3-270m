{"text":"<bos><start_of_turn>user\\nWhat is the annual waste generation for the state of New York?\\n\\nContext: CREATE TABLE state_waste (state VARCHAR(255), year INT, waste_generation INT); INSERT INTO state_waste (state, year, waste_generation) VALUES ('New York', 2021, 15000000);<end_of_turn>\\n<start_of_turn>model\\nSELECT waste_generation FROM state_waste WHERE state='New York' AND year=2021;\\n\\nExplanation: This query retrieves the annual waste generation for New York in 2021.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the total donation amount by each program in 2021?\\n\\nContext: CREATE TABLE donations (id INT, program_id INT, donation_date DATE, amount DECIMAL(10,2)); INSERT INTO donations (id, program_id, donation_date, amount) VALUES (1, 1, '2021-02-15', 500.00), (2, 1, '2021-03-10', 1000.00), (3, 2, '2021-02-25', 800.00), (4, 3, '2021-01-05', 1500.00);<end_of_turn>\\n<start_of_turn>model\\nSELECT program_id, SUM(amount) as total_donation, YEAR(donation_date) as year FROM donations GROUP BY program_id, year HAVING year = 2021;\\n\\nExplanation: We first calculate the total donation amount for each program and year. Next, we filter the results by the year 2021 and group them by the program_id and year.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the maximum mental health parity violation fine in each province for Canada?\\n\\nContext: CREATE TABLE MentalHealthParityFines (FineID INT, Province VARCHAR(255), Fine INT); INSERT INTO MentalHealthParityFines (FineID, Province, Fine) VALUES (1, 'Ontario', 50000), (2, 'Quebec', 75000), (3, 'British Columbia', 60000);<end_of_turn>\\n<start_of_turn>model\\nSELECT Province, MAX(Fine) as MaxFine FROM MentalHealthParityFines WHERE Province IN ('Ontario', 'Quebec', 'British Columbia') GROUP BY Province;\\n\\nExplanation: The SQL query calculates the maximum mental health parity violation fine in each province for Canada. It filters the data based on the 'Province' column and then groups the data by the same column. It then finds the maximum fine for each group using the MAX() function.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the total cost of humanitarian assistance provided by France and Germany combined in the Middle East since 2010?\\n\\nContext: CREATE TABLE humanitarian_assistance (donor VARCHAR(255), region VARCHAR(255), cost DECIMAL(10, 2), assistance_date DATE);<end_of_turn>\\n<start_of_turn>model\\nSELECT SUM(cost) FROM humanitarian_assistance WHERE (donor = 'France' OR donor = 'Germany') AND region = 'Middle East' AND assistance_date >= '2010-01-01';\\n\\nExplanation: This query calculates the total cost of humanitarian assistance provided by France and Germany combined in the Middle East since 2010 by summing the cost of assistance where the donor is either France or Germany, the region is the Middle East, and the assistance date is since 2010.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nList the top 3 most visited African countries in 2019.\\n\\nContext: CREATE TABLE Visits (id INT, country TEXT, year INT, number_of_visits INT); INSERT INTO Visits (id, country, year, number_of_visits) VALUES (1, 'Egypt', 2018, 100000), (2, 'Egypt', 2019, 120000), (3, 'Egypt', 2020, 80000), (4, 'Morocco', 2018, 110000), (5, 'Morocco', 2019, 150000), (6, 'Morocco', 2020, 90000), (7, 'South Africa', 2018, 130000), (8, 'South Africa', 2019, 170000), (9, 'South Africa', 2020, 110000);<end_of_turn>\\n<start_of_turn>model\\nSELECT country, SUM(number_of_visits) AS total_visits FROM Visits WHERE year = 2019 GROUP BY country ORDER BY total_visits DESC LIMIT 3;\\n\\nExplanation: This SQL query lists the top 3 most visited African countries in 2019 by summing the number_of_visits column, grouping by country, ordering by total_visits in descending order, and limiting the results to 3.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nCalculate the average number of workers for 'diamond mines' and 'emerald mines'.\\n\\nContext: CREATE SCHEMA if not exists mining;CREATE TABLE mining.mine (id INT, type STRING, location STRING, num_workers INT);INSERT INTO mining.mine (id, type, location, num_workers) VALUES (1, 'diamond mine', 'South Africa', 80), (2, 'emerald mine', 'Colombia', 70), (3, 'diamond mine', 'Russia', 90), (4, 'emerald mine', 'Zambia', 75);<end_of_turn>\\n<start_of_turn>model\\nSELECT AVG(num_workers) FROM mining.mine WHERE type IN ('diamond mine', 'emerald mine');\\n\\nExplanation: * Calculate the average 'num_workers' for 'diamond mine' and 'emerald mine' rows<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat are the names of playlists that have at least 3 songs?\\n\\nContext: CREATE VIEW playlist_songs_count AS SELECT playlist_id, COUNT(song_id) AS songs_count FROM playlist_songs GROUP BY playlist_id; CREATE VIEW playlists_3_songs AS SELECT * FROM playlist_songs_count WHERE songs_count >= 3; CREATE TABLE playlists_detailed (playlist_id INT, playlist_name VARCHAR(50)); INSERT INTO playlists_detailed (playlist_id, playlist_name) VALUES (1, 'Popular Hits'), (2, 'Top 100'), (3, 'Rock Playlist'), (4, 'Classical Favorites');<end_of_turn>\\n<start_of_turn>model\\nSELECT playlist_name FROM playlists_detailed JOIN playlists_3_songs ON playlists_detailed.playlist_id = playlists_3_songs.playlist_id;\\n\\nExplanation: Join the playlists_detailed and playlists_3_songs tables on the playlist_id field to get the playlist_name of playlists that have at least 3 songs.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the average number of virtual tour engagements for hotels in the 'Middle East' region?\\n\\nContext: CREATE TABLE virtual_tours (id INT, hotel_id INT, country TEXT, engagements INT); INSERT INTO virtual_tours (id, hotel_id, country, engagements) VALUES (1, 1, 'UAE', 500), (2, 2, 'Saudi Arabia', 450), (3, 3, 'Egypt', 600), (4, 4, 'Israel', 300); CREATE TABLE hotels (id INT, name TEXT, region TEXT); INSERT INTO hotels (id, name, region) VALUES (1, 'Hotel ME1', 'Middle East'), (2, 'Hotel ME2', 'Middle East'), (3, 'Hotel ME3', 'Middle East'), (4, 'Hotel ME4', 'Middle East');<end_of_turn>\\n<start_of_turn>model\\nSELECT AVG(engagements) FROM virtual_tours v JOIN hotels h ON v.hotel_id = h.id WHERE h.region = 'Middle East';\\n\\nExplanation: This query calculates the average number of virtual tour engagements for hotels in the 'Middle East' region by joining the 'virtual_tours' and 'hotels' tables on the hotel_id column, filtering the rows with the WHERE clause to only include hotels from the 'Middle East' region, and using the AVG function on the 'engagements' column.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nFor each year, calculate the percentage of AI safety research papers published, rounded to two decimal places.\\n\\nContext: CREATE SCHEMA ai_safety; CREATE TABLE papers (year INT, title VARCHAR(50), abstract TEXT, published BOOLEAN); INSERT INTO papers (year, title, abstract, published) VALUES (2018, 'Safe AI Research', 'This paper discusses the importance of safety in AI research...', true), (2019, 'Robust AI Algorithms', 'This paper presents a new approach to developing robust AI algorithms...', true), (2020, 'Explainable AI Systems', 'This paper explores the challenges of developing explainable AI systems...', true), (2021, 'Transparent AI Decision-making', 'This paper examines the need for transparency in AI decision-making...', true);<end_of_turn>\\n<start_of_turn>model\\nSELECT year, ROUND(100.0 * COUNT(*) \/ (SELECT COUNT(*) FROM ai_safety.papers WHERE published = true AND year <= t.year), 2) as paper_percentage FROM ai_safety.papers t WHERE published = true GROUP BY year;\\n\\nExplanation: The SQL query calculates the percentage of AI safety research papers published for each year. It uses the COUNT() function with a subquery to calculate the total number of published papers for each year, and then calculates the percentage by dividing the number of published papers for each year by the total number of published papers up to that year. The ROUND() function is used to round the percentage to two decimal places.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nFind the number of animals in 'AnimalPopulation' grouped by 'habitat_type'\\n\\nContext: CREATE TABLE AnimalPopulation (animal_id INT, species VARCHAR(50), habitat_type VARCHAR(50), animal_count INT);<end_of_turn>\\n<start_of_turn>model\\nSELECT habitat_type, COUNT(*) as animal_count FROM AnimalPopulation GROUP BY habitat_type;\\n\\nExplanation: This query groups the AnimalPopulation table by the 'habitat_type' column and calculates the count of animals for each habitat type using the COUNT(*) function.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the average rating of dishes in the vegan menu?\\n\\nContext: CREATE TABLE Menus (id INT, name VARCHAR(255), type VARCHAR(255)); INSERT INTO Menus (id, name, type) VALUES (1, 'Entree', 'Vegan'), (2, 'Dessert', 'Vegan'); CREATE TABLE Dishes (id INT, name VARCHAR(255), menu_id INT, rating DECIMAL(3,2)); INSERT INTO Dishes (id, name, menu_id, rating) VALUES (1, 'Tofu Stir Fry', 1, 4.30), (2, 'Vegan Cheesecake', 2, 3.80);<end_of_turn>\\n<start_of_turn>model\\nSELECT AVG(rating) FROM Dishes WHERE menu_id IN (SELECT id FROM Menus WHERE type = 'Vegan');\\n\\nExplanation: This query calculates the average rating of dishes from the 'Dishes' table, filtering by menu items that are of type 'Vegan'.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the explainability score distribution for each AI model type?\\n\\nContext: CREATE TABLE explainability_scores (model_id INT, model_type VARCHAR(20), score INT); INSERT INTO explainability_scores (model_id, model_type, score) VALUES (1, 'Generative', 7), (2, 'Transformer', 8), (3, 'Reinforcement', 9), (4, 'Generative', 6), (5, 'Transformer', 10), (6, 'Reinforcement', 7), (7, 'Generative', 8), (8, 'Transformer', 6), (9, 'Reinforcement', 9);<end_of_turn>\\n<start_of_turn>model\\nSELECT model_type, AVG(score) as avg_explainability_score, STDDEV(score) as stddev_explainability_score FROM explainability_scores GROUP BY model_type;\\n\\nExplanation: This SQL query calculates the average and standard deviation of explainability scores for each AI model type by grouping the explainability_scores table by model_type and finding the average and standard deviation of the score for each group.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the number of users who played game R on each day of the week?\\n\\nContext: CREATE TABLE game_R_usage (user_id INT, usage_date DATE);<end_of_turn>\\n<start_of_turn>model\\nSELECT DATEPART(dw, usage_date) AS day_of_week, COUNT(DISTINCT user_id) FROM game_R_usage GROUP BY DATEPART(dw, usage_date);\\n\\nExplanation: This query counts the number of users who played game R on each day of the week. It does this by grouping the game_R_usage table by the day of the week and then counting the number of distinct user_id rows in each group.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the average population size of 'Marine Mammals'?\\n\\nContext: CREATE TABLE AnimalData2(species VARCHAR(20), population INT, order_class VARCHAR(20)); INSERT INTO AnimalData2 VALUES ('Dolphin', 50, 'Marine Mammal'), ('Whale', 30, 'Marine Mammal'), ('Seal', 70, 'Marine Mammal');<end_of_turn>\\n<start_of_turn>model\\nSELECT AVG(population) FROM AnimalData2 WHERE order_class = 'Marine Mammal';\\n\\nExplanation: The SQL query uses the AVG function to calculate the average population size of 'Marine Mammals' in the 'AnimalData2' table.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the average financial wellbeing score of individuals in India who have completed financial capability training in the past year?\\n\\nContext: CREATE TABLE financial_training (individual_id TEXT, training_date DATE, wellbeing_score NUMERIC, country TEXT); INSERT INTO financial_training (individual_id, training_date, wellbeing_score, country) VALUES ('567890', '2022-03-01', 75, 'India'); INSERT INTO financial_training (individual_id, training_date, wellbeing_score, country) VALUES ('098765', '2022-04-01', 80, 'India');<end_of_turn>\\n<start_of_turn>model\\nSELECT AVG(wellbeing_score) FROM financial_training WHERE training_date >= DATEADD(year, -1, CURRENT_DATE) AND country = 'India';\\n\\nExplanation: This query calculates the average financial wellbeing score of individuals in India who have completed financial capability training in the past year. It uses the AVG() function to find the average wellbeing score of these individuals.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the total amount of funding received by art programs for the 'Youth' demographic?\\n\\nContext: CREATE SCHEMA if not exists arts_culture; CREATE TABLE if not exists arts_culture.programs(program_id INT, program_name VARCHAR(50), demographic VARCHAR(10)); CREATE TABLE if not exists arts_culture.funding(funding_id INT, program_id INT, amount INT);<end_of_turn>\\n<start_of_turn>model\\nSELECT SUM(funding.amount) FROM arts_culture.funding JOIN arts_culture.programs ON funding.program_id = programs.program_id WHERE programs.demographic = 'Youth';\\n\\nExplanation: This query calculates the total amount of funding for art programs targeted at the 'Youth' demographic. It does so by joining the 'funding' and 'programs' tables on the 'program_id' column. The WHERE clause filters the records for the 'Youth' demographic, and the SUM function calculates the total amount of funding.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the maximum severity level of vulnerabilities for each country in the last year?\\n\\nContext: CREATE TABLE vulnerabilities (id INT, country VARCHAR(255), severity VARCHAR(255), timestamp TIMESTAMP);<end_of_turn>\\n<start_of_turn>model\\nSELECT country, MAX(severity) FROM vulnerabilities WHERE timestamp >= NOW() - INTERVAL 1 YEAR GROUP BY country;\\n\\nExplanation: The SQL query selects the country column and the maximum severity level based on the severity column from the vulnerabilities table where the timestamp is within the last year. The results are grouped by country.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the sum of sales for each salesperson in the month of May 2021 for sustainable fashion items?\\n\\nContext: CREATE TABLE SalesData (SalesID INT, Salesperson TEXT, ItemName TEXT, SalesDate DATE, Sustainable BOOLEAN); INSERT INTO SalesData (SalesID, Salesperson, ItemName, SalesDate, Sustainable) VALUES (1, 'John Doe', 'Organic Cotton Dress', '2021-05-02', true), (2, 'Jane Smith', 'Recycled Polyester Skirt', '2021-05-03', true), (3, 'Bob Johnson', 'Tencel Blouse', '2021-05-04', true), (4, 'Alice Williams', 'Bamboo Viscose Pants', '2021-05-05', true), (5, 'Charlie Brown', 'Conventional Cotton Shirt', '2021-05-06', false);<end_of_turn>\\n<start_of_turn>model\\nSELECT Salesperson, SUM(SalesData.Sustainable::INT * SalesData.SalesID) as SumOfSales FROM SalesData WHERE SalesDate BETWEEN '2021-05-01' AND '2021-05-31' AND Sustainable = true GROUP BY Salesperson;\\n\\nExplanation: The SQL query filters for sustainable fashion items and the month of May 2021, calculates the sum of sales by converting the Sustainable BOOLEAN column to INT and multiplying by SalesID, then groups the result by Salesperson.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nList the organizations that have allocated the highest budget for ethical AI.\\n\\nContext: CREATE TABLE allocations (id INT, organization VARCHAR(50), budget DECIMAL(10,2)); INSERT INTO allocations (id, organization, budget) VALUES (1, 'EthicalAI', 750000.00), (2, 'AIforGood', 800000.00);<end_of_turn>\\n<start_of_turn>model\\nSELECT organization FROM allocations WHERE budget = (SELECT MAX(budget) FROM allocations WHERE prompt LIKE '%ethical AI%');\\n\\nExplanation: This SQL query lists the organizations that have allocated the highest budget for ethical AI. It does this by using a subquery to find the maximum budget for ethical AI, then selecting the 'organization' column where the 'budget' column matches this maximum value.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the maximum funding for biotech startups in Canada?\\n\\nContext: CREATE SCHEMA biotech; CREATE TABLE biotech.startups (id INT, name VARCHAR(100), country VARCHAR(50), funding FLOAT); INSERT INTO biotech.startups (id, name, country, funding) VALUES (1, 'StartupG', 'Canada', 12000000.00); INSERT INTO biotech.startups (id, name, country, funding) VALUES (2, 'StartupH', 'Canada', 15000000.00);<end_of_turn>\\n<start_of_turn>model\\nSELECT MAX(funding) FROM biotech.startups WHERE country = 'Canada';\\n\\nExplanation: This SQL query calculates the maximum funding for biotech startups in Canada by selecting the maximum value of the 'funding' column for rows where the 'country' column is 'Canada'.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the average energy efficiency improvement (in percentage) for buildings in the UK after retrofitting?\\n\\nContext: CREATE TABLE BuildingRetrofits ( BuildingID INT, Country VARCHAR(255), PreRetrofitRating FLOAT, PostRetrofitRating FLOAT );<end_of_turn>\\n<start_of_turn>model\\nSELECT AVG((PostRetrofitRating-PreRetrofitRating)\/PreRetrofitRating*100) FROM BuildingRetrofits WHERE Country = 'United Kingdom';\\n\\nExplanation: This query calculates the average energy efficiency improvement for buildings in the United Kingdom after retrofitting by finding the mean of the difference between PostRetrofitRating and PreRetrofitRating, divided by PreRetrofitRating and multiplied by 100, in the BuildingRetrofits table where the Country is 'United Kingdom'.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the average rating of movies produced in the US and released between 2015 and 2020, grouped by genre?\\n\\nContext: CREATE TABLE movies (id INT, title VARCHAR(255), release_year INT, rating DECIMAL(3,2), genre VARCHAR(255), country VARCHAR(255)); INSERT INTO movies (id, title, release_year, rating, genre, country) VALUES (1, 'Movie1', 2015, 7.8, 'Action', 'USA'); INSERT INTO movies (id, title, release_year, rating, genre, country) VALUES (2, 'Movie2', 2016, 6.5, 'Comedy', 'USA'); INSERT INTO movies (id, title, release_year, rating, genre, country) VALUES (3, 'Movie3', 2017, 8.2, 'Drama', 'USA'); INSERT INTO movies (id, title, release_year, rating, genre, country) VALUES (4, 'Movie4', 2018, 7.0, 'Romance', 'USA'); INSERT INTO movies (id, title, release_year, rating, genre, country) VALUES (5, 'Movie5', 2019, 8.5, 'Documentary', 'USA'); INSERT INTO movies (id, title, release_year, rating, genre, country) VALUES (6, 'Movie6', 2020, 7.2, 'Sci-Fi', 'USA');<end_of_turn>\\n<start_of_turn>model\\nSELECT genre, AVG(rating) FROM movies WHERE release_year BETWEEN 2015 AND 2020 AND country = 'USA' GROUP BY genre;\\n\\nExplanation: This query calculates the average rating of movies produced in the US and released between 2015 and 2020, grouped by genre. It filters the data by release year and country, then calculates the average rating for each genre using the AVG() function and groups the results by genre using the GROUP BY clause.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the percentage of employees trained in disability awareness in the Southeast region?\\n\\nContext: CREATE TABLE employee_training (region VARCHAR(20), training VARCHAR(30), participants INT); INSERT INTO employee_training (region, training, participants) VALUES ('Southeast', 'Disability Awareness', 150); INSERT INTO employee_training (region, training, participants) VALUES ('Southeast', 'Disability Awareness', 100);<end_of_turn>\\n<start_of_turn>model\\nSELECT (SUM(participants) \/ (SELECT SUM(participants) FROM employee_training WHERE region = 'Southeast')) * 100 FROM employee_training WHERE region = 'Southeast' AND training = 'Disability Awareness';\\n\\nExplanation: This SQL query calculates the percentage of employees trained in disability awareness in the Southeast region by dividing the sum of participants in the Disability Awareness training by the total number of participants in the Southeast region, then multiplying by 100.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nShow the total amount of funding for programs in 'Arts' and 'Culture' categories, excluding programs with a budget over $100,000.\\n\\nContext: CREATE TABLE Programs (id INT, name TEXT, category TEXT, budget INT); INSERT INTO Programs (id, name, category, budget) VALUES (1, 'Art Exhibition', 'Arts', 50000), (2, 'Music Festival', 'Culture', 150000), (3, 'Theater Performance', 'Arts', 80000);<end_of_turn>\\n<start_of_turn>model\\nSELECT SUM(budget) FROM Programs WHERE category IN ('Arts', 'Culture') AND budget <= 100000;\\n\\nExplanation: The SQL query uses the SELECT statement with the SUM keyword to get the total amount of funding for programs in 'Arts' and 'Culture' categories, excluding programs with a budget over $100,000. It uses the IN keyword in the WHERE clause to filter the records based on category and the logical condition to filter the records based on budget.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the total number of workers employed in factories in North America?\\n\\nContext: CREATE TABLE factory_workers (id INT, factory VARCHAR(100), location VARCHAR(100), num_workers INT); INSERT INTO factory_workers (id, factory, location, num_workers) VALUES (1, 'US Factory', 'United States', 100), (2, 'Canada Factory', 'Canada', 50), (3, 'Mexico Factory', 'Mexico', 150);<end_of_turn>\\n<start_of_turn>model\\nSELECT SUM(num_workers) FROM factory_workers WHERE location = 'North America';\\n\\nExplanation: This query calculates the total number of workers employed in factories in North America by filtering the factory_workers table to only include records where the location is North America, and then calculating the sum of the num_workers column for those records.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the maximum number of likes for posts with the hashtag \"#food\" in the \"user_activity\" table?\\n\\nContext: CREATE TABLE post_activity (post_id INT, likes INT, hashtags VARCHAR(255)); INSERT INTO post_activity (post_id, likes, hashtags) VALUES (1, 10, '#food'), (2, 20, '#nature'), (3, 30, '#food'), (4, 40, '#travel');<end_of_turn>\\n<start_of_turn>model\\nSELECT MAX(pa.likes) FROM post_activity pa WHERE pa.hashtags LIKE '%#food%';\\n\\nExplanation: This query finds the maximum number of likes for posts with the hashtag \"#food\" in the \"post_activity\" table. It does this by filtering for posts with the hashtag \"#food\" and then finding the maximum number of likes for these posts.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nList all autonomous driving research programs in Germany and the number of safety tests conducted.\\n\\nContext: CREATE TABLE SafetyTests (Id INT, TestType VARCHAR(50), VehicleId INT, TestDate DATE, Program VARCHAR(100)); CREATE TABLE AutonomousVehicles (Id INT, Name VARCHAR(100), Program VARCHAR(100)); INSERT INTO SafetyTests (Id, TestType, VehicleId, TestDate, Program) VALUES (9, 'Lane Keeping', 5, '2021-04-15', 'AutonomousDrivingGermany'), (10, 'Traffic Sign Recognition', 5, '2021-04-16', 'AutonomousDrivingGermany'); INSERT INTO AutonomousVehicles (Id, Name, Program) VALUES (5, 'AutonomousCarGermany', 'AutonomousDrivingGermany');<end_of_turn>\\n<start_of_turn>model\\nSELECT AutonomousVehicles.Program, COUNT(SafetyTests.Id) FROM AutonomousVehicles INNER JOIN SafetyTests ON AutonomousVehicles.Id = SafetyTests.VehicleId WHERE Program LIKE '%Germany%' GROUP BY AutonomousVehicles.Program;\\n\\nExplanation: This query lists all autonomous driving research programs in Germany and the number of safety tests conducted by using the INNER JOIN clause to combine the data from two tables (SafetyTests and AutonomousVehicles), filtering the records based on the program using the WHERE clause, and grouping the results by the program name using the GROUP BY clause.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the average number of professional development courses completed by teachers in the past year, broken down by their years of experience?\\n\\nContext: CREATE TABLE teachers (teacher_id INT, years_of_experience INT, professional_development_course_completion_date DATE); INSERT INTO teachers (teacher_id, years_of_experience, professional_development_course_completion_date) VALUES (1, 5, '2022-01-01'), (2, 10, '2021-12-15'), (3, 2, '2022-03-05');<end_of_turn>\\n<start_of_turn>model\\nSELECT years_of_experience, AVG(COUNT(*)) as avg_courses FROM teachers WHERE professional_development_course_completion_date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR) GROUP BY years_of_experience;\\n\\nExplanation: This SQL query calculates the average number of professional development courses completed by teachers in the past year, broken down by their years of experience. It first filters the records where the professional development course completion date is within the past year, and then groups the results by years_of_experience. It then calculates the number of courses completed by each teacher for each year of experience using the COUNT() function, and finally calculates the average number of courses using the AVG() function.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nShow me the tax percentage for the 'Middle East' region\\n\\nContext: CREATE TABLE sales_tax (region VARCHAR(50), tax_percentage DECIMAL(5,2)); INSERT INTO sales_tax (region, tax_percentage) VALUES ('North America', 0.08), ('South America', 0.15), ('Europe', 0.20), ('Middle East', 0.12), ('Asia', 0.18);<end_of_turn>\\n<start_of_turn>model\\nSELECT tax_percentage FROM sales_tax WHERE region = 'Middle East';\\n\\nExplanation: Retrieve the tax percentage for the 'Middle East' region by querying the 'sales_tax' table.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nList all expeditions led by researchers with 'indigenous_knowledge' expertise since 2015.\\n\\nContext: CREATE TABLE researchers ( id INT PRIMARY KEY, name VARCHAR(255), expertise VARCHAR(255) ); INSERT INTO researchers (id, name, expertise) VALUES (1, 'Juanita Martinez', 'indigenous_knowledge'); CREATE TABLE expeditions ( id INT PRIMARY KEY, name VARCHAR(255), location VARCHAR(255), year INT, leader_id INT, FOREIGN KEY (leader_id) REFERENCES researchers(id) ); INSERT INTO expeditions (id, name, location, year, leader_id) VALUES (1, 'Ice Edge Expedition', 'Arctic', 2016, 1);<end_of_turn>\\n<start_of_turn>model\\nSELECT e.name, e.location, e.year, r.name AS leader_name FROM expeditions e JOIN researchers r ON e.leader_id = r.id WHERE r.expertise = 'indigenous_knowledge' AND e.year >= 2015;\\n\\nExplanation: This SQL query selects the expedition name, location, and year, along with the leader's name from the 'expeditions' and 'researchers' tables, filtered for leaders with 'indigenous_knowledge' expertise and expeditions since 2015.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the average horsepower of sports cars produced between 2015 and 2020?\\n\\nContext: CREATE TABLE SportsCar (Id INT, Name VARCHAR(255), Year INT, Horsepower INT); INSERT INTO SportsCar (Id, Name, Year, Horsepower) VALUES (1, 'Ferrari 488', 2015, 661), (2, 'Porsche 911', 2016, 443), (3, 'Lamborghini Huracan', 2017, 602), (4, 'McLaren 720S', 2018, 710), (5, 'Audi R8', 2019, 612), (6, 'Chevrolet Corvette', 2020, 495);<end_of_turn>\\n<start_of_turn>model\\nSELECT AVG(Horsepower) FROM SportsCar WHERE Year BETWEEN 2015 AND 2020 AND Name LIKE 'Sports Car'\\n\\nExplanation: Calculate the average horsepower of sports cars by finding the mean value of the Horsepower column for rows with Years between 2015 and 2020 and with Name containing \"Sports Car\".<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nList the unique medical conditions of astronauts who have participated in space missions longer than 30 days.\\n\\nContext: CREATE TABLE Astronaut_Medical (Astronaut_ID INT, Medical_Condition VARCHAR(50), Mission_Duration INT); INSERT INTO Astronaut_Medical (Astronaut_ID, Medical_Condition, Mission_Duration) VALUES (1, 'Motion Sickness', 300); INSERT INTO Astronaut_Medical (Astronaut_ID, Medical_Condition, Mission_Duration) VALUES (2, 'Space Adaptation Syndrome', 35); INSERT INTO Astronaut_Medical (Astronaut_ID, Medical_Condition, Mission_Duration) VALUES (3, 'Back Pain', 250);<end_of_turn>\\n<start_of_turn>model\\nSELECT DISTINCT Medical_Condition FROM Astronaut_Medical WHERE Mission_Duration > 30;\\n\\nExplanation: This SQL query filters the data by Mission_Duration greater than 30 days and retrieves the unique medical conditions of astronauts.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nList the names and launch dates of Jupiter missions from the 'jupiter_missions' table.\\n\\nContext: CREATE TABLE jupiter_missions (id INT, mission_name VARCHAR(50), launch_date DATE); INSERT INTO jupiter_missions (id, mission_name, launch_date) VALUES (1, 'Galileo Orbiter', '1989-10-18'), (2, 'Juno', '2011-08-05'), (3, 'Europa Clipper', '2024-10-02');<end_of_turn>\\n<start_of_turn>model\\nSELECT mission_name, launch_date FROM jupiter_missions WHERE destination = 'Jupiter';\\n\\nExplanation: This query retrieves the names and launch dates of Jupiter missions from the 'jupiter_missions' table by filtering the rows with the WHERE clause and selecting the mission_name and launch_date columns.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the percentage of vessels that have complied with safety regulations in the Caribbean Sea in the last year, and what is the percentage of vessels that have not complied?\\n\\nContext: CREATE TABLE vessels (id INT, name TEXT, safety_compliance INT, compliance_date DATE, compliance_location TEXT);<end_of_turn>\\n<start_of_turn>model\\nSELECT (SUM(CASE WHEN safety_compliance = 1 THEN 1 ELSE 0 END) \/ COUNT(*)) * 100 AS compliance_percentage, (SUM(CASE WHEN safety_compliance = 0 THEN 1 ELSE 0 END) \/ COUNT(*)) * 100 AS non_compliance_percentage FROM vessels WHERE compliance_date >= DATEADD(year, -1, GETDATE()) AND compliance_location = 'Caribbean Sea';\\n\\nExplanation: This query calculates the percentage of vessels that have complied with safety regulations and the percentage of vessels that have not complied in the Caribbean Sea in the last year. It does this by filtering the vessels table for rows where compliance_date is within the last year and compliance_location is 'Caribbean Sea'. It then uses the SUM and COUNT functions with a CASE statement to calculate the number of vessels that have complied and the total number of vessels, respectively. These values are used to calculate the compliance percentage, and the same process is used to calculate the non-compliance percentage.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWho was the first female astronaut from India?\\n\\nContext: CREATE TABLE astronauts (id INT, name VARCHAR(255), country VARCHAR(255), first_flight DATE); INSERT INTO astronauts (id, name, country, first_flight) VALUES (1, 'Kalpana Chawla', 'India', '1997-11-19');<end_of_turn>\\n<start_of_turn>model\\nSELECT name FROM astronauts WHERE country = 'India' AND id = (SELECT MIN(id) FROM astronauts WHERE country = 'India' AND gender = 'Female');\\n\\nExplanation: This query retrieves the name of the first female astronaut from India using a subquery to find the minimum id associated with a female astronaut from India.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nShow the number of users who played a specific game in the last week, grouped by region.\\n\\nContext: CREATE TABLE users(id INT, name VARCHAR(50), region VARCHAR(50), last_login DATETIME); CREATE TABLE game_sessions(id INT, user_id INT, game_name VARCHAR(50), start_time DATETIME);<end_of_turn>\\n<start_of_turn>model\\nSELECT game_name, region, COUNT(DISTINCT users.id) as num_users FROM game_sessions JOIN users ON game_sessions.user_id = users.id WHERE start_time >= DATE_SUB(CURRENT_DATE, INTERVAL 1 WEEK) GROUP BY game_name, region;\\n\\nExplanation: The query joins the users and game_sessions tables and filters for sessions that started in the last week. It then groups the data by game name and region and calculates the number of distinct users for each group.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the average age of employees who have completed training programs in the IT department?\\n\\nContext: CREATE TABLE employees (employee_id INT, department VARCHAR(255), age INT); INSERT INTO employees (employee_id, department, age) VALUES (1, 'IT', 30), (2, 'HR', 25), (3, 'IT', 35), (4, 'Finance', 40); CREATE TABLE training_programs (program_id INT, department VARCHAR(255)); INSERT INTO training_programs (program_id, department) VALUES (1, 'IT'), (2, 'HR'); CREATE TABLE completed_training (employee_id INT, program_id INT); INSERT INTO completed_training (employee_id, program_id) VALUES (1, 1), (2, 2), (3, 1);<end_of_turn>\\n<start_of_turn>model\\nSELECT AVG(e.age) FROM employees e JOIN completed_training ct ON e.employee_id = ct.employee_id JOIN training_programs tp ON ct.program_id = tp.program_id WHERE e.department = 'IT';\\n\\nExplanation: We first join the employees table with the completed_training table using the employee_id column. Then, we join the training_programs table with the completed_training table using the program_id column. After that, we filter the records where the department is 'IT'. Finally, we calculate the average age of the employees.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the total budget allocated for healthcare services in 2020?\\n\\nContext: CREATE TABLE HealthBudget (Year INT, Service VARCHAR(255), Budget FLOAT); INSERT INTO HealthBudget VALUES (2018, 'Healthcare', 15000000), (2019, 'Healthcare', 16000000), (2020, 'Healthcare', ?);<end_of_turn>\\n<start_of_turn>model\\nSELECT SUM(Budget) FROM HealthBudget WHERE Service = 'Healthcare' AND Year = 2020;\\n\\nExplanation: This query calculates the total budget allocated for healthcare services in 2020 by summing the 'Budget' column values where 'Service' is 'Healthcare' and 'Year' is 2020.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nFind countries that received humanitarian assistance in Q3 of 2022.\\n\\nContext: CREATE TABLE Humanitarian_Assistance (Country VARCHAR(100), Quarter INT, Year INT);<end_of_turn>\\n<start_of_turn>model\\nSELECT DISTINCT Country FROM Humanitarian_Assistance WHERE Quarter = 3 AND Year = 2022;\\n\\nExplanation: This query identifies countries that received humanitarian assistance in Q3 of 2022 by selecting distinct countries from the Humanitarian_Assistance table where the quarter is 3 and the year is 2022.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nFind states with more than 3 mental health parity laws.\\n\\nContext: CREATE TABLE mental_health_parity (id INT PRIMARY KEY, state VARCHAR(2), parity_law VARCHAR(255));<end_of_turn>\\n<start_of_turn>model\\nSELECT state, COUNT(*) as parity_law_count FROM mental_health_parity WHERE parity_law = 'yes' GROUP BY state HAVING COUNT(*) > 3;\\n\\nExplanation: Count the number of states with more than 3 mental health parity laws.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat are the top 5 games played by region?\\n\\nContext: CREATE TABLE Games (game_id INT, game_name VARCHAR(255), region VARCHAR(255)); INSERT INTO Games (game_id, game_name, region) VALUES (1, 'Fortnite', 'North America'), (2, 'PUBG', 'Asia'), (3, 'Valorant', 'Europe'), (4, 'Apex Legends', 'South America'), (5, 'Overwatch', 'Oceania');<end_of_turn>\\n<start_of_turn>model\\nSELECT region, game_name, COUNT(*) as play_count FROM Games GROUP BY region, game_name ORDER BY region, play_count DESC LIMIT 5;\\n\\nExplanation: The SQL query groups the data by region and game name, then counts the number of occurrences for each combination. It orders the results by region and play count in descending order, and limits the output to the top 5 records for each region.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the total number of visitors for the \"Art of the Renaissance\" and \"Modern Art\" exhibitions?\\n\\nContext: CREATE TABLE Exhibitions (exhibition_name TEXT, visitor_count INTEGER); INSERT INTO Exhibitions (exhibition_name, visitor_count) VALUES ('Art of the Renaissance', 3000), ('Modern Art', 4000);<end_of_turn>\\n<start_of_turn>model\\nSELECT SUM(visitor_count) FROM Exhibitions WHERE exhibition_name IN ('Art of the Renaissance', 'Modern Art');\\n\\nExplanation: The SQL query adds up the visitor counts for the \"Art of the Renaissance\" and \"Modern Art\" exhibitions by using the IN operator to filter the Exhibitions table and then calculates the sum of the visitor_count column.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nList all unique attorney last names who have billed for cases in the 'Immigration' case type, in descending order based on the number of cases they handled.\\n\\nContext: CREATE TABLE ImmigrationCases (CaseID INT, CaseType VARCHAR(20), AttorneyLastName VARCHAR(20), BillingAmount DECIMAL(10,2)); INSERT INTO ImmigrationCases (CaseID, CaseType, AttorneyLastName, BillingAmount) VALUES (1, 'Immigration', 'Garcia', 5000.00), (2, 'Immigration', 'Rodriguez', 3000.00), (3, 'Immigration', 'Garcia', 2000.00);<end_of_turn>\\n<start_of_turn>model\\nSELECT DISTINCT AttorneyLastName, COUNT(*) AS CaseCount FROM ImmigrationCases WHERE CaseType = 'Immigration' GROUP BY AttorneyLastName ORDER BY CaseCount DESC;\\n\\nExplanation: The SQL query lists all unique attorney last names who have billed for immigration cases, in descending order based on the number of cases they handled, by using the DISTINCT keyword, the COUNT() function, the GROUP BY clause, and the ORDER BY clause.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nFind the total number of machines that were added in each year\\n\\nContext: CREATE TABLE machines (id INT, name VARCHAR(50), added_date DATE); INSERT INTO machines (id, name, added_date) VALUES (1, 'Machine 1', '2021-01-15'), (2, 'Machine 2', '2022-02-20'), (3, 'Machine 3', '2022-01-05'), (4, 'Machine 4', '2023-03-12'), (5, 'Machine 5', '2023-02-01'), (6, 'Machine 6', '2023-04-15');<end_of_turn>\\n<start_of_turn>model\\nSELECT YEAR(added_date) AS year, COUNT(*) AS total FROM machines GROUP BY year;\\n\\nExplanation: This SQL query finds the total number of machines that were added in each year by grouping the records by the year of the added_date and then counting the number of records in each group.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the average budget for biotech startups in New York?\\n\\nContext: CREATE TABLE biotech_startups (id INT, name TEXT, location TEXT, budget FLOAT); INSERT INTO biotech_startups (id, name, location, budget) VALUES (1, 'StartupLab', 'New York', 10000000.0); INSERT INTO biotech_startups (id, name, location, budget) VALUES (2, 'TechBio', 'New York', 14000000.0);<end_of_turn>\\n<start_of_turn>model\\nSELECT AVG(budget) FROM biotech_startups WHERE location = 'New York';\\n\\nExplanation: The SQL query calculates the average budget of biotech startups in New York by using the AVG function on the budget column and filtering rows based on the location.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nShow the total number of military vehicles by type\\n\\nContext: CREATE TABLE MilitaryInventory (id INT, type VARCHAR(50), quantity INT); INSERT INTO MilitaryInventory (id, type, quantity) VALUES (1, 'Tank', 500); INSERT INTO MilitaryInventory (id, type, quantity) VALUES (2, 'Helicopter', 300);<end_of_turn>\\n<start_of_turn>model\\nSELECT type, SUM(quantity) FROM MilitaryInventory GROUP BY type;\\n\\nExplanation: This query shows the total number of military vehicles by type by filtering the MilitaryInventory table and grouping the result by type, and calculates the sum of quantity.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhich artists have their works exhibited in the 'Modern Art Museum' and the number of their works in each exhibition?\\n\\nContext: CREATE TABLE Exhibitions (exhibition_id INT, exhibition_name TEXT, artist_id INT, num_works INT); INSERT INTO Exhibitions (exhibition_id, exhibition_name, artist_id, num_works) VALUES (1, 'Modern Art Museum', 101, 5), (2, 'Modern Art Museum', 102, 3), (3, 'Contemporary Art Gallery', 101, 4);<end_of_turn>\\n<start_of_turn>model\\nSELECT e.artist_id, e.exhibition_name, e.num_works  FROM Exhibitions e  WHERE e.exhibition_name = 'Modern Art Museum'\\n\\nExplanation: This query selects the artist_id, exhibition_name, and num_works from the Exhibitions table where the exhibition_name is 'Modern Art Museum'. It will show the artists who have exhibited their works in the Modern Art Museum and the number of works in each exhibition.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the total budget allocated for the \"Education\" department in the current year?\\n\\nContext: CREATE TABLE Budget (BudgetID INT, Department VARCHAR(50), Amount DECIMAL(10,2), BudgetYear INT);<end_of_turn>\\n<start_of_turn>model\\nSELECT SUM(Amount) FROM Budget WHERE Department = 'Education' AND BudgetYear = YEAR(CURDATE());\\n\\nExplanation: This query selects the sum of the budget amount for the \"Education\" department in the current year by filtering the budget based on the department and budget year.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the average budget for community education programs?\\n\\nContext: CREATE TABLE Community_Education (program VARCHAR(20), budget INT); INSERT INTO Community_Education (program, budget) VALUES ('Young_Conservationists', 9000), ('Eco_Rangers', 11000), ('Green_Neighbors', 8000);<end_of_turn>\\n<start_of_turn>model\\nSELECT AVG(budget) FROM Community_Education;\\n\\nExplanation: This query calculates the average budget for community education programs by finding the mean value of the 'budget' column in the 'Community_Education' table.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the average transaction value for customers in Asia in the last month, ordered by the transaction date in ascending order?\\n\\nContext: CREATE TABLE customer_transactions_2 (transaction_id INT, customer_id INT, transaction_value DECIMAL(10, 2), transaction_date DATE, customer_region VARCHAR(20)); INSERT INTO customer_transactions_2 (transaction_id, customer_id, transaction_value, transaction_date, customer_region) VALUES (1, 5, 12000, '2021-08-05', 'Asia'), (2, 6, 35000, '2021-07-20', 'Asia'), (3, 7, 8000, '2021-06-10', 'Asia');<end_of_turn>\\n<start_of_turn>model\\nSELECT customer_region, AVG(transaction_value) as avg_transaction_value FROM customer_transactions_2 WHERE transaction_date BETWEEN DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH) AND CURRENT_DATE AND customer_region = 'Asia' GROUP BY customer_region ORDER BY MIN(transaction_date);\\n\\nExplanation: This SQL query calculates the average transaction value for customers in Asia in the last month, ordered by the transaction date in ascending order. It uses the customer_transactions_2 table, which includes the transaction ID, customer ID, transaction value, transaction date, and customer region. The query calculates the average transaction value for customers in Asia and orders the results by the minimum transaction date in ascending order.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nUpdate the \"year\" column to 2024 for records in the \"trucks\" table where the \"make\" is \"Rivian\"\\n\\nContext: CREATE TABLE trucks (id INT PRIMARY KEY, make VARCHAR(50), model VARCHAR(50), year INT);<end_of_turn>\\n<start_of_turn>model\\nUPDATE trucks SET year = 2024 WHERE make = 'Rivian';\\n\\nExplanation: This SQL query updates the \"year\" column to 2024 for records in the \"trucks\" table where the \"make\" column is \"Rivian\". It performs an update operation without any joins.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nGet the number of unique products sold by each supplier?\\n\\nContext: CREATE TABLE unique_products (supplier_id INT, product_id INT);<end_of_turn>\\n<start_of_turn>model\\nSELECT suppliers.supplier_name, COUNT(DISTINCT unique_products.product_id) FROM suppliers JOIN unique_products ON suppliers.supplier_id = unique_products.supplier_id GROUP BY suppliers.supplier_id;\\n\\nExplanation: Joins the suppliers and unique_products tables, and then calculates the number of unique products sold by each supplier.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhich network infrastructure investments were made in the African region?\\n\\nContext: CREATE TABLE network_investments (investment_id INT, amount FLOAT, region VARCHAR(20)); INSERT INTO network_investments (investment_id, amount, region) VALUES (1, 500000, 'Europe'), (2, 600000, 'Africa');<end_of_turn>\\n<start_of_turn>model\\nSELECT investment_id, amount FROM network_investments WHERE region = 'Africa';\\n\\nExplanation: This query simply selects the investment_id and amount columns from the network_investments table for records where the region is Africa.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nInsert new music festival data and calculate the total revenue for each festival.\\n\\nContext: CREATE TABLE festivals (festival_id INT, festival_name VARCHAR(50), city VARCHAR(50), revenue DECIMAL(10,2)); INSERT INTO festivals (festival_id, festival_name, city, revenue) VALUES (1, 'Coachella', 'Indio', 200000.00), (2, 'Lollapalooza', 'Chicago', 150000.00);<end_of_turn>\\n<start_of_turn>model\\nINSERT INTO festivals (festival_id, festival_name, city, revenue) VALUES (3, 'Glastonbury', 'Pilton', 300000.00), (4, 'Summerfest', 'Milwaukee', 125000.00); SELECT festival_name, SUM(revenue) AS total_revenue FROM festivals GROUP BY festival_name;\\n\\nExplanation: The SQL query first inserts new music festival data for Glastonbury and Summerfest. Then, it calculates the total revenue for each festival by using the SUM function and the GROUP BY clause.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the average speed of vessels from Singapore registry in the Caribbean Sea over the past year?\\n\\nContext: CREATE TABLE ports (port_id INT, port_name VARCHAR(255), country VARCHAR(255)); INSERT INTO ports VALUES (1, 'Kingston', 'Jamaica'); INSERT INTO ports VALUES (2, 'Willemstad', 'Curacao'); CREATE TABLE vessel_movements (movement_id INT, vessel_id INT, port_id INT, movement_timestamp TIMESTAMP); INSERT INTO vessel_movements VALUES (1, 301, 1, '2021-06-01 10:00:00'); INSERT INTO vessel_movements VALUES (2, 302, 2, '2021-06-15 15:30:00'); CREATE TABLE vessel_info (vessel_id INT, vessel_name VARCHAR(255), flag_state VARCHAR(255)); INSERT INTO vessel_info VALUES (301, 'Test Vessel 3', 'Singapore');<end_of_turn>\\n<start_of_turn>model\\nSELECT AVG(vessel_speed) FROM (SELECT v.vessel_id, (vessel_distance \/ TIMESTAMPDIFF(HOUR, v.movement_timestamp, l.movement_timestamp)) AS vessel_speed FROM vessel_movements v JOIN vessel_movements l ON v.vessel_id = l.vessel_id JOIN vessel_info vi ON v.vessel_id = vi.vessel_id WHERE v.movement_timestamp BETWEEN DATE_SUB(NOW(), INTERVAL 1 YEAR) AND NOW() AND vi.flag_state = 'Singapore' AND l.port_id IN (SELECT port_id FROM ports WHERE country IN ('Jamaica', 'Curacao'))) AS speed_calculation;\\n\\nExplanation: 1. Filters vessel movements involving Singapore-flagged vessels in the Caribbean Sea over the past year. 2. Performs a self-join on the vessel_movements table to find the subsequent movement of the same vessel. 3. Calculates the average vessel speed based on the distance between the two ports and the time difference between the two movements.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the average age of patients who received medication-based treatment?\\n\\nContext: CREATE TABLE patients (patient_id INT, age INT, treatment_type VARCHAR(10)); INSERT INTO patients (patient_id, age, treatment_type) VALUES (1, 30, 'medication'), (2, 45, 'therapy'), (3, 50, 'medication'), (4, 25, 'therapy');<end_of_turn>\\n<start_of_turn>model\\nSELECT AVG(age) FROM patients WHERE treatment_type = 'medication';\\n\\nExplanation: The SQL query calculates the average age of patients who received medication-based treatment. It uses the WHERE clause to filter for rows where the treatment type is 'medication', and then uses the AVG aggregation function to calculate the average value in the age column.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nHow many aircraft models were manufactured by Boeing and Airbus before 2000?\\n\\nContext: CREATE TABLE boeing_aircraft (model VARCHAR(50), year INT); INSERT INTO boeing_aircraft (model, year) VALUES ('B707', 1954), ('B727', 1963), ('B737', 1967), ('B747', 1969), ('B757', 1981), ('B767', 1982), ('B777', 1995); CREATE TABLE airbus_aircraft (model VARCHAR(50), year INT); INSERT INTO airbus_aircraft (model, year) VALUES ('A300', 1972), ('A310', 1983), ('A320', 1988), ('A330', 1992), ('A340', 1993);<end_of_turn>\\n<start_of_turn>model\\nSELECT COUNT(*) FROM (SELECT model, year FROM boeing_aircraft WHERE year < 2000 UNION ALL SELECT model, year FROM airbus_aircraft WHERE year < 2000) AS combined;\\n\\nExplanation: The query first selects the model and year for each aircraft in Boeing and Airbus that were manufactured before 2000. It then performs a UNION ALL operation to combine the two result sets into a single one. Finally, the query counts the total number of aircraft models in the combined result set.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat are the production figures for wells in California?\\n\\nContext: CREATE TABLE wells (well_id INT, well_name VARCHAR(50), location VARCHAR(50), production FLOAT); INSERT INTO wells (well_id, well_name, location, production) VALUES (1, 'Well A', 'Oklahoma', 250.6), (2, 'Well B', 'Texas', 301.7), (4, 'Well D', 'California', 280.9), (3, 'Well C', 'Louisiana', 220.4);<end_of_turn>\\n<start_of_turn>model\\nSELECT location, production FROM wells WHERE location = 'California';\\n\\nExplanation: The SQL query selects the location and production columns from the 'wells' table where the location is 'California'. This returns the name and production value for the well located in California.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the highest-rated open pedagogy resource by users?\\n\\nContext: CREATE TABLE open_pedagogy (resource_id INT, rating INT, user_id INT); INSERT INTO open_pedagogy (resource_id, rating, user_id) VALUES (1, 5, 100), (2, 4, 100), (3, 3, 101), (4, 5, 102);<end_of_turn>\\n<start_of_turn>model\\nSELECT resource_id, MAX(rating) as highest_rating FROM open_pedagogy GROUP BY resource_id ORDER BY highest_rating DESC LIMIT 1;\\n\\nExplanation: Identify the open pedagogy resource with the highest rating. The MAX function finds the highest rating, and LIMIT 1 returns only one row with the highest value.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the total number of mental health parity complaints filed in California in the last 12 months by race?\\n\\nContext: CREATE TABLE mental_health_parity_complaints (complaint_id INT, complaint_date DATE, state VARCHAR(20), race VARCHAR(20)); INSERT INTO mental_health_parity_complaints (complaint_id, complaint_date, state, race) VALUES (1, '2021-07-01', 'California', 'Asian'), (2, '2021-03-15', 'California', 'Black'), (3, '2021-01-01', 'California', 'Hispanic');<end_of_turn>\\n<start_of_turn>model\\nSELECT race, COUNT(*) as num_complaints FROM mental_health_parity_complaints WHERE complaint_date >= DATE_SUB(CURRENT_DATE, INTERVAL 12 MONTH) AND state = 'California' GROUP BY race;\\n\\nExplanation: This SQL query counts the number of mental health parity complaints filed in California in the last 12 months by race. It uses the COUNT function to count the number of complaints and the WHERE clause to filter the results to only include complaints filed in California in the last 12 months. The query then groups the results by race using the GROUP BY clause.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the number of clinics in the 'rural_healthcare' table located in 'Forest Region'?\\n\\nContext: CREATE TABLE rural_healthcare (name VARCHAR(255), type VARCHAR(255), location VARCHAR(255)); INSERT INTO rural_healthcare (name, type, location) VALUES ('Rural General Hospital', 'Hospital', 'Bushland'), ('Rural Community Hospital', 'Hospital', 'Forest Region'), ('Rural Mental Health Clinic', 'Clinic', 'Desert Region'), ('Rural Dental Clinic', 'Clinic', 'Forest Region');<end_of_turn>\\n<start_of_turn>model\\nSELECT COUNT(*) FROM rural_healthcare WHERE type = 'Clinic' AND location = 'Forest Region';\\n\\nExplanation: This query counts the number of clinics in the 'rural_healthcare' table located in 'Forest Region' by filtering on the type and location columns with the values 'Clinic' and 'Forest Region', respectively.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the total number of tourists who visited Japan in 2020 and 2021?\\n\\nContext: CREATE TABLE tourism_stats (country VARCHAR(50), year INT, visitors INT); INSERT INTO tourism_stats (country, year, visitors) VALUES ('Japan', 2020, 8000000), ('Japan', 2021, 9000000);<end_of_turn>\\n<start_of_turn>model\\nSELECT SUM(visitors) FROM tourism_stats WHERE country = 'Japan' AND year IN (2020, 2021);\\n\\nExplanation: The SQL query calculates the sum of visitors for Japan in the years 2020 and 2021 by using the SUM() function and filtering the data with the WHERE clause.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat was the average citizen feedback score for public transportation in Beijing in 2020?\\n\\nContext: CREATE TABLE Feedback (City VARCHAR(20), Year INT, Category VARCHAR(20), Score INT); INSERT INTO Feedback (City, Year, Category, Score) VALUES ('Beijing', 2020, 'Public Transportation', 70), ('Beijing', 2020, 'Public Transportation', 75);<end_of_turn>\\n<start_of_turn>model\\nSELECT AVG(Score) FROM Feedback WHERE City = 'Beijing' AND Year = 2020 AND Category = 'Public Transportation';\\n\\nExplanation: Calculate the average feedback score for public transportation in Beijing in the year 2020.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the earliest artifact date for 'site_f'?\\n\\nContext: CREATE TABLE excavation_sites (site_id INT, site_name VARCHAR(255)); CREATE TABLE artifacts (artifact_id INT, site_id INT, artifact_type VARCHAR(255), date_found DATE); INSERT INTO excavation_sites (site_id, site_name) VALUES (1, 'site_a'), (2, 'site_b'), (3, 'site_c'), (4, 'site_d'), (5, 'site_e'), (6, 'site_f'); INSERT INTO artifacts (artifact_id, site_id, artifact_type, date_found) VALUES (1, 1, 'Pottery', '2020-01-01'), (2, 1, 'Bone Fragments', '2019-01-01'), (3, 2, 'Pottery', '2021-01-01'), (4, 2, 'Coins', '2020-01-01'), (5, 3, 'Bone Fragments', '2018-01-01'), (6, 3, 'Bronze Tools', '2019-01-01'), (7, 4, 'Pottery', '2017-01-01'), (8, 4, 'Pottery', '2016-01-01'), (9, 5, 'Bronze Tools', '2015-01-01'), (10, 6, 'Bronze Tools', '2014-01-01');<end_of_turn>\\n<start_of_turn>model\\nSELECT MIN(date_found) FROM artifacts WHERE site_id = (SELECT site_id FROM excavation_sites WHERE site_name = 'site_f');\\n\\nExplanation: This query uses a subquery to find the site_id of 'site_f', then returns the earliest date_found for that site.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the average donation amount per month for donations made in the United States?\\n\\nContext: CREATE TABLE Donations (DonationID int, DonorID int, Amount decimal(10,2), DonationDate date, Country varchar(50)); INSERT INTO Donations (DonationID, DonorID, Amount, DonationDate, Country) VALUES (1, 1, 100.00, '2022-07-01', 'United States'), (2, 2, 200.00, '2022-08-15', 'Canada'), (3, 1, 50.00, '2022-09-30', 'United States');<end_of_turn>\\n<start_of_turn>model\\nSELECT AVG(Amount) as AverageDonation, DATE_FORMAT(DonationDate, '%Y-%m') as Month FROM Donations WHERE Country = 'United States' GROUP BY Month;\\n\\nExplanation: This SQL query calculates the average donation amount per month for donations made in the United States. It starts by selecting the AVG() function, which calculates the average of the Amount column. The WHERE clause filters the records to only include donations made in the United States. The GROUP BY clause groups the results by month. The DATE_FORMAT() function formats the DonationDate column to a YYYY-MM format. The result is the average donation amount per month for donations made in the United States.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nList all freight forwarding transactions for 'CustomerA' with their corresponding statuses and dates.\\n\\nContext: CREATE TABLE Customers (CustomerID VARCHAR(20), CustomerName VARCHAR(20)); INSERT INTO Customers (CustomerID, CustomerName) VALUES ('A', 'CustomerA'), ('B', 'CustomerB'); CREATE TABLE FreightForwardingTransactions (TransactionID INT, CustomerID VARCHAR(20), TransactionStatus VARCHAR(20), TransactionDate DATE); INSERT INTO FreightForwardingTransactions (TransactionID, CustomerID, TransactionStatus, TransactionDate) VALUES (1, 'A', 'Created', '2022-01-01'), (2, 'A', 'InProgress', '2022-01-02');<end_of_turn>\\n<start_of_turn>model\\nSELECT FreightForwardingTransactions.TransactionID, FreightForwardingTransactions.TransactionStatus, FreightForwardingTransactions.TransactionDate FROM Customers JOIN FreightForwardingTransactions ON Customers.CustomerID = FreightForwardingTransactions.CustomerID WHERE Customers.CustomerName = 'CustomerA';\\n\\nExplanation: Join the Customers and FreightForwardingTransactions tables based on the CustomerID. Filter for the specified customer name and return the transaction ID, status, and date.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nGet the maximum score achieved in a VR game\\n\\nContext: CREATE TABLE Scores (Score INT, GameType VARCHAR(20)); INSERT INTO Scores (Score, GameType) VALUES (1000, 'VR'); INSERT INTO Scores (Score, GameType) VALUES (2000, 'Non-VR');<end_of_turn>\\n<start_of_turn>model\\nSELECT MAX(Score) FROM Scores WHERE GameType = 'VR';\\n\\nExplanation: This SQL query gets the maximum score achieved in a VR game. It does this by selecting the maximum of the Score column where the GameType is equal to 'VR'.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the average ticket price for dance performances in Europe in Q1 2022?\\n\\nContext: CREATE TABLE CulturalEvents (id INT, region VARCHAR(20), quarter INT, year INT, category VARCHAR(20), price FLOAT); INSERT INTO CulturalEvents (id, region, quarter, year, category, price) VALUES (3, 'Europe', 1, 2022, 'Dance', 30); INSERT INTO CulturalEvents (id, region, quarter, year, category, price) VALUES (4, 'Europe', 1, 2022, 'Theater', 40);<end_of_turn>\\n<start_of_turn>model\\nSELECT AVG(price) FROM CulturalEvents WHERE region = 'Europe' AND quarter = 1 AND year = 2022 AND category = 'Dance';\\n\\nExplanation: This query calculates the average of the 'price' column for records where the 'region' is 'Europe', the 'quarter' is 1, the 'year' is 2022, and the 'category' is 'Dance'.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nUpdate the donation amount of the donor from India to 4000.\\n\\nContext: CREATE TABLE donors (id INT, name TEXT, country TEXT, amount_donated DECIMAL(10,2)); INSERT INTO donors (id, name, country, amount_donated) VALUES (1, 'Alice', 'United States', 5000.00), (2, 'Bob', 'Canada', 6000.00), (3, 'Charlie', 'India', 3000.00);<end_of_turn>\\n<start_of_turn>model\\nUPDATE donors SET amount_donated = 4000 WHERE country = 'India';\\n\\nExplanation: This query updates the amount_donated value for the donor from India to 4000 in the donors table.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nFind the average age of members who have done 'Yoga' and 'Swimming' workouts.\\n\\nContext: CREATE TABLE Members (MemberID INT, Name VARCHAR(50), Age INT); INSERT INTO Members (MemberID, Name, Age) VALUES (1, 'Lena Kim', 31); INSERT INTO Members (MemberID, Name, Age) VALUES (2, 'Mohammad Reza', 39); INSERT INTO Members (MemberID, Name, Age) VALUES (3, 'Karen Vasquez', 29); CREATE TABLE Workout (WorkoutID INT, MemberID INT, WorkoutType VARCHAR(30)); INSERT INTO Workout (WorkoutID, MemberID, WorkoutType) VALUES (1, 1, 'Running'); INSERT INTO Workout (WorkoutID, MemberID, WorkoutType) VALUES (2, 1, 'Cycling'); INSERT INTO Workout (WorkoutID, MemberID, WorkoutType) VALUES (3, 2, 'Yoga'); INSERT INTO Workout (WorkoutID, MemberID, WorkoutType) VALUES (4, 2, 'Swimming'); INSERT INTO Workout (WorkoutID, MemberID, WorkoutType) VALUES (5, 3, 'Running'); INSERT INTO Workout (WorkoutID, MemberID, WorkoutType) VALUES (6, 3, 'Cycling'); INSERT INTO Workout (WorkoutID, MemberID, WorkoutType) VALUES (7, 3, 'Swimming');<end_of_turn>\\n<start_of_turn>model\\nSELECT AVG(Age) FROM Members m INNER JOIN Workout w ON m.MemberID = w.MemberID WHERE w.WorkoutType IN ('Yoga', 'Swimming') GROUP BY m.MemberID;\\n\\nExplanation: This SQL query calculates the average age of members who have done 'Yoga' and 'Swimming' workouts by selecting the average value of the Age column from the Members table, but only for rows where Members.MemberID matches Workout.MemberID (meaning the member has done a workout), and WorkoutType is either 'Yoga' or 'Swimming'.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the total funding for space exploration by year?\\n\\nContext: CREATE TABLE exploration_funding (year INT, funding FLOAT); INSERT INTO exploration_funding (year, funding) VALUES (2015, 10000000), (2016, 12000000), (2017, 15000000), (2018, 18000000), (2019, 20000000), (2020, 22000000), (2021, 25000000);<end_of_turn>\\n<start_of_turn>model\\nSELECT year, SUM(funding) FROM exploration_funding GROUP BY year;\\n\\nExplanation: This SQL query calculates the total funding for space exploration by year by summing up the funding values for each year in the exploration_funding table. The query then groups the results by the year.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the total environmental impact score for each racial group, by mineral type, in 2020?\\n\\nContext: CREATE TABLE RacialImpact (race VARCHAR(50), year INT, mineral VARCHAR(50), score INT); INSERT INTO RacialImpact (race, year, mineral, score) VALUES ('African American', 2020, 'Gold', 90), ('Hispanic', 2020, 'Silver', 120), ('Asian', 2020, 'Iron', 150);<end_of_turn>\\n<start_of_turn>model\\nSELECT context.race, context.mineral, SUM(context.score) as total_score FROM context WHERE context.year = 2020 GROUP BY context.race, context.mineral;\\n\\nExplanation: This query groups the data by racial group and mineral type and sums the total environmental impact score for each racial group in 2020.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nHow many clients have made at least one investment in the past year?\\n\\nContext: CREATE TABLE clients (id INT, registered_date DATE);CREATE TABLE investments (id INT, client_id INT, investment_date DATE); INSERT INTO clients (id, registered_date) VALUES (1, '2020-01-01'), (2, '2019-01-01'), (3, '2018-01-01'); INSERT INTO investments (id, client_id, investment_date) VALUES (1, 1, '2021-02-01'), (2, 1, '2021-03-01'), (3, 2, '2020-04-01'), (4, 3, '2017-05-01');<end_of_turn>\\n<start_of_turn>model\\nSELECT COUNT(DISTINCT c.id) FROM clients c WHERE EXISTS (SELECT 1 FROM investments i WHERE c.id = i.client_id AND i.investment_date >= c.registered_date + INTERVAL '1 year');\\n\\nExplanation: The SQL query uses a correlated subquery to check if there is any investment made by a client after their registration date plus one year. It then counts the number of distinct clients that meet this condition.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the total amount of pesticides used for corn fields in the US?\\n\\nContext: CREATE TABLE Fields (id INT, country VARCHAR(255), crop_type VARCHAR(255)); CREATE TABLE Pesticide_Use (field_id INT, pesticide_amount INT); INSERT INTO Fields (id, country, crop_type) VALUES (1, 'US', 'Corn'), (2, 'Canada', 'Wheat'); INSERT INTO Pesticide_Use (field_id, pesticide_amount) VALUES (1, 100), (1, 200);<end_of_turn>\\n<start_of_turn>model\\nSELECT SUM(pu.pesticide_amount) FROM Pesticide_Use pu INNER JOIN Fields f ON pu.field_id = f.id WHERE f.crop_type = 'Corn' AND f.country = 'US';\\n\\nExplanation: This query calculates the total amount of pesticides used for corn fields in the US. It uses an INNER JOIN to combine data from the Fields and Pesticide_Use tables based on the field_id. The result is then filtered based on the crop_type and country, and the total pesticide amount is calculated.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nDelete the record of the employee with the highest salary in the Finance department from the EmployeeData table.\\n\\nContext: CREATE TABLE EmployeeData (EmployeeID INT PRIMARY KEY, FirstName VARCHAR(50), LastName VARCHAR(50), Department VARCHAR(50), Salary DECIMAL(10, 2)); INSERT INTO EmployeeData VALUES (1, 'John', 'Doe', 'IT', 50000); INSERT INTO EmployeeData VALUES (2, 'Jane', 'Doe', 'HR', 75000); INSERT INTO EmployeeData VALUES (3, 'Mike', 'Johnson', 'Finance', 90000);<end_of_turn>\\n<start_of_turn>model\\nDELETE FROM EmployeeData WHERE (EmployeeID, Salary) IN (SELECT EmployeeID, MAX(Salary) FROM EmployeeData WHERE Department = 'Finance' GROUP BY EmployeeID);\\n\\nExplanation: This query uses a subquery to find the EmployeeID and highest salary in the Finance department. It then deletes the corresponding record from the EmployeeData table.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nUpdate the environmental impact of 'Isopropyl Alcohol' to 3.0 in the environmental_impact_table\\n\\nContext: CREATE TABLE environmental_impact_table (record_id INT, chemical_id INT, environmental_impact_float);<end_of_turn>\\n<start_of_turn>model\\nUPDATE environmental_impact_table SET environmental_impact_float = 3.0 WHERE chemical_id = (SELECT chemical_id FROM chemical_table WHERE chemical_name = 'Isopropyl Alcohol');\\n\\nExplanation: This query updates the environmental_impact_float of 'Isopropyl Alcohol' to 3.0 in the environmental_impact_table using a subquery to obtain the chemical_id.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhich state had the highest concert revenue?\\n\\nContext: CREATE TABLE concerts (id INT, state VARCHAR(255), revenue FLOAT); INSERT INTO concerts (id, state, revenue) VALUES (1, 'California', 100000.0), (2, 'New York', 80000.0);<end_of_turn>\\n<start_of_turn>model\\nSELECT state, MAX(revenue) FROM concerts;\\n\\nExplanation: This SQL query identifies the state with the highest concert revenue by selecting the 'state' and the maximum value of the 'revenue' column from the 'concerts' table.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nCalculate the percentage of sales for each garment category in 2021.\\n\\nContext: CREATE TABLE sales (sale_id INT, product_category VARCHAR(255), sale_date DATE, revenue DECIMAL(10,2)); CREATE VIEW sales_by_category AS SELECT product_category, SUM(revenue) as total_revenue FROM sales WHERE sale_date BETWEEN '2021-01-01' AND '2021-12-31' GROUP BY product_category;<end_of_turn>\\n<start_of_turn>model\\nSELECT product_category, (SUM(sales.revenue) \/ (SELECT SUM(total_revenue) FROM sales_by_category)) * 100 as percentage_of_sales FROM sales JOIN sales_by_category ON sales.product_category = sales_by_category.product_category WHERE sales.sale_date BETWEEN '2021-01-01' AND '2021-12-31' GROUP BY product_category;\\n\\nExplanation: The SQL query calculates the percentage of sales for each garment category in 2021 by using a subquery to find the total revenue for all categories in the sales_by_category view, and then dividing the total revenue for each category by the total revenue for all categories. The result is multiplied by 100 to convert it to a percentage. The sales and sales_by_category tables are joined on the product_category column, and the WHERE clause filters the sales to only include those that occurred in 2021. The results are grouped by product category.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nFind the total number of accidents for each vehicle make where the number of accidents is greater than 50.\\n\\nContext: CREATE TABLE VehicleSafetyTesting (VehicleMake VARCHAR(255), AccidentCount INT); INSERT INTO VehicleSafetyTesting (VehicleMake, AccidentCount) VALUES ('Tesla', 45), ('Toyota', 30), ('Honda', 35), ('Volvo', 20);<end_of_turn>\\n<start_of_turn>model\\nSELECT VehicleMake, COUNT(*) as TotalAccidents FROM VehicleSafetyTesting GROUP BY VehicleMake HAVING TotalAccidents > 50;\\n\\nExplanation: 1. SELECT VehicleMake, COUNT(*): selects VehicleMake and the count of records for each VehicleMake. 2. FROM VehicleSafetyTesting: specifies the table to select from. 3. GROUP BY VehicleMake: groups the selected records by VehicleMake. 4. HAVING TotalAccidents > 50: filters groups with a TotalAccidents count greater than 50.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat are the top 5 players in the NHL based on career goals scored?\\n\\nContext: CREATE TABLE Players (PlayerID INT, PlayerName VARCHAR(50), Goals INT); INSERT INTO Players (PlayerID, PlayerName, Goals) VALUES (1, 'Gretzky', 894), (2, 'Lemieux', 690), (3, 'Howe', 786);<end_of_turn>\\n<start_of_turn>model\\nSELECT PlayerName, Goals FROM Players ORDER BY Goals DESC LIMIT 5\\n\\nExplanation: This query retrieves the PlayerName and Goals columns from the Players table, orders the results by the Goals column in descending order, and limits the output to the top 5 records.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the maximum Shariah-compliant finance asset value in the Gulf Cooperation Council (GCC) countries?\\n\\nContext: CREATE TABLE shariah_compliant_finance (id INT, country VARCHAR(255), asset_value DECIMAL(10,2));<end_of_turn>\\n<start_of_turn>model\\nSELECT MAX(asset_value) FROM shariah_compliant_finance WHERE country IN (SELECT country FROM (SELECT DISTINCT country FROM shariah_compliant_finance WHERE region = 'Gulf Cooperation Council') t);\\n\\nExplanation: This query finds all countries in the Gulf Cooperation Council using a subquery, and then uses another subquery with the IN operator to filter Shariah-compliant finance assets based on those countries and the asset value.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nDelete green building records for the state of California that have a certification level of 'Gold'.\\n\\nContext: CREATE TABLE green_buildings ( id INT PRIMARY KEY, building_name VARCHAR(255), state VARCHAR(255), certification_level VARCHAR(255) );<end_of_turn>\\n<start_of_turn>model\\nDELETE FROM green_buildings WHERE state = 'California' AND certification_level = 'Gold';\\n\\nExplanation: The SQL query deletes records from the green_buildings table where the state is 'California' and the certification_level is 'Gold'.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the average labor cost for construction projects in the 'construction_labor_stats' table for projects in 'Quebec'?\\n\\nContext: CREATE TABLE construction_labor_stats (province TEXT, project_id INT, labor_cost FLOAT); INSERT INTO construction_labor_stats (province, project_id, labor_cost) VALUES ('Quebec', 1, 11000), ('Quebec', 2, 13000), ('Quebec', 3, 15000);<end_of_turn>\\n<start_of_turn>model\\nSELECT AVG(labor_cost) FROM construction_labor_stats WHERE province = 'Quebec';\\n\\nExplanation: The SQL query calculates the average value of the 'labor_cost' column in the 'construction_labor_stats' table for projects in 'Quebec' using the AVG() function and the WHERE clause.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the number of members who have been members for more than 1 year?\\n\\nContext: CREATE TABLE gym_memberships (id INT, member_name VARCHAR(50), start_date DATE, end_date DATE, membership_type VARCHAR(50), price DECIMAL(5,2));<end_of_turn>\\n<start_of_turn>model\\nSELECT COUNT(DISTINCT member_name) AS long_term_members FROM gym_memberships WHERE DATEDIFF(CURDATE(), start_date) > 365;\\n\\nExplanation: This query calculates the number of members who have been members for more than 1 year by filtering the results to only include members with a start_date more than 365 days before the current date. It then counts the number of unique members.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nUpdate the room rates for hotels in Barcelona with an ID greater than 3.\\n\\nContext: CREATE TABLE hotel_rooms (hotel_id INT, city VARCHAR(50), room_rate DECIMAL(5,2)); INSERT INTO hotel_rooms (hotel_id, city, room_rate) VALUES (1, 'Barcelona', 100), (2, 'Barcelona', 120), (3, 'Barcelona', 150), (4, 'Madrid', 80);<end_of_turn>\\n<start_of_turn>model\\nUPDATE hotel_rooms SET room_rate = room_rate * 1.1 WHERE city = 'Barcelona' AND hotel_id > 3;\\n\\nExplanation: The query updates the room rates for hotels in Barcelona with an ID greater than 3 by increasing the room rate by 10% (represented as 1.1).<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the most popular multimodal transportation option in Tokyo?\\n\\nContext: CREATE TABLE multimodal (id INT, city VARCHAR(50), mode VARCHAR(50), users INT); INSERT INTO multimodal (id, city, mode, users) VALUES (1, 'Tokyo', 'Train', 5000000), (2, 'Tokyo', 'Bus', 3000000), (3, 'Tokyo', 'Bicycle', 1000000);<end_of_turn>\\n<start_of_turn>model\\nSELECT mode, MAX(users) FROM multimodal WHERE city = 'Tokyo';\\n\\nExplanation: The SQL query identifies the most popular multimodal transportation option in Tokyo based on user count.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat's the total amount of donations received by each country?\\n\\nContext: CREATE TABLE donations (id INT, donor_name VARCHAR(50), donation_amount DECIMAL(10,2), donation_date DATE, country_code CHAR(2));<end_of_turn>\\n<start_of_turn>model\\nSELECT country_code, SUM(donation_amount) FROM donations GROUP BY country_code;\\n\\nExplanation: The SQL query groups donations by country_code using the GROUP BY clause and calculates the sum of donation_amount for each group.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the average active years of artists from Japan who have exhibited at 'Artistic Wonders' gallery, excluding those with no display end date yet?\\n\\nContext: CREATE TABLE Artists (ArtistID INT, ArtistName VARCHAR(50), Nationality VARCHAR(50), ActiveYears INT, Gender VARCHAR(10));CREATE TABLE Paintings (PaintingID INT, PaintingName VARCHAR(50), ArtistID INT, DisplayStart DATE, DisplayEnd DATE);CREATE TABLE Gallery (GalleryID INT, GalleryName VARCHAR(50), City VARCHAR(50));INSERT INTO Artists VALUES (1, 'Claude Monet', 'French', 67, 'Male'); INSERT INTO Paintings VALUES (1, 'Water Lilies', 1, '2020-01-01', '2021-12-31'); INSERT INTO Gallery VALUES (1, 'Artistic Wonders', 'Paris');<end_of_turn>\\n<start_of_turn>model\\nSELECT AVG(ActiveYears) FROM Artists JOIN Paintings ON Artists.ArtistID = Paintings.ArtistID WHERE GalleryID IN (SELECT GalleryID FROM Gallery WHERE GalleryName = 'Artistic Wonders') AND Nationality = 'Japan' AND DisplayEnd IS NOT NULL;\\n\\nExplanation: This SQL query calculates the average active years of artists from Japan who have exhibited at 'Artistic Wonders' gallery, excluding those with no display end date yet. It first joins the Artists and Paintings tables based on the ArtistID. Then, it filters the records to only include paintings from the 'Artistic Wonders' gallery and artists from Japan with a DisplayEnd date. After that, it calculates the average active years for those artists.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the maximum and minimum response time for police departments in urban areas with a population between 250,000 and 500,000?\\n\\nContext: CREATE TABLE police_departments (id INT, department_name VARCHAR(50), location VARCHAR(50), population INT, average_response_time FLOAT);<end_of_turn>\\n<start_of_turn>model\\nSELECT department_name, MAX(average_response_time) FROM police_departments WHERE population BETWEEN 250000 AND 500000 AND location = 'urban' GROUP BY department_name UNION ALL SELECT department_name, MIN(average_response_time) FROM police_departments WHERE population BETWEEN 250000 AND 500000 AND location = 'urban' GROUP BY department_name;\\n\\nExplanation: The SQL query first calculates the maximum response time for police departments in urban areas with a population between 250,000 and 500,000 using the MAX function and the GROUP BY clause, then calculates the minimum response time using the MIN function and the GROUP BY clause. The UNION ALL operator is used to combine the two result sets into one.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat are the names and locations of all excavation sites that have yielded bronze age artifacts?\\n\\nContext: CREATE TABLE ExcavationSites (SiteID int, SiteName varchar(50), Location varchar(50)); CREATE TABLE Artifacts (ArtifactID int, SiteID int, Age varchar(20), Description varchar(100));<end_of_turn>\\n<start_of_turn>model\\nSELECT ExcavationSites.SiteName, ExcavationSites.Location FROM ExcavationSites INNER JOIN Artifacts ON ExcavationSites.SiteID = Artifacts.SiteID WHERE Artifacts.Age = 'Bronze Age';\\n\\nExplanation: This query first joins the ExcavationSites and Artifacts tables on the SiteID field. It then filters the results to only include rows where the Age field in the Artifacts table is 'Bronze Age'. Finally, it selects the SiteName and Location fields from the ExcavationSites table.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the average revenue from concert ticket sales in the last year?\\n\\nContext: CREATE TABLE Concerts (ConcertID INT, ConcertName VARCHAR(100), Country VARCHAR(50), Year INT, Revenue INT); INSERT INTO Concerts VALUES (1, 'Concert1', 'France', 2020, 10000); INSERT INTO Concerts VALUES (2, 'Concert2', 'Germany', 2021, 15000); INSERT INTO Concerts VALUES (3, 'Concert3', 'Spain', 2019, 12000);<end_of_turn>\\n<start_of_turn>model\\nSELECT AVG(Revenue) FROM Concerts WHERE Year = 2021;\\n\\nExplanation: This query calculates the average revenue from concert ticket sales in the last year by filtering the Concerts table for concerts held in the last year using the WHERE clause, and then using the AVG function to calculate the average revenue from those concerts.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nHow many new employees were hired in Q2 of 2021?\\n\\nContext: CREATE TABLE hiring (id INT, hire_date DATE); INSERT INTO hiring (id, hire_date) VALUES (1, '2021-04-01'), (2, '2021-05-15'), (3, '2021-07-01');<end_of_turn>\\n<start_of_turn>model\\nSELECT COUNT(*) FROM hiring WHERE hire_date BETWEEN '2021-04-01' AND '2021-06-30';\\n\\nExplanation: _This SQL query counts the number of new employees hired in Q2 of 2021 by using the COUNT function on all rows (*), and filtering for rows with hire dates between April 1 and June 30, 2021._<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nList the top 3 cities with the longest average emergency response time\\n\\nContext: CREATE TABLE emergency_calls (id INT, city VARCHAR(20), response_time INT); INSERT INTO emergency_calls (id, city, response_time) VALUES (1, 'San Francisco', 120), (2, 'New York', 150), (3, 'Los Angeles', 100);<end_of_turn>\\n<start_of_turn>model\\nSELECT city, AVG(response_time) as avg_response_time FROM emergency_calls GROUP BY city ORDER BY avg_response_time DESC LIMIT 3;\\n\\nExplanation: * This query lists the top 3 cities with the longest average emergency response time by using the GROUP BY clause to group the data by city and the AVG function to calculate the average response time for each city. The ORDER BY clause is used to sort the results in descending order and the LIMIT clause is used to limit the results to the top 3 cities.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat was the minimum number of public schools in the North region in 2022?\\n\\nContext: CREATE TABLE Schools (year INT, region VARCHAR(255), count INT); INSERT INTO Schools (year, region, count) VALUES (2022, 'North', 100), (2022, 'North', 105), (2022, 'North', 110), (2022, 'North', 115);<end_of_turn>\\n<start_of_turn>model\\nSELECT MIN(count) FROM Schools WHERE year = 2022 AND region = 'North';\\n\\nExplanation: This query calculates the minimum number of public schools in the North region in 2022 by finding the minimum 'count' column where the 'year' is 2022 and 'region' is 'North'.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the average salary of workers in the 'renewable energy' industry, grouped by their ethnicity, in factories that have implemented ethical manufacturing practices?\\n\\nContext: CREATE TABLE Factories (id INT, factory_name VARCHAR(50), ethical_manufacturing BOOLEAN); INSERT INTO Factories (id, factory_name, ethical_manufacturing) VALUES (1, 'Ethical Factory A', TRUE); INSERT INTO Factories (id, factory_name, ethical_manufacturing) VALUES (2, 'Unethical Factory B', FALSE); CREATE TABLE Workers (id INT, factory_id INT, name VARCHAR(50), salary FLOAT, ethnicity VARCHAR(50), industry VARCHAR(50)); INSERT INTO Workers (id, factory_id, name, salary, ethnicity, industry) VALUES (1, 1, 'John Doe', 50000, 'Hispanic', 'renewable energy'); INSERT INTO Workers (id, factory_id, name, salary, ethnicity, industry) VALUES (2, 1, 'Jane Smith', 55000, 'African American', 'renewable energy'); INSERT INTO Workers (id, factory_id, name, salary, ethnicity, industry) VALUES (3, 2, 'Mike Johnson', 60000, 'Caucasian', 'renewable energy'); INSERT INTO Workers (id, factory_id, name, salary, ethnicity, industry) VALUES (4, 2, 'Emily Brown', 65000, 'Asian', 'renewable energy');<end_of_turn>\\n<start_of_turn>model\\nSELECT Workers.ethnicity, AVG(Workers.salary) FROM Workers INNER JOIN Factories ON Workers.factory_id = Factories.id WHERE Workers.industry = 'renewable energy' AND Factories.ethical_manufacturing = TRUE GROUP BY Workers.ethnicity;\\n\\nExplanation: 1. Joins the 'Factories' and 'Workers' tables based on their 'factory_id' column.   2. Filters the records where the 'industry' column in the 'Workers' table is 'renewable energy' and the 'ethical_manufacturing' column in the 'Factories' table is 'TRUE'.   3. Groups the records by the 'ethnicity' column in the 'Workers' table.   4. Calculates the average salary for each group using the 'AVG' aggregate function.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nUpdate the age of the patient with ID 1 to 35 in the 'patients' table.\\n\\nContext: CREATE TABLE patients (patient_id INT PRIMARY KEY AUTO_INCREMENT, first_name VARCHAR(50), last_name VARCHAR(50), age INT, gender VARCHAR(10), ethnicity VARCHAR(50));<end_of_turn>\\n<start_of_turn>model\\nUPDATE patients SET age = 35 WHERE patient_id = 1;\\n\\nExplanation: This query updates the age of the patient with ID 1 to 35 in the 'patients' table.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nShow the total number of players and the number of players who have played VR games.\\n\\nContext: CREATE TABLE players (id INT, name VARCHAR(50), age INT, country VARCHAR(50)); INSERT INTO players (id, name, age, country) VALUES (1, 'John Doe', 25, 'USA'), (2, 'Jane Smith', 30, 'Canada'), (3, 'Bob Brown', 35, 'UK'); CREATE TABLE player_games (player_id INT, game_id INT, game_type VARCHAR(50)); INSERT INTO player_games (player_id, game_id, game_type) VALUES (1, 1, 'VR'), (1, 2, 'Non-VR'), (2, 1, 'VR'), (3, 3, 'Non-VR');<end_of_turn>\\n<start_of_turn>model\\nSELECT COUNT(*) AS total_players, SUM(CASE WHEN game_type = 'VR' THEN 1 ELSE 0 END) AS vr_players FROM player_games;\\n\\nExplanation: We use the COUNT() function to count the total number of players and the SUM() function with a CASE statement to count the number of players who have played VR games. The CASE statement checks whether the game_type is 'VR' and returns 1 if true and 0 otherwise. Finally, we use the AS keyword to label the columns.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the average distance from rural healthcare facilities to the nearest urban center in South Africa and Kenya?\\n\\nContext: CREATE TABLE facilities (name TEXT, location TEXT, distance INTEGER); INSERT INTO facilities (name, location, distance) VALUES ('Facility X', 'Rural South Africa', 100), ('Facility Y', 'Rural Kenya', 80);<end_of_turn>\\n<start_of_turn>model\\nSELECT AVG(distance) FROM facilities WHERE location LIKE 'Rural%';\\n\\nExplanation: This query calculates the average distance from rural healthcare facilities to the nearest urban center in South Africa and Kenya by selecting the average distance from the facilities table where the location starts with 'Rural'. The LIKE operator is used to match the pattern 'Rural%' which represents any string that starts with 'Rural'.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nCalculate the average CO2 emission level for vessels in the 'Atlantic' fleet, per month.\\n\\nContext: CREATE TABLE vessels (vessel_id INT, fleet VARCHAR(50), CO2_emission_level FLOAT); CREATE TABLE handling (handling_id INT, vessel_id INT, handling_date DATE);<end_of_turn>\\n<start_of_turn>model\\nSELECT AVG(v.CO2_emission_level) AS avg_CO2_emission, YEAR(h.handling_date) AS handling_year, MONTH(h.handling_date) AS handling_month FROM vessels v JOIN handling h ON v.vessel_id = h.vessel_id WHERE v.fleet = 'Atlantic' GROUP BY YEAR(h.handling_date), MONTH(h.handling_date);\\n\\nExplanation: The SQL query joins the 'vessels' and 'handling' tables, filters the results based on the fleet, groups the results by handling_year and handling_month, and returns the average CO2_emission_level for each group.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhich community health workers have a cultural competency score below 80?\\n\\nContext: CREATE TABLE community_health_workers (worker_id INT, name VARCHAR(50), culture VARCHAR(50), score INT); INSERT INTO community_health_workers (worker_id, name, culture, score) VALUES (1, 'Jane Doe', 'Hispanic', 78), (2, 'Michael Smith', 'African American', 85), (3, 'Alice Johnson', 'Asian', 90);<end_of_turn>\\n<start_of_turn>model\\nSELECT * FROM community_health_workers WHERE score < 80;\\n\\nExplanation: This query retrieves the records of community health workers with a cultural competency score below 80. It filters the data based on the score column.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat was the average citizen satisfaction score for 'ServiceB' in 'RegionC' in Q2 of 2021?\\n\\nContext: CREATE TABLE Satisfaction (Service VARCHAR(20), Region VARCHAR(20), Quarter INT, Year INT, Score INT); INSERT INTO Satisfaction (Service, Region, Quarter, Year, Score) VALUES ('ServiceB', 'RegionC', 2, 2021, 85);<end_of_turn>\\n<start_of_turn>model\\nSELECT AVG(Score) FROM Satisfaction WHERE Service = 'ServiceB' AND Region = 'RegionC' AND Quarter = 2 AND Year = 2021;\\n\\nExplanation: The SQL query calculates the average citizen satisfaction score for 'ServiceB' in 'RegionC' in Q2 of 2021 by averaging the 'Score' column where the 'Service' is 'ServiceB', 'Region' is 'RegionC', 'Quarter' is 2, and 'Year' is 2021.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nList all bridges with their respective inspection dates.\\n\\nContext: CREATE TABLE Bridges (id INT, name VARCHAR(50), inspection_date DATE); INSERT INTO Bridges (id, name, inspection_date) VALUES (1, 'Golden Gate', '2020-05-01'), (2, 'Brooklyn', '2019-12-20');<end_of_turn>\\n<start_of_turn>model\\nSELECT * FROM Bridges;\\n\\nExplanation: This query retrieves all columns (name and inspection_date) from the 'Bridges' table.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the total biomass of each species in the Arctic Ocean by year?\\n\\nContext: CREATE TABLE ArcticOceanBiomassYearly(year INT, species VARCHAR(50), biomass FLOAT);INSERT INTO ArcticOceanBiomassYearly(year, species, biomass) VALUES(2018, 'Polar Bear', 550.0), (2019, 'Seal', 210.0), (2020, 'Walrus', 1050.0), (2018, 'Polar Bear', 600.0), (2019, 'Seal', 220.0);<end_of_turn>\\n<start_of_turn>model\\nSELECT species, year, SUM(biomass) FROM ArcticOceanBiomassYearly GROUP BY species, year;\\n\\nExplanation: The SQL query calculates the total biomass of each species in the Arctic Ocean by year. It groups the records by the species and year columns and then calculates the sum of the biomass for each group.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nHow many research grants have been awarded to each department in the past year?\\n\\nContext: CREATE TABLE grants (grant_id INT, faculty_id INT, amount FLOAT, grant_date DATE);<end_of_turn>\\n<start_of_turn>model\\nSELECT department, COUNT(grant_id) FROM grants JOIN faculty ON grants.faculty_id = faculty.faculty_id WHERE grant_date >= DATEADD(year, -1, GETDATE()) GROUP BY department;\\n\\nExplanation: This query counts the number of research grants awarded to each department in the past year by joining the grants and faculty tables on the faculty_id column. It then filters the results by the grant_date column in the grants table, grouping the results by the department column in the faculty table. It finally calculates the number of grants for each department.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the percentage of students with mobility impairments who received accommodations in the Arctic region in 2023?\\n\\nContext: CREATE TABLE Students (StudentID INT, DisabilityType VARCHAR(50), Region VARCHAR(50), AccommodationYear INT); INSERT INTO Students (StudentID, DisabilityType, Region, AccommodationYear) VALUES (1, 'Mobility Impairment', 'Arctic', 2023), (2, 'Visual Impairment', 'Arctic', 2023), (3, 'Hearing Impairment', 'Arctic', 2023);<end_of_turn>\\n<start_of_turn>model\\nSELECT (COUNT(StudentID) * 100.0 \/ (SELECT COUNT(StudentID) FROM Students WHERE Region = 'Arctic' AND AccommodationYear = 2023)) FROM Students WHERE DisabilityType = 'Mobility Impairment' AND Region = 'Arctic' AND AccommodationYear = 2023;\\n\\nExplanation: The SQL query calculates the percentage of students with mobility impairments who received accommodations in the Arctic region in 2023. It calculates the count of students with mobility impairments and divides it by the total number of students in the Arctic region in 2023, multiplying by 100.0 to convert it to a percentage.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat are the explainable AI techniques used in creative AI applications, grouped by technique?\\n\\nContext: CREATE TABLE ai_techniques (application VARCHAR(255), technique VARCHAR(255)); INSERT INTO ai_techniques (application, technique) VALUES ('CreativeApp1', 'ExplainableTech1'); INSERT INTO ai_techniques (application, technique) VALUES ('CreativeApp2', 'ExplainableTech2');<end_of_turn>\\n<start_of_turn>model\\nSELECT technique, COUNT(*) as num_applications FROM ai_techniques WHERE application LIKE '%Creative%' GROUP BY technique ORDER BY num_applications DESC;\\n\\nExplanation: The SQL query selects the technique and counts the number of applications from the ai_techniques table, filters the rows where the application contains the word 'Creative', groups the result by technique, and orders the result by the number of applications in descending order.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the average cost of military equipment in the African region?\\n\\nContext: CREATE TABLE MilitaryEquipment (EquipmentID INT, EquipmentName VARCHAR(100), EquipmentCost FLOAT, ManufacturingCountry VARCHAR(50)); INSERT INTO MilitaryEquipment (EquipmentID, EquipmentName, EquipmentCost, ManufacturingCountry) VALUES (1, 'Tank', 5000000, 'USA'), (2, 'Fighter Jet', 10000000, 'Russia'), (3, 'Artillery', 2000000, 'China');<end_of_turn>\\n<start_of_turn>model\\nSELECT AVG(EquipmentCost) FROM MilitaryEquipment WHERE ManufacturingCountry IN ('Africa');\\n\\nExplanation: This SQL query calculates the average cost of military equipment by filtering the equipment manufactured in Africa.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat's the average age of children in the refugees table?\\n\\nContext: CREATE TABLE refugees (id INT, name VARCHAR(50), age INT, gender VARCHAR(10), nationality VARCHAR(50)); INSERT INTO refugees (id, name, age, gender, nationality) VALUES (1, 'Ahmed', 12, 'Male', 'Syrian'); INSERT INTO refugees (id, name, age, gender, nationality) VALUES (2, 'Fatima', 15, 'Female', 'Afghan');<end_of_turn>\\n<start_of_turn>model\\nSELECT AVG(age) FROM refugees WHERE gender = 'Female';\\n\\nExplanation: This query calculates the average age of children in the refugees table by finding the average of the age column values where gender is 'Female'.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nIdentify the total number of claims processed in the month of January across all policy types\\n\\nContext: CREATE TABLE claims (claim_id INT, claim_date DATE, policy_type VARCHAR(20));<end_of_turn>\\n<start_of_turn>model\\nSELECT COUNT(*) FROM claims WHERE MONTH(claim_date) = 1;\\n\\nExplanation: This query calculates the total number of claims from the 'claims' table for all policy types in the month of January by filtering the 'claim_date' column using the MONTH() function and then calculating the count of all records in the table.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the total carbon emissions and energy consumption for each smart city by month?\\n\\nContext: CREATE TABLE city_data (id INT, city VARCHAR(255), type VARCHAR(255), value FLOAT, timestamp TIMESTAMP); INSERT INTO city_data (id, city, type, value, timestamp) VALUES (1, 'EcoCity', 'Carbon Emissions', 15000, '2022-04-01 10:00:00'), (2, 'EcoCity', 'Energy Consumption', 1000000, '2022-04-01 10:00:00');<end_of_turn>\\n<start_of_turn>model\\nSELECT city, type, SUM(value) as total, DATE_FORMAT(timestamp, '%%Y-%%m') as month FROM city_data GROUP BY city, type, month;\\n\\nExplanation: This query summarizes the total carbon emissions and energy consumption for each city by month.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the average data usage for each mobile plan in the past week?\\n\\nContext: CREATE TABLE mobile_plans (plan_id INT, plan_name VARCHAR(255)); CREATE TABLE subscriptions (subscription_id INT, subscriber_id INT, plan_id INT, subscription_date DATE, data_usage INT);<end_of_turn>\\n<start_of_turn>model\\nSELECT plan_name, AVG(data_usage) as avg_data_usage FROM mobile_plans JOIN subscriptions ON mobile_plans.plan_id = subscriptions.plan_id WHERE subscriptions.subscription_date >= DATE_SUB(CURDATE(), INTERVAL 1 WEEK) GROUP BY plan_name;\\n\\nExplanation: This query joins the mobile_plans table with the subscriptions table based on the plan_id. It then filters the records to only include those from the past week by checking the subscription_date. Finally, it groups the results by plan_name and calculates the average data usage for each plan.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nList the top 3 brands with the highest average cruelty-free product price.\\n\\nContext: CREATE TABLE prices (id INT, brand VARCHAR(255), is_cruelty_free BOOLEAN, price DECIMAL(10, 2)); INSERT INTO prices (id, brand, is_cruelty_free, price) VALUES (1, 'Lush', true, 25.99), (2, 'NYX', false, 12.99), (3, 'Lush', true, 34.99), (4, 'Burt’s Bees', true, 15.99), (5, 'Tarte', true, 28.99), (6, 'Urban Decay', false, 21.99);<end_of_turn>\\n<start_of_turn>model\\nSELECT brand, AVG(price) FROM prices WHERE is_cruelty_free = true GROUP BY brand ORDER BY AVG(price) DESC LIMIT 3;\\n\\nExplanation: This query filters the prices table for cruelty-free products, calculates the average price for each brand, and groups them. It orders the results by average price in descending order and limits the results to the top 3.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhich authors have published more than 5 articles, ordered by their names?\\n\\nContext: CREATE TABLE authors (id INT, name VARCHAR(50), gender VARCHAR(10)); INSERT INTO authors (id, name, gender) VALUES (1, 'Juana Doe', 'Female'), (2, 'José Smith', 'Male'); CREATE TABLE articles (id INT, author_id INT, title VARCHAR(100), content TEXT); INSERT INTO articles (id, author_id, title, content) VALUES (1, 1, 'Artículo 1', 'Contenido 1'), (2, 1, 'Article 2', 'Content 2'), (3, 1, 'Article 3', 'Content 3'), (4, 1, 'Article 4', 'Content 4'), (5, 1, 'Article 5', 'Content 5'), (6, 2, 'Article 6', 'Content 6');<end_of_turn>\\n<start_of_turn>model\\nSELECT a.name FROM authors a JOIN articles ar ON a.id = ar.author_id GROUP BY a.name HAVING COUNT(ar.id) > 5 ORDER BY a.name;\\n\\nExplanation: This query joins the authors and articles tables on the author_id column, then groups the results by the name column from the authors table. The HAVING clause is used to filter the results to only include authors who have published more than 5 articles. The results are ordered by the name column from the authors table.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nCalculate the percentage of factories in each country that have produced sustainable materials in the past year.\\n\\nContext: CREATE TABLE Factories (FactoryID INT, Company VARCHAR(50), Location VARCHAR(50)); CREATE TABLE Production (ProductionID INT, FactoryID INT, Material VARCHAR(50), Quantity INT, ProductionDate DATE); INSERT INTO Factories VALUES (1,'Green Enterprises','Country A'),(2,'Green Enterprises','Country B'),(3,'Another Company','Country C'),(4,'Yet Another Company','Country A'); INSERT INTO Production VALUES (1,1,'Eco-Friendly Material',100,'2022-01-01'),(2,1,'Eco-Friendly Material',150,'2022-02-01'),(3,2,'Eco-Friendly Material',200,'2022-03-01'),(4,3,'Regular Material',50,'2022-04-01'),(5,4,'Eco-Friendly Material',75,'2021-05-01');<end_of_turn>\\n<start_of_turn>model\\nSELECT f.Location, COUNT(DISTINCT f.FactoryID) * 100.0 \/ (SELECT COUNT(DISTINCT FactoryID) FROM Factories) AS Percentage FROM Factories f JOIN Production p ON f.FactoryID = p.FactoryID WHERE p.ProductionDate >= DATEADD(year, -1, GETDATE()) AND Material IN ('Eco-Friendly Material', 'Sustainable Material') GROUP BY f.Location;\\n\\nExplanation: The SQL query performs a join between Factories and Production tables based on FactoryID and filters the records where the ProductionDate is within the past year and Material is either 'Eco-Friendly Material' or 'Sustainable Material'. It then calculates the percentage of factories in each country that have produced sustainable materials by dividing the count of distinct factories in each country by the total count of distinct factories.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the total waste generation in kg for the waste management company's own operations in the year 2020?\\n\\nContext: CREATE TABLE company_waste(waste_type VARCHAR(255), year INT, amount FLOAT); INSERT INTO company_waste(waste_type, year, amount) VALUES('CompanyA', 2020, 123.45), ('CompanyB', 2020, 678.90);<end_of_turn>\\n<start_of_turn>model\\nSELECT SUM(amount) FROM company_waste WHERE waste_type = 'CompanyA' AND year = 2020;\\n\\nExplanation: The SQL query calculates the total waste generation in kg for the waste management company's own operations in the year 2020 by summing the 'amount' column for each 'waste_type' where the 'waste_type' is 'CompanyA' and the 'year' is 2020.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the highest scored game for each team in the NBA?\\n\\nContext: CREATE TABLE teams (team_id INT, team_name VARCHAR(50)); CREATE TABLE games (game_id INT, home_team_id INT, away_team_id INT, home_team_score INT, away_team_score INT);<end_of_turn>\\n<start_of_turn>model\\nSELECT home_team_id, MAX(home_team_score) AS high_score FROM games GROUP BY home_team_id; SELECT away_team_id, MAX(away_team_score) AS high_score FROM games GROUP BY away_team_id;\\n\\nExplanation: The SQL query first calculates the maximum score for each home team and then for each away team.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nHow many cases were dismissed in each court location in California in the last 3 years?\\n\\nContext: CREATE TABLE cases (case_id INT, dismissed BOOLEAN, dismissal_date DATE, court_location VARCHAR(50)); INSERT INTO cases (case_id, dismissed, dismissal_date, court_location) VALUES (1, true, '2020-01-01', 'Los Angeles'), (2, false, '2020-02-01', 'San Francisco'), (3, true, '2019-03-01', 'Los Angeles');<end_of_turn>\\n<start_of_turn>model\\nSELECT court_location, COUNT(*) FILTER (WHERE dismissed) AS dismissed_cases FROM cases WHERE dismissal_date >= NOW() - INTERVAL '3 years' GROUP BY court_location;\\n\\nExplanation: This query calculates the number of dismissed cases in each court location in California in the last 3 years using the COUNT function with a filter for dismissed cases. The WHERE clause is used to filter for cases dismissed in the last 3 years.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the average monthly data usage for customers in the city of Los Angeles who have been active for more than 3 months?\\n\\nContext: CREATE TABLE customer_activity (customer_id INT, start_date DATE, end_date DATE); CREATE TABLE customers (customer_id INT, data_usage FLOAT);<end_of_turn>\\n<start_of_turn>model\\nSELECT AVG(data_usage) FROM customers INNER JOIN customer_activity ON customers.customer_id = customer_activity.customer_id WHERE customers.data_usage IS NOT NULL AND customer_activity.start_date <= CURDATE() - INTERVAL 3 MONTH AND (customer_activity.end_date IS NULL OR customer_activity.end_date >= CURDATE() - INTERVAL 3 MONTH) AND customer_activity.city = 'Los Angeles';\\n\\nExplanation: This query selects the average monthly data usage for customers in Los Angeles who have been active for more than 3 months. It uses a join to combine the customer_activity and customers tables on the customer_id field. It then filters the results to only include customers who have a data usage value and have been active for more than 3 months. The start_date and end_date are used to determine the customer's activity period and the city is limited to Los Angeles to further filter the results.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the total budget of departments that have implemented open data initiatives and have created more than 5 evidence-based policies?\\n\\nContext: CREATE TABLE departments (id INT, name VARCHAR(50), budget INT, open_data BOOLEAN); INSERT INTO departments (id, name, budget, open_data) VALUES (1, 'Education', 15000000, true), (2, 'Transportation', 20000000, true); CREATE TABLE policies (id INT, department_id INT, title VARCHAR(50), evidence_based BOOLEAN); INSERT INTO policies (id, department_id, title, evidence_based) VALUES (1, 1, 'Safe Routes to School', true), (2, 2, 'Mass Transit Expansion', true), (3, 2, 'Bike Lane Expansion', true);<end_of_turn>\\n<start_of_turn>model\\nSELECT SUM(budget) as total_budget FROM departments d WHERE open_data = true AND (SELECT COUNT(*) FROM policies p WHERE d.id = p.department_id AND evidence_based = true) > 5;\\n\\nExplanation: We apply the WHERE clause to filter for departments that have implemented open data initiatives and have created more than 5 evidence-based policies, then use the SUM aggregation function to find the total budget of departments that have implemented open data initiatives and have created more than 5 evidence-based policies.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the total amount of climate finance spent on renewable energy sources in South America and North America?\\n\\nContext: CREATE TABLE renewable_energy (country VARCHAR(50), source VARCHAR(50), amount NUMERIC(12,2)); INSERT INTO renewable_energy (country, source, amount) VALUES ('Argentina', 'Wind', 500.50), ('Argentina', 'Solar', 700.20), ('Brazil', 'Wind', 800.00), ('Brazil', 'Solar', 1000.00), ('Canada', 'Wind', 1200.00), ('Canada', 'Solar', 1500.00), ('USA', 'Wind', 1800.00), ('USA', 'Solar', 2000.00);<end_of_turn>\\n<start_of_turn>model\\nSELECT SUM(amount) FROM renewable_energy WHERE country IN ('South America', 'North America') AND source IN ('Wind', 'Solar');\\n\\nExplanation: First, we filter the data to only include South America and North America countries and renewable energy sources (Wind and Solar). Then, we calculate the total amount spent on these energy sources by summing the 'amount' column.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nDelete the record of the supplier 'ABC Corp' from the 'Suppliers' table.\\n\\nContext: CREATE TABLE Suppliers (supplier_id INT, supplier_name VARCHAR(20), contact_name VARCHAR(20), contact_phone VARCHAR(15), last_supply DATE);<end_of_turn>\\n<start_of_turn>model\\nDELETE FROM Suppliers WHERE supplier_name = 'ABC Corp';\\n\\nExplanation: The query deletes the record of the supplier 'ABC Corp' from the 'Suppliers' table.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the total installed capacity (in MW) of renewable energy projects for each country, grouped by energy type?\\n\\nContext: CREATE TABLE project (id INT, country VARCHAR(50), energy_type VARCHAR(50), capacity INT); INSERT INTO project VALUES (1, 'USA', 'Wind', 200), (2, 'Canada', 'Solar', 150), (3, 'Mexico', 'Hydro', 250);<end_of_turn>\\n<start_of_turn>model\\nSELECT energy_type, country, SUM(capacity) FROM project GROUP BY energy_type, country;\\n\\nExplanation: This SQL query calculates the total installed capacity (in MW) of renewable energy projects for each country, grouped by energy type. It uses the GROUP BY clause to group the data by energy_type and country, and the SUM function to calculate the total capacity for each group.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the total installed capacity of wind power projects in the 'renewables' schema, grouped by country?\\n\\nContext: CREATE SCHEMA if not exists renewables; Use renewables; CREATE TABLE if not exists wind_projects (project_id INT, country VARCHAR(50), installed_capacity INT); INSERT INTO wind_projects (project_id, country, installed_capacity) VALUES (1, 'Germany', 20000), (2, 'Spain', 15000), (3, 'France', 25000);<end_of_turn>\\n<start_of_turn>model\\nSELECT country, SUM(installed_capacity) FROM wind_projects GROUP BY country;\\n\\nExplanation: The SQL query calculates the total installed capacity of wind power projects for each country in the 'renewables' schema by grouping the 'country' column and summing the 'installed_capacity' column values.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhich indigenous food systems have the highest and lowest total funding?\\n\\nContext: CREATE TABLE indigenous_food_systems (id INT, name TEXT, total_funding FLOAT); INSERT INTO indigenous_food_systems (id, name, total_funding) VALUES (1, 'System 1', 20000.0), (2, 'System 2', 30000.0), (3, 'System 3', 15000.0);<end_of_turn>\\n<start_of_turn>model\\nSELECT name, total_funding FROM (SELECT name, total_funding, ROW_NUMBER() OVER (ORDER BY total_funding DESC) as rank FROM indigenous_food_systems) as ranked_systems WHERE rank = 1 OR rank = (SELECT COUNT(*) FROM indigenous_food_systems) ORDER BY total_funding;\\n\\nExplanation: This query identifies the indigenous food systems with the highest and lowest total funding by using the ROW_NUMBER function and the OR operator to filter the systems with the highest and lowest total funding. It also uses a subquery to calculate the number of systems and order them by total funding.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the average altitude of French satellites in the 'Earth Observation' constellation?\\n\\nContext: CREATE TABLE Satellites (satellite_id INT, name VARCHAR(255), country VARCHAR(255), altitude FLOAT, constellation VARCHAR(255)); INSERT INTO Satellites (satellite_id, name, country, altitude, constellation) VALUES (1, 'Pléiades 1A', 'France', 694, 'Earth Observation'), (2, 'Pléiades 1B', 'France', 694, 'Earth Observation'), (3, 'CSO-1', 'France', 800, 'Earth Observation');<end_of_turn>\\n<start_of_turn>model\\nSELECT AVG(altitude) FROM Satellites WHERE constellation = 'Earth Observation' AND country = 'France';\\n\\nExplanation: This query calculates the average altitude of French satellites in the 'Earth Observation' constellation by selecting the average value of the 'altitude' column where 'constellation' is 'Earth Observation' and 'country' is 'France'.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the minimum yield of 'rice' in 'region2'?\\n\\nContext: CREATE TABLE farm (id INT, region VARCHAR(20), crop VARCHAR(20), yield INT); INSERT INTO farm (id, region, crop, yield) VALUES (1, 'region2', 'rice', 40), (2, 'region2', 'corn', 60);<end_of_turn>\\n<start_of_turn>model\\nSELECT MIN(yield) FROM farm WHERE region = 'region2' AND crop = 'rice';\\n\\nExplanation: The SQL query finds the minimum yield of rice in region2 by selecting all records with crop 'rice' and region 'region2' and computing the minimum yield.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhich country has the most freight forwarding requests in the month of June 2022?\\n\\nContext: CREATE TABLE freight_forwarding (request_id INT, warehouse_id INT, request_date DATE); INSERT INTO freight_forwarding (request_id, warehouse_id, request_date) VALUES (1, 1, '2022-06-01'), (2, 2, '2022-06-15'), (3, 3, '2022-07-01'); CREATE TABLE warehouse_geo (warehouse_id INT, country VARCHAR(20)); INSERT INTO warehouse_geo (warehouse_id, country) VALUES (1, 'USA'), (2, 'Canada'), (3, 'Mexico');<end_of_turn>\\n<start_of_turn>model\\nSELECT country, COUNT(*) AS request_count FROM freight_forwarding JOIN warehouse_geo ON freight_forwarding.warehouse_id = warehouse_geo.warehouse_id WHERE request_date BETWEEN '2022-06-01' AND '2022-06-30' GROUP BY country ORDER BY request_count DESC LIMIT 1;\\n\\nExplanation: This SQL query determines the country with the most freight forwarding requests in June 2022 by joining the freight_forwarding and warehouse_geo tables, filtering for requests in June 2022, grouping by country, ordering by request count in descending order, and selecting the top result.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nFind the number of successful clinical trials for each country in Africa.\\n\\nContext: CREATE TABLE clinical_trials3 (trial_id INT, country TEXT, success BOOLEAN); INSERT INTO clinical_trials3 (trial_id, country, success) VALUES (1, 'Kenya', TRUE), (2, 'Nigeria', FALSE), (3, 'South Africa', TRUE);<end_of_turn>\\n<start_of_turn>model\\nSELECT country, COUNT(*) as successful_trials FROM clinical_trials3 WHERE success = TRUE AND country IN ('Kenya', 'Nigeria', 'South Africa') GROUP BY country;\\n\\nExplanation: This query calculates the number of successful clinical trials for each country in Africa. It uses the COUNT() function to count the successful trials and filters the results for African countries. It also groups the results by country.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nList all unique donor_id and their total donation amounts for organizations located in 'California' and 'Texas'\\n\\nContext: CREATE TABLE Organizations (org_id INT, org_name TEXT, org_location TEXT); CREATE TABLE Donors (donor_id INT, donor_name TEXT, org_id INT, donation_amount DECIMAL(10,2));<end_of_turn>\\n<start_of_turn>model\\nSELECT D.donor_id, SUM(D.donation_amount) as total_donations FROM Donors D INNER JOIN Organizations O ON D.org_id = O.org_id WHERE O.org_location IN ('California', 'Texas') GROUP BY D.donor_id;\\n\\nExplanation: This query calculates the total donation amounts for each unique donor_id who has donated to organizations located in 'California' and 'Texas'. It uses an inner join to combine records from the Donors table and the Organizations table where there is a match on org_id. The WHERE clause filters records for organizations located in 'California' and 'Texas'. Finally, the data is grouped by donor_id and aggregate function SUM is used to sum the donation_amount for each unique donor_id.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the average hotel rating in each city for a specific year?\\n\\nContext: CREATE TABLE Hotels (Hotel_ID INT, Hotel_Name VARCHAR(50), City VARCHAR(30)); INSERT INTO Hotels (Hotel_ID, Hotel_Name, City) VALUES (1, 'HotelA', 'CityA'), (2, 'HotelB', 'CityB'), (3, 'HotelC', 'CityA'); CREATE TABLE Ratings (Rating_ID INT, Hotel_ID INT, Rating INT, Visit_Year INT); INSERT INTO Ratings (Rating_ID, Hotel_ID, Rating, Visit_Year) VALUES (1, 1, 4, 2019), (2, 1, 4, 2020), (3, 2, 5, 2019), (4, 2, 5, 2020), (5, 3, 3, 2019), (6, 3, 3, 2020);<end_of_turn>\\n<start_of_turn>model\\nSELECT H.City, V.Visit_Year, AVG(R.Rating) AS Average_Rating  FROM Ratings R  JOIN Hotels H  ON R.Hotel_ID = H.Hotel_ID  JOIN (SELECT Hotel_ID, MAX(Visit_Year) AS Visit_Year  FROM Ratings  GROUP BY Hotel_ID) V  ON R.Hotel_ID = V.Hotel_ID AND R.Visit_Year = V.Visit_Year  GROUP BY H.City, V.Visit_Year;\\n\\nExplanation: The SQL query selects the City, Visit_Year, and Rating columns from the Hotels, Ratings, and a subquery (V). It uses two INNER JOINs to combine the tables based on the Hotel_ID, and the subquery selects the maximum Visit_Year for each hotel. The GROUP BY clause groups the results by the City and Visit_Year columns, and the AVG function calculates the average rating for each group.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the maximum cost of highway projects in the Midwest region?\\n\\nContext: CREATE TABLE InfrastructureProjects (id INT, name VARCHAR(100), region VARCHAR(50), project_type VARCHAR(50), cost FLOAT); INSERT INTO InfrastructureProjects (id, name, region, project_type, cost) VALUES (1, 'Chicago Highway', 'Midwest', 'highway', 50000000);<end_of_turn>\\n<start_of_turn>model\\nSELECT MAX(cost) FROM InfrastructureProjects WHERE region = 'Midwest' AND project_type = 'highway';\\n\\nExplanation: The SQL query calculates the maximum cost of highway projects in the Midwest region by using the MAX function on the cost column, filtering the data with the WHERE clause to only include highway projects from the Midwest region.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the total cargo weight for vessels in the 'Cargo Ship' category?\\n\\nContext: CREATE TABLE Vessels (ID INT PRIMARY KEY, Name TEXT, Category TEXT, CargoWeight FLOAT); INSERT INTO Vessels (ID, Name, Category, CargoWeight) VALUES (1, 'Cargo Ship 1', 'Cargo Ship', 5500), (2, 'Fishing Vessel 1', 'Fishing Vessel', 0), (3, 'Cargo Ship 2', 'Cargo Ship', 7000);<end_of_turn>\\n<start_of_turn>model\\nSELECT SUM(CargoWeight) FROM Vessels WHERE Category = 'Cargo Ship';\\n\\nExplanation: Sum all records in the CargoWeight column for records where Category is 'Cargo Ship'.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat are the labor costs for green building projects in California, grouped by project name?\\n\\nContext: CREATE TABLE Green_Buildings (Project_ID INT, Project_Name VARCHAR(255), State VARCHAR(255), Labor_Cost DECIMAL(10,2)); INSERT INTO Green_Buildings (Project_ID, Project_Name, State, Labor_Cost) VALUES (1, 'Solar Farm', 'California', 150000.00), (2, 'Wind Turbine Park', 'California', 200000.00);<end_of_turn>\\n<start_of_turn>model\\nSELECT Project_Name, SUM(Labor_Cost) FROM Green_Buildings WHERE State = 'California' GROUP BY Project_Name;\\n\\nExplanation: This SQL query retrieves the labor costs for green building projects in California, grouped by project name. It does so by using the GROUP BY clause, which groups rows that have the same values in specified columns into aggregated data. The query calculates the sum of labor costs for each project name and groups the result set by the Project_Name column.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the distribution of player levels in the game \"EpicQuest\", grouped by region?\\n\\nContext: CREATE TABLE epicquest_players (player_id INT, level INT, region VARCHAR(20)); INSERT INTO epicquest_players (player_id, level, region) VALUES (1, 25, 'North America'), (2, 30, 'Europe'), (3, 22, 'Asia'), (4, 35, 'North America'), (5, 18, 'Europe'), (6, 28, 'Asia');<end_of_turn>\\n<start_of_turn>model\\nSELECT region, AVG(level) AS avg_level, MIN(level) AS min_level, MAX(level) AS max_level FROM epicquest_players GROUP BY region;\\n\\nExplanation: This query calculates the average, minimum, and maximum player levels in the game \"EpicQuest\", grouped by region. It groups the epicquest_players table by the region column and calculates the average, minimum, and maximum level for each group using the AVG, MIN, and MAX functions, respectively.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the biomass trend for a specific fish species?\\n\\nContext: CREATE TABLE fish_species (id INT, name VARCHAR(50), average_length DECIMAL(5,2)); CREATE TABLE fish_weights (id INT, fish_species_id INT, date DATE, weight DECIMAL(10,2)); INSERT INTO fish_species (id, name, average_length) VALUES (1, 'Salmon', 70.0), (2, 'Tilapia', 25.0); INSERT INTO fish_weights (id, fish_species_id, date, weight) VALUES (1, 1, '2022-01-01', 50.0), (2, 1, '2022-01-02', 52.0);<end_of_turn>\\n<start_of_turn>model\\nSELECT fw.date, fw.weight FROM fish_weights fw WHERE fw.fish_species_id = 1 ORDER BY fw.date;\\n\\nExplanation: This query retrieves the biomass trend for a specific fish species. It selects the date and weight columns from the fish_weights table, filters the records by fish_species_id, and orders the records by date.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nFind the total number of policy violations for each department in the government sector\\n\\nContext: CREATE TABLE policy_violations (id INT, department VARCHAR(255), violation_count INT); INSERT INTO policy_violations (id, department, violation_count) VALUES (1, 'HR', 10); INSERT INTO policy_violations (id, department, violation_count) VALUES (2, 'IT', 5); INSERT INTO policy_violations (id, department, violation_count) VALUES (3, 'Finance', 8); INSERT INTO policy_violations (id, department, violation_count) VALUES (4, 'Operations', 12); INSERT INTO policy_violations (id, department, violation_count) VALUES (5, 'Government', 0);<end_of_turn>\\n<start_of_turn>model\\nSELECT department, SUM(violation_count) as total_violations FROM policy_violations WHERE department LIKE '%Government%' GROUP BY department;\\n\\nExplanation: This query filters the policy_violations table to only include records where the department contains the word 'Government'. It then groups the results by department and calculates the total number of violations for each department.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the average number of primary care physicians per rural hospital, ordered by state?\\n\\nContext: CREATE TABLE primary_care_physicians (physician_id INT, physician_name VARCHAR, specialty VARCHAR, hospital_id INT, state VARCHAR); INSERT INTO primary_care_physicians (physician_id, physician_name, specialty, hospital_id, state) VALUES (1, 'Dr. Narayan', 'Family Medicine', 1, 'New York'); INSERT INTO primary_care_physicians (physician_id, physician_name, specialty, hospital_id, state) VALUES (2, 'Dr. Chen', 'General Practice', 2, 'Pennsylvania'); CREATE TABLE hospitals (hospital_id INT, hospital_name VARCHAR, rural_county VARCHAR, state VARCHAR); INSERT INTO hospitals (hospital_id, hospital_name, rural_county, state) VALUES (1, 'Rural Hospital A', 'County X', 'New York'); INSERT INTO hospitals (hospital_id, hospital_name, rural_county, state) VALUES (2, 'Rural Hospital B', 'County Y', 'Pennsylvania');<end_of_turn>\\n<start_of_turn>model\\nSELECT hospitals.state, AVG(primary_care_physicians.physician_id) AS avg_physicians FROM primary_care_physicians JOIN hospitals ON primary_care_physicians.hospital_id = hospitals.hospital_id WHERE primary_care_physicians.specialty IN ('Family Medicine', 'General Practice') GROUP BY hospitals.state ORDER BY hospitals.state;\\n\\nExplanation: This query calculates the average number of primary care physicians per rural hospital by joining the primary_care_physicians and hospitals tables and filtering for primary care specialties. The results are grouped by state and ordered by state.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the trend of student mental health scores in the last 6 months?\\n\\nContext: CREATE TABLE mental_health_trend (date DATE, school_id INT, mental_health_score INT); INSERT INTO mental_health_trend (date, school_id, mental_health_score) VALUES ('2022-01-01', 101, 80), ('2022-01-02', 101, 75), ('2022-01-03', 102, 85), ('2022-01-04', 102, 90), ('2022-02-01', 101, 82), ('2022-02-02', 101, 78), ('2022-02-03', 102, 88), ('2022-02-04', 102, 92);<end_of_turn>\\n<start_of_turn>model\\nSELECT date, mental_health_score, ROW_NUMBER() OVER (ORDER BY date) as rank FROM mental_health_trend WHERE date >= DATEADD(month, -6, CURRENT_TIMESTAMP) ORDER BY date;\\n\\nExplanation: Calculate the trend of student mental health scores in the last 6 months by ranking the scores in descending order of date, with 1 being the most recent score.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhich climate communication campaigns were launched in the African region between 2016 and 2018, and what was their reach?\\n\\nContext: CREATE TABLE climate_communication (campaign_name VARCHAR(50), region VARCHAR(50), launch_year INT, reach INT); INSERT INTO climate_communication (campaign_name, region, launch_year, reach) VALUES ('Go Green', 'Africa', 2017, 500000), ('Save the Planet', 'Africa', 2016, 700000);<end_of_turn>\\n<start_of_turn>model\\nSELECT campaign_name, region, launch_year, reach FROM climate_communication WHERE region = 'Africa' AND launch_year BETWEEN 2016 AND 2018;\\n\\nExplanation: The SQL query retrieves the climate communication campaigns that were launched in the African region between 2016 and 2018, along with their reach.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nDetermine the number of active rigs in the Gulf of Mexico in 2020\\n\\nContext: CREATE TABLE rigs (id INT PRIMARY KEY, name TEXT, status TEXT, location TEXT); INSERT INTO rigs (id, name, status, location) VALUES (1, 'Rig A', 'Active', 'Gulf of Mexico'), (2, 'Rig B', 'Inactive', 'Gulf of Mexico'), (3, 'Rig C', 'Active', 'Gulf of Mexico'), (4, 'Rig D', 'Inactive', 'North Sea'); CREATE TABLE rig_history (rig_id INT, year INT, active_rigs INT); INSERT INTO rig_history (rig_id, year, active_rigs) VALUES (1, 2019, 1), (1, 2020, 1), (2, 2019, 0), (2, 2020, 0), (3, 2019, 1), (3, 2020, 1), (4, 2019, 0), (4, 2020, 0);<end_of_turn>\\n<start_of_turn>model\\nSELECT COUNT(*) as num_active_rigs FROM rig_history rh JOIN rigs r ON rh.rig_id = r.id WHERE r.location = 'Gulf of Mexico' AND rh.year = 2020 AND r.status = 'Active';\\n\\nExplanation: This query first joins the rigs and rig_history tables on the rig_id\/id field. It then filters the results to only include records where the location is 'Gulf of Mexico', the year is 2020, and the status is 'Active'. Finally, it counts the number of matching records.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the total budget allocated to public schools in each county with a population density greater than 1000 people per square mile?\\n\\nContext: CREATE SCHEMA Government;CREATE TABLE Government.County (name VARCHAR(255), population INT, area FLOAT);CREATE TABLE Government.School (name VARCHAR(255), county VARCHAR(255), budget INT);<end_of_turn>\\n<start_of_turn>model\\nSELECT county, SUM(budget) FROM Government.School WHERE county IN (SELECT name FROM Government.County WHERE (population \/ area) > 1000) GROUP BY county;\\n\\nExplanation: We select the county and the total budget allocated to public schools in each county where the population density is greater than 1000 people per square mile.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the total amount of donations received by organizations in India and Pakistan?\\n\\nContext: CREATE TABLE donations (id INT, country VARCHAR(20), organization_id INT, donation_amount DECIMAL(10, 2), donation_date DATE);<end_of_turn>\\n<start_of_turn>model\\nSELECT country, SUM(donation_amount) as total_donations FROM donations GROUP BY country;\\n\\nExplanation: This SQL query calculates the total amount of donations received by organizations in India and Pakistan. It groups the donations table by country and then calculates the sum of the donation_amount column for each group.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the average square footage of studio units across all areas?\\n\\nContext: CREATE TABLE avg_square (unit_id INT, area VARCHAR(20), studio BOOLEAN, square_footage FLOAT); INSERT INTO avg_square (unit_id, area, studio, square_footage) VALUES (1, 'all', TRUE, 400);<end_of_turn>\\n<start_of_turn>model\\nSELECT AVG(square_footage) FROM avg_square WHERE studio = TRUE;\\n\\nExplanation: This query calculates the average square footage of studio units across all areas in the 'avg_square' table by using the AVG function on the 'square_footage' column and filtering for studio units.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the total revenue of virtual tours in Africa and South America?\\n\\nContext: CREATE TABLE revenue_virtual_world (transaction_id INT, region TEXT, revenue FLOAT); INSERT INTO revenue_virtual_world (transaction_id, region, revenue) VALUES (1, 'Africa', 500), (2, 'South America', 700);<end_of_turn>\\n<start_of_turn>model\\nSELECT SUM(revenue) FROM revenue_virtual_world WHERE region IN ('Africa', 'South America');\\n\\nExplanation: This query calculates the total revenue of virtual tours in Africa and South America by using the SUM function on the revenue column and filtering the data for these regions using the WHERE clause with the IN keyword.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nHow many cases were handled by each judge in the District Court last year?\\n\\nContext: CREATE TABLE judge_cases (judge_name VARCHAR(20), court_type VARCHAR(20), num_cases INT); INSERT INTO judge_cases (judge_name, court_type, num_cases) VALUES ('Judge 1', 'District Court', 200), ('Judge 2', 'District Court', 300), ('Judge 3', 'District Court', 400);<end_of_turn>\\n<start_of_turn>model\\nSELECT judge_name, SUM(num_cases) as total_cases FROM judge_cases WHERE court_type = 'District Court' GROUP BY judge_name;\\n\\nExplanation: This query sums the number of cases for each judge in the District Court, groups them by judge_name.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the total revenue for the most popular dish?\\n\\nContext: CREATE TABLE Sales (id INT, dish_name VARCHAR(255), revenue DECIMAL(5,2));<end_of_turn>\\n<start_of_turn>model\\nSELECT SUM(revenue) FROM Sales WHERE dish_name = (SELECT dish_name FROM Sales GROUP BY dish_name ORDER BY COUNT(*) DESC LIMIT 1);\\n\\nExplanation: This query calculates the total revenue for the most popular dish by first finding the name of the dish with the most sales by grouping the Sales table by dish_name, counting the number of sales for each dish, and ordering the results in descending order. It then sums the revenue from the Sales table for this dish.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the minimum crime count for each type in the 'island' schema?\\n\\nContext: CREATE SCHEMA if not exists island; CREATE TABLE if not exists island.crime_stats (id INT, crime_type VARCHAR(255), crime_count INT); INSERT INTO island.crime_stats (id, crime_type, crime_count) VALUES (1, 'Murder', 25), (2, 'Robbery', 45), (3, 'Murder', 32);<end_of_turn>\\n<start_of_turn>model\\nSELECT crime_type, MIN(crime_count) FROM island.crime_stats GROUP BY crime_type;\\n\\nExplanation: This SQL query finds the minimum crime count for each type in the 'island' schema. It uses the MIN() function to calculate the minimum value of the crime_count column grouped by the crime_type from the crime_stats table in the 'island' schema.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the total funding received by biotech startups in Kenya, Egypt, and South Africa?\\n\\nContext: CREATE SCHEMA if not exists biotech; CREATE TABLE if not exists biotech.startups (id INT, name VARCHAR(50), location VARCHAR(50), funding DECIMAL(10, 2)); INSERT INTO biotech.startups (id, name, location, funding) VALUES (1, 'Cellulant', 'Kenya', 2000000.00), (2, 'Venture Platform', 'Egypt', 1500000.00), (3, 'Discover Diagnostics', 'South Africa', 3000000.00);<end_of_turn>\\n<start_of_turn>model\\nSELECT SUM(funding) FROM biotech.startups WHERE location IN ('Kenya', 'Egypt', 'South Africa');\\n\\nExplanation: This query calculates the total funding received by biotech startups located in Kenya, Egypt, and South Africa by summing the funding column in the biotech.startups table, filtered for rows where the location is either 'Kenya', 'Egypt', or 'South Africa'.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nHow many vessels arrived in the Canadian ports in the last month, grouped by the vessel's flag state?\\n\\nContext: CREATE TABLE ports (port_id INT, port_name VARCHAR(255), country VARCHAR(255)); INSERT INTO ports VALUES (1, 'Vancouver', 'Canada'); INSERT INTO ports VALUES (2, 'Montreal', 'Canada'); CREATE TABLE vessel_arrivals (arrival_id INT, vessel_id INT, port_id INT, arrival_timestamp TIMESTAMP); INSERT INTO vessel_arrivals VALUES (1, 101, 1, '2021-04-01 12:30:00'); INSERT INTO vessel_arrivals VALUES (2, 102, 2, '2021-04-15 08:45:00');<end_of_turn>\\n<start_of_turn>model\\nSELECT v.flag_state, COUNT(v.vessel_id) AS vessel_count FROM vessel_arrivals a JOIN vessel_info v ON a.vessel_id = v.vessel_id WHERE a.arrival_timestamp BETWEEN DATE_SUB(NOW(), INTERVAL 1 MONTH) AND NOW() AND a.port_id IN (SELECT port_id FROM ports WHERE country = 'Canada') GROUP BY v.flag_state;\\n\\nExplanation: 1. Filters vessel arrivals in Canadian ports during the last month. 2. Joins vessel_arrivals and vessel_info tables on vessel_id. 3. Groups the results by the vessel's flag state and calculates the number of vessel arrivals for each flag state.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat are the total annual productions for each producer of Neodymium and Europium?\\n\\nContext: CREATE TABLE producers (id INT PRIMARY KEY, name VARCHAR(255), country VARCHAR(255));CREATE TABLE production (year INT, producer_id INT, element VARCHAR(255), quantity INT, FOREIGN KEY (producer_id) REFERENCES producers(id));<end_of_turn>\\n<start_of_turn>model\\nSELECT p.name, SUM(CASE WHEN production.element = 'Neodymium' THEN production.quantity ELSE 0 END) AS Neodymium, SUM(CASE WHEN production.element = 'Europium' THEN production.quantity ELSE 0 END) AS Europium FROM production JOIN producers p ON production.producer_id = p.id GROUP BY p.name;\\n\\nExplanation: This SQL query retrieves the total production quantity of Neodymium and Europium for each producer. It does so by joining the producers table with the production table on the producer_id column, and then using conditional aggregation (SUM(CASE...)) to calculate the quantities for each element separately.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the total distance traveled by electric taxis in Berlin?\\n\\nContext: CREATE TABLE electric_taxis (taxi_id INT, trip_distance INT, trip_date DATE); INSERT INTO electric_taxis (taxi_id, trip_distance, trip_date) VALUES (1, 15, '2022-01-01'), (2, 20, '2022-01-02'); CREATE TABLE city_coordinates (city VARCHAR(50), latitude DECIMAL(9,6), longitude DECIMAL(9,6)); INSERT INTO city_coordinates (city, latitude, longitude) VALUES ('Berlin', 52.5200, 13.4050);<end_of_turn>\\n<start_of_turn>model\\nSELECT SUM(trip_distance) FROM electric_taxis, city_coordinates WHERE city_coordinates.city = 'Berlin';\\n\\nExplanation: Calculates the total distance traveled by electric taxis in Berlin by summing the trip distances.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nwhat is the average budget for schools in 'District1'?\\n\\nContext: CREATE TABLE Districts (DistrictName VARCHAR(20), AvgSchoolBudget DECIMAL(5,2)); INSERT INTO Districts (DistrictName, AvgSchoolBudget) VALUES ('District1', 5000.50), ('District2', 6000.25);<end_of_turn>\\n<start_of_turn>model\\nSELECT Avg(AvgSchoolBudget) FROM Districts WHERE DistrictName = 'District1';\\n\\nExplanation: Calculates the average school budget for District1 by averaging the school budgets in that district.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nHow many reported crimes occurred in each district in the last month?\\n\\nContext: CREATE TABLE Districts (DistrictID INT, Name VARCHAR(50)); CREATE TABLE Crimes (CrimeID INT, DistrictID INT, Date DATE);<end_of_turn>\\n<start_of_turn>model\\nSELECT D.Name, COUNT(C.CrimeID) as NumCrimes FROM Districts D INNER JOIN Crimes C ON D.DistrictID = C.DistrictID WHERE C.Date >= DATEADD(MONTH, -1, GETDATE()) GROUP BY D.Name;\\n\\nExplanation: The SQL query joins the Districts and Crimes tables on the DistrictID. It then filters the results to only include crimes that occurred in the last month using the WHERE clause and the GETDATE() function. Finally, it groups the results by the Name of the District and counts the number of crimes for each group.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nCount the number of games won by teams with a mascot starting with the letter 'C' in the MLB.\\n\\nContext: CREATE TABLE mlb_teams_mascots (id INT, name VARCHAR(100), mascot VARCHAR(50), wins INT); INSERT INTO mlb_teams_mascots (id, name, mascot, wins) VALUES (1, 'Cardinals', 'Cardinal', 75), (2, 'Cubs', 'Cub', 65), (3, 'Rangers', 'Ranger', 60), (4, 'Reds', 'Red', 68), (5, 'Royals', 'Royal', 62), (6, 'Tigers', 'Tiger', 70);<end_of_turn>\\n<start_of_turn>model\\nSELECT SUM(wins) FROM mlb_teams_mascots WHERE mascot LIKE 'C%';\\n\\nExplanation: The SQL query calculates the total number of wins for teams whose mascots start with the letter 'C' in the MLB by using the SUM function and filtering mascots with the LIKE operator and the 'C%' pattern.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWho are the top 5 offenders by total number of offenses?\\n\\nContext: CREATE TABLE offenders (offender_id INT, offender_name VARCHAR(255)); CREATE TABLE offenses (offense_id INT, offender_id INT, offense_date DATE);<end_of_turn>\\n<start_of_turn>model\\nSELECT offender_name, COUNT(*) as total_offenses FROM offenders JOIN offenses ON offenders.offender_id = offenses.offender_id GROUP BY offender_name ORDER BY total_offenses DESC LIMIT 5;\\n\\nExplanation: This query joins the 'offenders' table with the 'offenses' table on the 'offender_id' column. It then groups the results by the 'offender_name' and calculates the count of offenses for each offender. Finally, it orders the results in descending order by the total number of offenses and returns the top 5 offenders.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nFind the forest with the highest average carbon sequestration\\n\\nContext: CREATE TABLE forests (id INT, name VARCHAR(50), hectares DECIMAL(5,2), year_planted INT, avg_carbon_sequestration DECIMAL(5,2), PRIMARY KEY (id)); INSERT INTO forests (id, name, hectares, year_planted, avg_carbon_sequestration) VALUES (1, 'Forest A', 123.45, 1990, 2.5), (2, 'Forest B', 654.32, 1985, 3.2), (3, 'Forest C', 456.78, 2010, 3.8), (4, 'Forest D', 903.45, 1980, 1.9);<end_of_turn>\\n<start_of_turn>model\\nSELECT f.name FROM forests f ORDER BY f.avg_carbon_sequestration DESC LIMIT 1;\\n\\nExplanation: This SQL query finds the forest with the highest average carbon sequestration. It does this by ordering the forests table by average carbon sequestration in descending order and then returning the name of the forest with the highest average carbon sequestration using the LIMIT clause.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nList the top 3 countries with the most active esports players, based on the number of tournaments participated in?\\n\\nContext: CREATE TABLE EsportsPlayers (PlayerID INT, Country VARCHAR(20), Tournaments INT); INSERT INTO EsportsPlayers (PlayerID, Country, Tournaments) VALUES (1, 'USA', 5), (2, 'Canada', 3), (3, 'Mexico', 7);<end_of_turn>\\n<start_of_turn>model\\nSELECT Country, ROW_NUMBER() OVER (ORDER BY Tournaments DESC) AS Rank FROM EsportsPlayers WHERE Tournaments > 0;\\n\\nExplanation: The SQL query lists the top 3 countries with the most active esports players, based on the number of tournaments participated in. It uses the ROW_NUMBER function to rank the countries in descending order of tournaments and filters out rows with 0 tournaments.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the average age of educators in the education domain?\\n\\nContext: CREATE TABLE educators(id INT, age INT, domain VARCHAR(255)); INSERT INTO educators VALUES (1, 45, 'education'), (2, 30, 'education'), (3, 50, 'technology'), (4, 42, 'education'), (5, 48, 'education');<end_of_turn>\\n<start_of_turn>model\\nSELECT AVG(age) FROM educators WHERE domain = 'education';\\n\\nExplanation: The SQL query calculates the average age of educators in the education domain. It does this by using the AVG function on the age column, while filtering the rows based on the domain column being equal to 'education'.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the number of general hospitals in each state in Rural USA?\\n\\nContext: CREATE TABLE Hospitals (name TEXT, location TEXT, type TEXT, num_beds INTEGER, state TEXT); INSERT INTO Hospitals (name, location, type, num_beds, state) VALUES ('Hospital A', 'City A, Rural USA', 'General', 100, 'Rural USA'), ('Hospital B', 'City B, Rural USA', 'Specialty', 50, 'Rural USA');<end_of_turn>\\n<start_of_turn>model\\nSELECT state, COUNT(*) as general_hospitals_count FROM Hospitals WHERE type = 'General' GROUP BY state;\\n\\nExplanation: This query counts the number of general hospitals in each state in Rural USA. It filters for the type 'General' and groups the result by state, summing up the count of hospitals.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nList the unique species found in the 'animal_sightings', 'plant_observations', and 'fungi_findings' tables.\\n\\nContext: CREATE TABLE animal_sightings (id INT, species TEXT, sighting_date DATE); INSERT INTO animal_sightings (id, species, sighting_date) VALUES (1, 'Polar Bear', '2023-01-01'); INSERT INTO animal_sightings (id, species, sighting_date) VALUES (2, 'Arctic Fox', '2023-01-02'); CREATE TABLE plant_observations (id INT, species TEXT, observation_date DATE); INSERT INTO plant_observations (id, species, observation_date) VALUES (1, 'Snowdrop', '2023-02-01'); INSERT INTO plant_observations (id, species, observation_date) VALUES (2, 'Arctic Willow', '2023-02-02'); CREATE TABLE fungi_findings (id INT, species TEXT, finding_date DATE); INSERT INTO fungi_findings (id, species, finding_date) VALUES (1, 'Iceman Mushroom', '2023-03-01'); INSERT INTO fungi_findings (id, species, finding_date) VALUES (2, 'Siberian Tinder Polypore', '2023-03-02');<end_of_turn>\\n<start_of_turn>model\\n(SELECT species FROM animal_sightings) UNION (SELECT species FROM plant_observations) UNION (SELECT species FROM fungi_findings);\\n\\nExplanation: This query uses the UNION operator to combine the unique species from all three tables, removing any duplicate species entries.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the total production capacity per country for garment manufacturers?\\n\\nContext: CREATE TABLE manufacturers (id INT, name VARCHAR(255), country VARCHAR(255), production_capacity INT);<end_of_turn>\\n<start_of_turn>model\\nSELECT country, SUM(production_capacity) as total_capacity FROM manufacturers GROUP BY country;\\n\\nExplanation: This query calculates the total production capacity per country for garment manufacturers by grouping the manufacturers table by country and aggregating production_capacity column.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nHow many clinical trials have been conducted in 'CountryA' but not in 'CountryB'?\\n\\nContext: CREATE TABLE clinical_trials (trial_name TEXT, country TEXT); INSERT INTO clinical_trials (trial_name, country) VALUES ('Trial1', 'CountryA'), ('Trial2', 'CountryB'), ('Trial3', 'CountryA'), ('Trial4', 'CountryC');<end_of_turn>\\n<start_of_turn>model\\nSELECT COUNT(*) FROM clinical_trials WHERE country = 'CountryA' AND trial_name NOT IN (SELECT trial_name FROM clinical_trials WHERE country = 'CountryB');\\n\\nExplanation: This query counts the number of clinical trials conducted in 'CountryA' but not in 'CountryB' by selecting all rows with 'country' = 'CountryA' and excluding those that also appear in the subquery with 'country' = 'CountryB'.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the total number of animal species in the 'animal_species' table grouped by region?\\n\\nContext: CREATE TABLE animal_species_regions (species_id INT, species_name VARCHAR(50), region VARCHAR(50)); INSERT INTO animal_species_regions (species_id, species_name, region) VALUES (1, 'Deer', 'North'), (2, 'Bear', 'South'), (3, 'Wolf', 'North'), (4, 'Eagle', 'South');<end_of_turn>\\n<start_of_turn>model\\nSELECT region, COUNT(*) as total_species_per_region FROM animal_species_regions GROUP BY region;\\n\\nExplanation: The SQL query calculates the total number of animal species in the 'animal_species' table grouped by region by using the GROUP BY clause to group the results by the 'region' column and then calculating the count of species per region.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the number of companies founded by individuals from underrepresented backgrounds?\\n\\nContext: CREATE TABLE company (id INT, name TEXT, founding_year INT, founder_background TEXT); INSERT INTO company (id, name, founding_year, founder_background) VALUES (1, 'Acme Inc', 2010, 'minority'); INSERT INTO company (id, name, founding_year, founder_background) VALUES (2, 'Beta Corp', 2015, 'non-minority');<end_of_turn>\\n<start_of_turn>model\\nSELECT COUNT(*) FROM company WHERE founder_background = 'minority';\\n\\nExplanation: This SQL query counts the number of companies founded by individuals from underrepresented backgrounds. It filters the 'company' table to only include rows where the founder_background is 'minority'. Finally, it calculates the count of all rows in the result set.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the maximum fine imposed in each criminal case, by type of crime, in the past 6 months?\\n\\nContext: CREATE TABLE criminal_cases (id INT, fine DECIMAL(10,2), crime_type VARCHAR(50), case_date DATE);<end_of_turn>\\n<start_of_turn>model\\nSELECT crime_type, MAX(fine) FROM criminal_cases WHERE case_date >= DATE_SUB(CURRENT_DATE, INTERVAL 6 MONTH) GROUP BY crime_type;\\n\\nExplanation: The SQL query filters the criminal_cases table for cases in the past 6 months, groups the results by crime type, and calculates the maximum fine for each crime type.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the distance from a given stop to every other stop in Paris?\\n\\nContext: CREATE TABLE stops (id INT, name VARCHAR(255), lat DECIMAL(9,6), lon DECIMAL(9,6), city VARCHAR(255)); INSERT INTO stops (id, name, lat, lon, city) VALUES (1, 'Gare du Nord', 48.8792, 2.3488, 'Paris'), (2, 'Eiffel Tower', 48.8582, 2.2945, 'Paris'), (3, 'Notre Dame', 48.8534, 2.3488, 'Paris'), (4, 'Arc de Triomphe', 48.8738, 2.2945, 'Paris'), (5, 'Sacré-Cœur', 48.8866, 2.3389, 'Paris');<end_of_turn>\\n<start_of_turn>model\\nSELECT s1.name as Start, s2.name as End, ROUND(ST_Distance_Sphere(POINT(s2.lon, s2.lat), POINT(s1.lon, s1.lat)), 2) as Distance FROM stops s1 JOIN stops s2 ON s1.city = s2.city WHERE s1.id <> s2.id AND s1.city = 'Paris';\\n\\nExplanation: Calculates the distance in kilometers between every pair of stops in Paris using the ST_Distance_Sphere function. The result is rounded to two decimal places.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhich countries have the highest average donation amount in the Donations table?\\n\\nContext: CREATE TABLE Donations (id INT, donor VARCHAR(50), country VARCHAR(50), amount DECIMAL(10,2)); INSERT INTO Donations (id, donor, country, amount) VALUES (1, 'John Doe', 'USA', 50.00), (2, 'Jane Smith', 'Canada', 75.00), (3, 'Maria Garcia', 'Mexico', 25.00);<end_of_turn>\\n<start_of_turn>model\\nSELECT country, AVG(amount) as avg_donation FROM Donations GROUP BY country ORDER BY avg_donation DESC LIMIT 1;\\n\\nExplanation: This query calculates the average donation amount for each country in the Donations table, then groups them and orders in descending order. The query finally returns the country with the highest average donation amount.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the count of organic ingredient-based cosmetic products launched in 2022?\\n\\nContext: CREATE TABLE cosmetics (product_name TEXT, launch_year INTEGER, organic_ingredients BOOLEAN); INSERT INTO cosmetics (product_name, launch_year, organic_ingredients) VALUES ('ProductA', 2021, true), ('ProductB', 2022, true), ('ProductC', 2021, false), ('ProductD', 2022, false), ('ProductE', 2022, true), ('ProductF', 2021, true);<end_of_turn>\\n<start_of_turn>model\\nSELECT COUNT(*) FROM cosmetics WHERE launch_year = 2022 AND organic_ingredients = true;\\n\\nExplanation: This query calculates the count of organic ingredient-based cosmetic products launched in 2022. It does this by using the WHERE clause to filter rows based on the launch_year and organic_ingredients columns and then uses the COUNT function to count the number of rows.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhich vehicle types are used by drivers with a rating above 4.5?\\n\\nContext: CREATE TABLE if not exists highly_rated_drivers (driver_id INT, vehicle_type VARCHAR(255), rating DECIMAL(3,2));<end_of_turn>\\n<start_of_turn>model\\nSELECT h.vehicle_type FROM highly_rated_drivers h WHERE h.rating > 4.5 GROUP BY h.vehicle_type;\\n\\nExplanation: This query selects the vehicle_type used by highly_rated_drivers with a rating above 4.5.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nHow many travel advisories have been issued for each country?\\n\\nContext: CREATE TABLE if not exists travel_advisory (advisory_id INT, country VARCHAR(50), issue_date DATE); INSERT INTO travel_advisory (advisory_id, country, issue_date) VALUES (1, 'France', '2022-02-01'), (2, 'Japan', '2022-03-01'), (3, 'Canada', '2022-01-01'), (4, 'Egypt', '2022-04-01'), (5, 'Australia', '2022-05-01');<end_of_turn>\\n<start_of_turn>model\\nSELECT country, COUNT(*) as num_advisories FROM travel_advisory GROUP BY country;\\n\\nExplanation: List the number of travel advisories for each country by grouping the records by the country column and applying the COUNT() function to get the number of travel advisories for each country.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nUpdate the carbon sequestration area for 'Region2' to 55.6.\\n\\nContext: CREATE TABLE Carbon_Sequestration_2 (ID INT, Region VARCHAR(50), Area FLOAT); INSERT INTO Carbon_Sequestration_2 (ID, Region, Area) VALUES (1, 'Region1', 30.2), (2, 'Region2', 45.6), (3, 'Region3', 60.8);<end_of_turn>\\n<start_of_turn>model\\nUPDATE Carbon_Sequestration_2 SET Area = 55.6 WHERE Region = 'Region2';\\n\\nExplanation: This query updates the carbon sequestration area for 'Region2' to 55.6 hectares by modifying the 'Area' column in the 'Carbon_Sequestration_2' table with a WHERE clause.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nHow many units of each product have been sold in Paris in the current month?\\n\\nContext: CREATE TABLE products(product_id VARCHAR(20), product_name VARCHAR(20)); INSERT INTO products (product_id, product_name) VALUES ('Product C', 'Organic Apples'), ('Product D', 'Bamboo Toothbrushes'); CREATE TABLE sales(product_id VARCHAR(20), store_location VARCHAR(20), sale_date DATE, quantity INTEGER); INSERT INTO sales (product_id, store_location, sale_date, quantity) VALUES ('Product C', 'Paris', '2021-10-03', 5), ('Product D', 'Paris', '2021-10-05', 15);<end_of_turn>\\n<start_of_turn>model\\nSELECT sales.product_id, products.product_name, SUM(sales.quantity) FROM sales JOIN products ON sales.product_id = products.product_id WHERE sales.store_location = 'Paris' AND sale_date BETWEEN DATE_SUB(CURRENT_DATE, INTERVAL DAY(CURRENT_DATE)-1 DAY) AND CURRENT_DATE GROUP BY sales.product_id;\\n\\nExplanation: This query calculates the number of units for each product sold in 'Paris' during the current month by joining the 'sales' and 'products' tables on 'product_id', filtering by 'store_location' and the date range, calculating the total quantity for each product, and then grouping by 'product_id'.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nChange the category of 'Impossible Burger' to 'Plant-based' in the menu_items table\\n\\nContext: CREATE TABLE menu_items (item_id INT, item_name TEXT, category TEXT, price DECIMAL(5,2), inventory_count INT); CREATE TABLE menu_categories (category_id INT, category_name TEXT);<end_of_turn>\\n<start_of_turn>model\\nUPDATE menu_items mi JOIN menu_categories mc ON mi.category = mc.category_name SET mi.category = 'Plant-based' WHERE mi.item_name = 'Impossible Burger' AND mc.category_name = 'New';\\n\\nExplanation: * The UPDATE statement is used to modify the existing records in the menu_items table.   * The JOIN clause is used to combine rows from menu_items and menu_categories tables based on the matching category and category_name columns.   * The SET clause is used to update the category column to the new value, 'Plant-based'.   * The WHERE clause is used to specify the condition for updating records, in this case, where the item_name is 'Impossible Burger' and the category_name is 'New'.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the average claim amount for policyholders in a given age group?\\n\\nContext: CREATE TABLE Claims (Policyholder TEXT, Age NUMERIC, Claim_Amount NUMERIC); INSERT INTO Claims (Policyholder, Age, Claim_Amount) VALUES ('John Doe', 35, 2500), ('Jane Smith', 45, 3000), ('Alice Johnson', 25, 2000), ('Bob Brown', 50, 1500);<end_of_turn>\\n<start_of_turn>model\\nSELECT CASE WHEN Age < 30 THEN 'Under 30' WHEN Age < 50 THEN '30-49' ELSE '50 and over' END AS Age_Group, AVG(Claim_Amount) FROM Claims GROUP BY Age_Group;\\n\\nExplanation: This query calculates the average claim amount for policyholders in a given age group. It does this by using the CASE statement to create an Age_Group column based on the Age column. The GROUP BY statement is then used to group the data by the Age_Group column, and the AVG function is used to calculate the average of the Claim_Amount column for each group.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nList the unique space mission names from the 'space_missions' table, ordered alphabetically.\\n\\nContext: CREATE TABLE space_missions (id INT, mission_name VARCHAR(50)); INSERT INTO space_missions (id, mission_name) VALUES (1, 'Apollo 11'), (2, 'Apollo 13'), (3, 'Artemis I'), (4, 'Artemis II');<end_of_turn>\\n<start_of_turn>model\\nSELECT DISTINCT mission_name FROM space_missions ORDER BY mission_name;\\n\\nExplanation: This query retrieves unique space mission names from the 'space_missions' table, sorted alphabetically by applying the DISTINCT keyword for unique values and ORDER BY clause for sorting.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nList the number of exits by year for technology startups founded by BIPOC founders before 2010.\\n\\nContext: CREATE TABLE exit (id INT, company_id INT, exit_date DATE, exit_type TEXT); INSERT INTO exit (id, company_id, exit_date, exit_type) VALUES (1, 1, '2015-01-01', 'Acquisition');<end_of_turn>\\n<start_of_turn>model\\nSELECT EXTRACT(YEAR FROM exit_date) AS exit_year, COUNT(*) FROM exit INNER JOIN company ON exit.company_id = company.id WHERE company.founding_date < '2010-01-01' AND company.founder_gender = 'BIPOC' AND exit_type = 'Acquisition' GROUP BY exit_year;\\n\\nExplanation: This SQL query lists the number of exits by year for technology startups founded by BIPOC founders before 2010 by joining the exit and company tables based on the company_id column, filtering the rows based on the founding_date, founder_gender, and exit_type columns, and then grouping the rows by the year of the exit_date column and computing the count of rows in each group.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nList all music festivals that have had a higher attendance rate than Coachella since 2010.\\n\\nContext: CREATE TABLE Festivals (id INT, name VARCHAR(255), year INT, attendance INT);<end_of_turn>\\n<start_of_turn>model\\nSELECT name FROM Festivals WHERE attendance > (SELECT attendance FROM Festivals WHERE name = 'Coachella' AND year = 2010) AND year >= 2010;\\n\\nExplanation: The SQL query first finds the attendance of Coachella in 2010, then selects all festivals with a higher attendance rate since 2010.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the average budget for all Mars rover missions launched by any space agency between 2000 and 2010, inclusive?\\n\\nContext: CREATE TABLE mars_rovers(id INT, agency VARCHAR(255), mission_name VARCHAR(255), launch_date DATE, budget DECIMAL(10,2));<end_of_turn>\\n<start_of_turn>model\\nSELECT AVG(budget) FROM mars_rovers WHERE agency IN (SELECT agency FROM mars_rovers WHERE launch_date BETWEEN '2000-01-01' AND '2010-12-31' GROUP BY agency) AND mission_name LIKE '%Mars Rover%';\\n\\nExplanation: This query calculates the average budget for all Mars rover missions launched by any space agency between 2000 and 2010, inclusive. It uses a subquery to get the list of agencies that have launched Mars rover missions during this time period, and then filters the results to only include missions from those agencies with the keyword \"Mars Rover\" in the mission name. Finally, it uses the AVG() function to calculate the average budget for these missions.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nDelete records from the 'property_co_ownership' table where the co-ownership agreement has expired.\\n\\nContext: CREATE TABLE property_co_ownership (id INT, property_id INT, co_owner_id INT, agreement_start_date DATE, agreement_end_date DATE);<end_of_turn>\\n<start_of_turn>model\\nDELETE FROM property_co_ownership WHERE agreement_end_date < CURDATE();\\n\\nExplanation: This query deletes records from the 'property_co_ownership' table where the 'agreement_end_date' is before the current date.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the average labor cost per sustainable project in Washington State?\\n\\nContext: CREATE TABLE LaborCosts (CostID int, ProjectID int, LaborCost money, Date date, IsSustainable bit); CREATE TABLE Projects (ProjectID int, ProjectName varchar(255), State varchar(255), StartDate date, EndDate date);<end_of_turn>\\n<start_of_turn>model\\nSELECT AVG(LaborCost) as AvgLaborCost FROM LaborCosts JOIN Projects ON LaborCosts.ProjectID = Projects.ProjectID WHERE State = 'Washington' AND IsSustainable = 1;\\n\\nExplanation: This query joins the LaborCosts and Projects tables on the ProjectID column, filters for sustainable projects in Washington State, and calculates the average labor cost per sustainable project in Washington State by taking the average of the LaborCost column.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the average donation per donor in the 'Donors' table?\\n\\nContext: CREATE TABLE Donors (DonorID int, DonorName varchar(50), Donation decimal(10,2)); INSERT INTO Donors (DonorID, DonorName, Donation) VALUES (1, 'John Doe', 500.00), (2, 'Jane Smith', 700.00), (3, 'Mary Johnson', 600.00);<end_of_turn>\\n<start_of_turn>model\\nSELECT AVG(Donation) as AverageDonationPerDonor FROM Donors;\\n\\nExplanation: This query calculates the average donation for all donors in the Donors table, providing the average donation per donor.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the difference in price between the most and least expensive products in the 'haircare' table?\\n\\nContext: CREATE TABLE haircare (product_id INT, product_name VARCHAR(50), price DECIMAL(5,2));<end_of_turn>\\n<start_of_turn>model\\nSELECT product_name, price, MAX(price) OVER() - MIN(price) OVER() as price_difference FROM haircare;\\n\\nExplanation: This query calculates the difference between the most and least expensive products in the 'haircare' table by using the MAX() and MIN() window functions to determine the maximum and minimum prices, respectively. The result is then subtracted to find the price difference.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the total revenue of ethical clothing brands?\\n\\nContext: CREATE TABLE brands (brand_id INT, brand_name VARCHAR(255), product_type VARCHAR(255), revenue DECIMAL(10,2)); INSERT INTO brands (brand_id, brand_name, product_type, revenue) VALUES (1, 'Ethical Apparel', 'Clothing', 500000.00); INSERT INTO brands (brand_id, brand_name, product_type, revenue) VALUES (2, 'Fair Fashion', 'Clothing', 750000.00);<end_of_turn>\\n<start_of_turn>model\\nSELECT SUM(revenue) FROM brands WHERE product_type = 'Clothing' AND brand_name IN ('Ethical Apparel', 'Fair Fashion');\\n\\nExplanation: Sum the revenue of ethical clothing brands.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nHow many biosensors have been developed for glucose monitoring?\\n\\nContext: CREATE TABLE biosensors (id INT, name VARCHAR(50), target VARCHAR(50)); INSERT INTO biosensors VALUES (1, 'BioSensorA', 'Glucose'); INSERT INTO biosensors VALUES (2, 'BioSensorB', 'Cholesterol'); INSERT INTO biosensors VALUES (3, 'BioSensorC', 'Glucose');<end_of_turn>\\n<start_of_turn>model\\nSELECT COUNT(*) FROM biosensors WHERE target = 'Glucose';\\n\\nExplanation: This SQL query counts the number of biosensors developed for glucose monitoring by selecting all records from the 'biosensors' table where the 'target' is 'Glucose' and counting the number of rows.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the average age of inmates who have participated in restorative justice programs in California prisons?\\n\\nContext: CREATE TABLE prisons (id INT, state VARCHAR(2)); INSERT INTO prisons (id, state) VALUES (1, 'California'); CREATE TABLE inmates (id INT, age INT, prison_id INT); CREATE TABLE restorative_justice_programs (id INT, inmate_id INT);<end_of_turn>\\n<start_of_turn>model\\nSELECT AVG(inmates.age) FROM inmates INNER JOIN restorative_justice_programs ON inmates.id = restorative_justice_programs.inmate_id INNER JOIN prisons ON inmates.prison_id = prisons.id WHERE prisons.state = 'California';\\n\\nExplanation: 1. Joins the inmates table with the restorative_justice_programs table on the id field.   2. Joins the resulting table with the prisons table on the prison_id field.   3. Filters the records where the state field is 'California'.   4. Calculates the average age of inmates who have participated in restorative justice programs.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nDelete records with no end_date in the community_development table\\n\\nContext: CREATE TABLE community_development (id INT PRIMARY KEY, name VARCHAR(255), description TEXT, start_date DATE, end_date DATE);<end_of_turn>\\n<start_of_turn>model\\nWITH cte AS (DELETE FROM community_development WHERE end_date IS NULL) SELECT * FROM cte;\\n\\nExplanation: The CTE deletes records with no end_date from the community_development table, and then the SELECT statement returns all records from the CTE.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the total landfill capacity (in cubic meters) by state in Australia in 2019?\\n\\nContext: CREATE TABLE landfill_capacity (state VARCHAR(20), year INT, capacity FLOAT); INSERT INTO landfill_capacity (state, year, capacity) VALUES ('New South Wales', 2019, 5000000), ('Victoria', 2019, 4000000), ('Queensland', 2019, 6000000), ('Western Australia', 2019, 3000000), ('South Australia', 2019, 2000000);<end_of_turn>\\n<start_of_turn>model\\nSELECT state, SUM(capacity) as total_capacity FROM landfill_capacity WHERE year = 2019 GROUP BY state;\\n\\nExplanation: This SQL query calculates the total landfill capacity (in cubic meters) by state in Australia in 2019. It does this by selecting the state and summing the capacity for each state where the year is 2019. The results are then grouped by state.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the change in water consumption between consecutive weeks for each district in Sydney?\\n\\nContext: CREATE TABLE sydney_water_consumption (id INT, date DATE, district VARCHAR(20), water_consumption FLOAT); INSERT INTO sydney_water_consumption (id, date, district, water_consumption) VALUES (1, '2023-01-01', 'Central Business District', 12000.0), (2, '2023-01-02', 'Eastern Suburbs', 15000.0);<end_of_turn>\\n<start_of_turn>model\\nSELECT district, LAG(water_consumption) OVER (PARTITION BY district ORDER BY date) - water_consumption FROM sydney_water_consumption;\\n\\nExplanation: Calculates the change in water consumption between consecutive weeks for each district in Sydney by subtracting the water consumption in the current week from the water consumption in the previous week.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the total duration of strength training workouts for female users?\\n\\nContext: CREATE TABLE user_data (user_id INT, gender VARCHAR(10)); INSERT INTO user_data (user_id, gender) VALUES (101, 'Female'), (102, 'Male'), (103, 'Female'), (104, 'Male'), (105, 'Female'); CREATE TABLE workout_data (user_id INT, workout_type VARCHAR(20), duration INT); INSERT INTO workout_data (user_id, workout_type, duration) VALUES (101, 'Strength Training', 60), (101, 'Strength Training', 90), (102, 'Strength Training', 45), (103, 'Yoga', 30), (104, 'Strength Training', 120);<end_of_turn>\\n<start_of_turn>model\\nSELECT SUM(duration) as total_duration FROM workout_data JOIN user_data ON workout_data.user_id = user_data.user_id WHERE user_data.gender = 'Female' AND workout_type = 'Strength Training';\\n\\nExplanation: The SQL query calculates the total duration of strength training workouts for female users by joining the workout_data and user_data tables on user_id, filtering the results based on the gender and workout_type, and calculating the sum of duration.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nFind the maximum depth among all marine trenches.\\n\\nContext: CREATE TABLE marine_trenches (id INT, name VARCHAR(255), depth FLOAT);<end_of_turn>\\n<start_of_turn>model\\nSELECT MAX(depth) FROM marine_trenches;\\n\\nExplanation: The SQL query calculates the maximum 'depth' value in the 'marine_trenches' table using the MAX function.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the total number of security incidents reported in the education sector in the year 2020?\\n\\nContext: CREATE TABLE security_incidents (id INT, sector VARCHAR(255), year INT, incidents INT); INSERT INTO security_incidents (id, sector, year, incidents) VALUES (1, 'education', 2020, 2), (2, 'finance', 2019, 3);<end_of_turn>\\n<start_of_turn>model\\nSELECT SUM(incidents) FROM security_incidents WHERE sector = 'education' AND year = 2020;\\n\\nExplanation: This query sums the number of incidents in the security_incidents table where the sector is equal to 'education' and the year is equal to 2020.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the average word count of articles published in 2017?\\n\\nContext: CREATE TABLE Articles (id INT, title VARCHAR(255), word_count INT, publish_date DATE); INSERT INTO Articles (id, title, word_count, publish_date) VALUES (1, 'Article 1', 500, '2017-01-01'), (2, 'Article 2', 600, '2017-02-01'), (3, 'Article 3', 700, '2017-03-01'), (4, 'Article 4', 800, '2017-04-01'), (5, 'Article 5', 900, '2017-05-01'), (6, 'Article 6', 1000, '2017-06-01'), (7, 'Article 7', 1100, '2017-07-01'), (8, 'Article 8', 1200, '2017-08-01'), (9, 'Article 9', 1300, '2017-09-01'), (10, 'Article 10', 1400, '2017-10-01'), (11, 'Article 11', 1500, '2017-11-01'), (12, 'Article 12', 1600, '2017-12-01');<end_of_turn>\\n<start_of_turn>model\\nSELECT AVG(word_count) FROM Articles WHERE YEAR(publish_date) = 2017;\\n\\nExplanation: The SQL query selects the average word_count from the Articles table where the year of the publish_date is 2017.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the name of the supplier with the most failed inspections since 2022-01-01?\\n\\nContext: CREATE TABLE Suppliers (SupplierID varchar(10), SupplierName varchar(20)); INSERT INTO Suppliers VALUES ('A', 'Supplier A'), ('B', 'Supplier B'), ('C', 'Supplier C'); CREATE TABLE Inspections (InspectionID int, InspectionDate date, SupplierID varchar(10), Failed bit); INSERT INTO Inspections VALUES (1, '2022-01-02', 'A', 1), (2, '2022-01-03', 'B', 0), (3, '2022-01-04', 'A', 1), (4, '2022-01-05', 'C', 1), (5, '2022-01-06', 'A', 1);<end_of_turn>\\n<start_of_turn>model\\nSELECT SupplierName FROM Suppliers INNER JOIN (SELECT SupplierID, COUNT(*) as FailedCount FROM Inspections WHERE InspectionDate >= '2022-01-01' AND Failed = 1 GROUP BY SupplierID) as FailedInspections ON Suppliers.SupplierID = FailedInspections.SupplierID WHERE FailedCount = (SELECT MAX(FailedCount) FROM FailedInspections);\\n\\nExplanation: The query performs a subquery to count the number of failed inspections for each supplier since 2022-01-01. It then performs an inner join between the Suppliers and FailedInspections table on the SupplierID column. Finally, it filters the records to only include the supplier with the maximum number of failed inspections and selects the SupplierName column from the filtered records.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the total revenue generated from concert ticket sales for artists from Asia in the year 2021?\\n\\nContext: CREATE TABLE tickets (ticket_id INT, concert_id INT, ticket_price DECIMAL(10, 2)); CREATE TABLE concert_revenue (concert_id INT, total_revenue DECIMAL(10, 2)); INSERT INTO tickets (ticket_id, concert_id, ticket_price) VALUES (1, 1, 100.00), (2, 1, 200.00), (3, 2, 50.00), (4, 3, 75.00); INSERT INTO concert_revenue (concert_id, total_revenue) VALUES (1, NULL), (2, NULL), (3, NULL);<end_of_turn>\\n<start_of_turn>model\\nUPDATE concert_revenue SET total_revenue = (SELECT SUM(ticket_price) FROM tickets JOIN concerts ON tickets.concert_id = concerts.concert_id WHERE concerts.artist_id IN (SELECT artist_id FROM artists WHERE artist_country = 'Asia') AND YEAR(concerts.concert_date) = 2021) WHERE concert_id IN (1, 2, 3); SELECT SUM(total_revenue) FROM concert_revenue;\\n\\nExplanation: We start by calculating the total revenue generated from concert ticket sales for artists from Asia in the year 2021 by using an UPDATE statement with a subquery. The subquery calculates the sum of ticket prices for concerts that match the specified criteria. We then use a SELECT statement to calculate the total revenue by summing the total_revenue field in the concert_revenue table.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nList the names of countries with no viewers for any concert?\\n\\nContext: CREATE TABLE Concerts (id INT, title VARCHAR(255), location VARCHAR(255), viewers INT);<end_of_turn>\\n<start_of_turn>model\\nSELECT location FROM Concerts WHERE viewers = 0 GROUP BY location HAVING COUNT(*) = (SELECT COUNT(*) FROM Concerts WHERE Concerts.viewers = 0);\\n\\nExplanation: The SQL query lists the names of countries with no viewers (WHERE viewers = 0 GROUP BY location) for any concert and counts them (HAVING COUNT(*)).<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat are the top 3 materials used in bridge construction in California?\\n\\nContext: CREATE TABLE bridge_materials (material_id INT, bridge_id INT, material VARCHAR(50)); CREATE TABLE materials (material_id INT, material_name VARCHAR(50), quantity INT); CREATE TABLE bridges (bridge_id INT, state VARCHAR(50), construction_year INT);<end_of_turn>\\n<start_of_turn>model\\nSELECT materials.material_name, SUM(materials.quantity) as total_quantity FROM bridge_materials JOIN materials ON bridge_materials.material_id = materials.material_id JOIN bridges ON bridge_materials.bridge_id = bridges.bridge_id WHERE bridges.state = 'California' GROUP BY materials.material_name ORDER BY total_quantity DESC LIMIT 3;\\n\\nExplanation: The SQL query joins the bridge_materials, materials, and bridges tables to find the materials used in bridge construction in California. It groups the materials by their names and calculates the total quantity of each material. Then, it orders the materials by the total quantity in descending order and limits the results to the top 3 materials.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nInsert a new ethical brand 'Green Vogue' into the 'Brands' table\\n\\nContext: CREATE TABLE Brands(id INT, name TEXT); INSERT INTO Brands(id, name) VALUES (1, 'Eco Wear'), (2, 'Natural Threads');<end_of_turn>\\n<start_of_turn>model\\nINSERT INTO Brands(id, name) VALUES (3, 'Green Vogue');\\n\\nExplanation: 1. Inserts a new record into the 'Brands' table with an 'id' of 3 and the name 'Green Vogue'.   2. Adds the new brand 'Green Vogue' to the database.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the average order value by payment method?\\n\\nContext: CREATE TABLE Orders (OrderID INT, PaymentMethod VARCHAR(50), OrderValue DECIMAL(5,2)); INSERT INTO Orders (OrderID, PaymentMethod, OrderValue) VALUES (1, 'Credit Card', 120.50), (2, 'PayPal', 75.20), (3, 'Debit Card', 98.60);<end_of_turn>\\n<start_of_turn>model\\nSELECT PaymentMethod, AVG(OrderValue) AS AvgOrderValue FROM Orders GROUP BY PaymentMethod;\\n\\nExplanation: The SQL query calculates the average order value for each payment method by grouping the Orders table by PaymentMethod and applying the AVG function to OrderValue.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nIdentify the top 3 contributing authors in the field of Explainable AI.\\n\\nContext: CREATE TABLE author (author_id INT, author_name VARCHAR(255)); INSERT INTO author VALUES (1, 'Alice Johnson'), (2, 'Bob Smith'), (3, 'Carol Brown');CREATE TABLE paper_author (paper_id INT, author_id INT); INSERT INTO paper_author VALUES (1, 1), (1, 2), (2, 3);CREATE TABLE paper (paper_id INT, topic VARCHAR(255)); INSERT INTO paper VALUES (1, 'Explainable AI'), (2, 'Explainable AI'), (3, 'AI Fairness');<end_of_turn>\\n<start_of_turn>model\\nSELECT a.author_name, COUNT(pa.author_id) as num_papers FROM author a INNER JOIN paper_author pa ON a.author_id = pa.author_id INNER JOIN paper p ON pa.paper_id = p.paper_id WHERE p.topic = 'Explainable AI' GROUP BY a.author_name ORDER BY num_papers DESC LIMIT 3;\\n\\nExplanation: This query first joins the 'author', 'paper_author', and 'paper' tables on their respective foreign keys. It then filters the records based on the 'topic' column in the 'paper' table set to 'Explainable AI'. Next, it groups the results by the 'author_name' column from the 'author' table and calculates the count of matching records for each author. Finally, it orders the results by the count of papers in descending order and returns only the top 3 rows.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nAdd a new creative AI application 'Music Generation'\\n\\nContext: CREATE TABLE creative_apps (id INT, name VARCHAR(255), type VARCHAR(255)); INSERT INTO creative_apps (id, name, type) VALUES (1, 'Image Generation', 'Computer Vision'), (2, 'Text Summarization', 'Natural Language Processing');<end_of_turn>\\n<start_of_turn>model\\nINSERT INTO creative_apps (id, name, type) VALUES (3, 'Music Generation', 'Audio Processing');\\n\\nExplanation: This query inserts a new record into the 'creative_apps' table with the name 'Music Generation' and type 'Audio Processing'. It helps to add new creative AI applications to the database.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat are the top 5 most popular international destinations in North America, and their visitor counts?\\n\\nContext: CREATE TABLE north_american_tourism (destination VARCHAR(255), continent VARCHAR(255), visitors INT); INSERT INTO north_american_tourism (destination, continent, visitors) VALUES ('New York City', 'North America', 8000000); INSERT INTO north_american_tourism (destination, continent, visitors) VALUES ('Los Angeles', 'North America', 6000000); INSERT INTO north_american_tourism (destination, continent, visitors) VALUES ('Miami', 'North America', 4000000);<end_of_turn>\\n<start_of_turn>model\\nSELECT destination, continent, visitors, RANK() OVER (PARTITION BY continent ORDER BY visitors DESC) as popularity_rank FROM north_american_tourism WHERE continent = 'North America' AND popularity_rank <= 5;\\n\\nExplanation: This query ranks the popularity of destinations in North America by partitioning the data by continent and ordering by visitor counts in descending order. Only the top 5 are returned.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the total billing amount for cases with a specific client ID?\\n\\nContext: CREATE TABLE cases (case_id INT, client_id INT, billing_amount DECIMAL(10, 2)); INSERT INTO cases (case_id, client_id, billing_amount) VALUES (1, 100, 5000.00), (2, 101, 7500.00), (3, 100, 3000.00);<end_of_turn>\\n<start_of_turn>model\\nSELECT SUM(billing_amount) FROM cases WHERE client_id = 100;\\n\\nExplanation: This SQL query calculates the total billing amount for cases with a specific client ID by summing up all billing_amount values for the specified client ID.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat green building certifications were used in green building projects between 2018 and 2020?\\n\\nContext: CREATE TABLE if not exists building_certifications (certification_id INT PRIMARY KEY, certification_name VARCHAR(255)); INSERT INTO building_certifications (certification_id, certification_name) VALUES (1, 'LEED'), (2, 'BREEAM'), (3, 'Green Star'); CREATE TABLE if not exists green_building_projects (project_id INT PRIMARY KEY, project_name VARCHAR(255), certification_id INT, build_date DATE); INSERT INTO green_building_projects (project_id, project_name, certification_id, build_date) VALUES (1, 'City Hall', 1, '2018-10-20'), (2, 'Public Library', 2, '2019-05-15'), (3, 'Recreation Center', NULL, '2020-11-03');<end_of_turn>\\n<start_of_turn>model\\nSELECT certification_name FROM building_certifications bc JOIN green_building_projects gbp ON bc.certification_id = gbp.certification_id WHERE gbp.build_date BETWEEN '2018-01-01' AND '2020-12-31';\\n\\nExplanation: This SQL query first joins the building_certifications and green_building_projects tables on the certification_id. Then, it selects the certification_name from the building_certifications table where the build_date in the green_building_projects table is between 2018-01-01 and 2020-12-31. It will return the certifications used in green building projects between 2018 and 2020.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the total number of security incidents for each month in 2022?\\n\\nContext: CREATE TABLE security_incidents (id INT, incident_type TEXT, date_reported DATE, severity TEXT); INSERT INTO security_incidents (id, incident_type, date_reported, severity) VALUES (1, 'Phishing', '2022-01-01', 'High');<end_of_turn>\\n<start_of_turn>model\\nSELECT DATE_FORMAT(date_reported, '%Y-%m') as month, COUNT(*) as count FROM security_incidents WHERE date_reported >= '2022-01-01' AND date_reported < '2023-01-01' GROUP BY month;\\n\\nExplanation: This query selects the month and count of all security incidents that were reported in 2022. It uses the WHERE clause to filter the results based on the date_reported column. The query then groups the results by month and calculates the count for each month.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nHow many players have participated in eSports events for game 'B'?\\n\\nContext: CREATE TABLE GameB_Participants (player_id INT, game_id INT); CREATE TABLE GameB_eSportsEvents (event_id INT, game_id INT); INSERT INTO GameB_Participants (player_id, game_id) VALUES (1, 1), (2, 1), (3, 2), (4, 1), (5, 2); INSERT INTO GameB_eSportsEvents (event_id, game_id) VALUES (101, 1), (102, 2), (103, 1);<end_of_turn>\\n<start_of_turn>model\\nSELECT COUNT(DISTINCT GameB_Participants.player_id) as num_players FROM GameB_Participants JOIN GameB_eSportsEvents ON GameB_Participants.game_id = GameB_eSportsEvents.game_id;\\n\\nExplanation: This SQL query joins the GameB_Participants and GameB_eSportsEvents tables on the game_id column. It then counts the number of distinct player_ids in the joined table, which represents the number of players who have participated in eSports events for game 'B'.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nCalculate the average recycling rate in the European Union over the past 5 years.\\n\\nContext: CREATE TABLE RecyclingRatesEU (country VARCHAR(50), year INT, rate DECIMAL(5,2)); INSERT INTO RecyclingRatesEU (country, year, rate) VALUES ('Germany', 2017, 60.5), ('Germany', 2018, 61.2), ('Germany', 2019, 62.1), ('France', 2017, 55.4), ('France', 2018, 56.2), ('France', 2019, 57.1);<end_of_turn>\\n<start_of_turn>model\\nSELECT AVG(rate) FROM RecyclingRatesEU WHERE country IN ('Germany', 'France');\\n\\nExplanation: Calculates the average recycling rate in the European Union over the past 5 years for Germany and France.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the maximum timeline for a sustainable construction project in Utah?\\n\\nContext: CREATE TABLE Sustainable_Projects_UT (project_id INT, project_name VARCHAR(50), state VARCHAR(2), timeline INT, is_sustainable BOOLEAN); INSERT INTO Sustainable_Projects_UT VALUES (2, 'SaltLakeCityGreenTower', 'UT', 36, true);<end_of_turn>\\n<start_of_turn>model\\nSELECT MAX(timeline) FROM Sustainable_Projects_UT WHERE state = 'UT' AND is_sustainable = true;\\n\\nExplanation: This query calculates the maximum timeline for a sustainable construction project in Utah by finding the maximum value of the 'timeline' column where the 'state' column is equal to 'UT' and the 'is_sustainable' column is equal to true.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhich are the top 3 longest bridges in Spain?\\n\\nContext: CREATE TABLE bridges (id INT, name VARCHAR(255), location VARCHAR(255), length FLOAT); INSERT INTO bridges (id, name, location, length) VALUES (1, 'Puente de la Constitución de 1812', 'Spain', 2140), (2, 'Viaducto de Montabliz', 'Spain', 2075);<end_of_turn>\\n<start_of_turn>model\\nSELECT name FROM bridges WHERE location = 'Spain' ORDER BY length DESC LIMIT 3;\\n\\nExplanation: This query identifies the top 3 longest bridges in Spain by ordering the bridges table by length in descending order and filtering for rows with the location 'Spain', then returning the name of the first 3 rows.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the average sales per month for the 'Fast Fashion' category in the year 2023?\\n\\nContext: CREATE TABLE suppliers (id INT PRIMARY KEY, name VARCHAR(255), country VARCHAR(255), industry VARCHAR(255)); INSERT INTO suppliers (id, name, country, industry) VALUES (1, 'Supplier A', 'Bangladesh', 'Textile'); CREATE TABLE garments (id INT PRIMARY KEY, supplier_id INT, name VARCHAR(255), category VARCHAR(255), price DECIMAL(10,2)); CREATE TABLE sales (id INT PRIMARY KEY, garment_id INT, date DATE, quantity INT); CREATE VIEW sales_by_month AS SELECT YEAR(date) as sales_year, MONTH(date) as sales_month, SUM(quantity) as total_sales FROM sales GROUP BY sales_year, sales_month;<end_of_turn>\\n<start_of_turn>model\\nSELECT AVG(total_sales) FROM sales_by_month WHERE sales_year = 2023 AND category = 'Fast Fashion' GROUP BY sales_month;\\n\\nExplanation: This query calculates the average sales per month for the 'Fast Fashion' category in the year 2023. It does so by querying the 'sales_by_month' view and filtering for the year 2023 and the 'Fast Fashion' category. It then groups the results by sales month and calculates the average sales per month.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nAdd new records to the 'digital_trends' table for trends with IDs 9 and 10, names 'Machine Learning' and 'Blockchain', and popularity scores of 85 and 60, respectively\\n\\nContext: CREATE TABLE digital_trends (trend_id INT, name VARCHAR(20), popularity_score INT);<end_of_turn>\\n<start_of_turn>model\\nINSERT INTO digital_trends (trend_id, name, popularity_score) VALUES (9, 'Machine Learning', 85), (10, 'Blockchain', 60);\\n\\nExplanation: This query adds new records to the 'digital_trends' table for trends with IDs 9 and 10, names 'Machine Learning' and 'Blockchain', and popularity scores of 85 and 60, respectively.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the total number of articles published on the website for each month in 2023?\\n\\nContext: CREATE TABLE article (id INT, title VARCHAR(255), publish_date DATE); INSERT INTO article (id, title, publish_date) VALUES (1, 'Article1', '2023-01-01'), (2, 'Article2', '2023-02-15'), (3, 'Article3', '2023-12-20');<end_of_turn>\\n<start_of_turn>model\\nSELECT MONTH(publish_date), COUNT(*) FROM article WHERE YEAR(publish_date) = 2023 GROUP BY MONTH(publish_date);\\n\\nExplanation: This query groups records in the 'article' table by the month of the 'publish_date' column and counts the records for each group. The WHERE clause filters records from 2023.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the average launch date for digital assets created by developers from historically underrepresented communities?\\n\\nContext: CREATE TABLE digital_assets (id INT, name VARCHAR(255), company VARCHAR(255), launch_date DATE, developer VARCHAR(255)); INSERT INTO digital_assets (id, name, company, launch_date, developer) VALUES (1, 'Asset 1', 'Company A', '2021-01-01', 'Alice Johnson'), (2, 'Asset 2', 'Company B', '2021-02-15', 'Bruno Alvarez');<end_of_turn>\\n<start_of_turn>model\\nSELECT AVG(launch_date) FROM digital_assets WHERE developer IN ('Alice Johnson', 'Bruno Alvarez');\\n\\nExplanation: Calculate the average launch_date for the records in the digital_assets table where the developer is either 'Alice Johnson' or 'Bruno Alvarez'.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat were the water conservation initiatives in 2019, grouped by project and sorted by savings?\\n\\nContext: CREATE TABLE WaterConservation (Project VARCHAR(255), Year INT, Savings FLOAT); INSERT INTO WaterConservation (Project, Year, Savings) VALUES ('Project C', 2019, 0.234); INSERT INTO WaterConservation (Project, Year, Savings) VALUES ('Project D', 2019, 0.567);<end_of_turn>\\n<start_of_turn>model\\nSELECT Project, Savings FROM WaterConservation WHERE Year = 2019 GROUP BY Project ORDER BY Savings DESC;\\n\\nExplanation: Retrieve water conservation data for 2019 and order it by savings in descending order by grouping projects and summing their savings values.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the most popular category of news articles in the \"LA Times\"?\\n\\nContext: CREATE TABLE ArticleCategories (id INT, category VARCHAR(20), newspaper VARCHAR(20)); INSERT INTO ArticleCategories (id, category, newspaper) VALUES (1, 'technology', 'LA Times'), (2, 'politics', 'LA Times'), (3, 'technology', 'LA Times');<end_of_turn>\\n<start_of_turn>model\\nSELECT category, COUNT(*) AS count FROM ArticleCategories WHERE newspaper = 'LA Times' GROUP BY category ORDER BY count DESC LIMIT 1;\\n\\nExplanation: This query identifies the most popular category of news articles in the \"LA Times\" by filtering the \"ArticleCategories\" table based on the \"newspaper\" column, grouping the results by the \"category\" column, and then sorting the results in descending order based on the count of rows in each group. The top result is returned.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nDelete all records from the 'weapons' table where the 'name' is 'Mig-29'\\n\\nContext: CREATE TABLE weapons (id INT PRIMARY KEY, name VARCHAR(255), origin VARCHAR(255)); INSERT INTO weapons (id, name, origin) VALUES (1, 'AK-47', 'Russia'), (2, 'RPG-7', 'Russia'), (3, 'Mig-29', 'Russia');<end_of_turn>\\n<start_of_turn>model\\nDELETE FROM weapons WHERE name = 'Mig-29';\\n\\nExplanation: This query deletes all records from the 'weapons' table where the 'name' is 'Mig-29'. It uses the DELETE statement, specifying the 'weapons' table and the condition for deletion in the WHERE clause.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the total data usage for customers in a specific postal code, grouped by week and joined with the customer demographics table to show age, gender, and income?\\n\\nContext: CREATE TABLE customer_data_usage (id INT PRIMARY KEY, customer_id INT, usage_bytes BIGINT, usage_date DATE); CREATE TABLE customer_demographics (id INT PRIMARY KEY, customer_id INT, age INT, gender VARCHAR(255), income FLOAT);<end_of_turn>\\n<start_of_turn>model\\nSELECT WEEK(du.usage_date) as week, c.age, c.gender, c.income, SUM(du.usage_bytes) as total_usage FROM customer_data_usage du INNER JOIN customer_demographics c ON du.customer_id = c.customer_id WHERE c.postal_code = '12345' GROUP BY week, c.age, c.gender, c.income;\\n\\nExplanation: This query returns the total data usage for customers in the postal code '12345', grouped by week and joined with the customer demographics table to show age, gender, and income by joining the customer_data_usage and customer_demographics tables on the customer_id field and then filtering the results to only include records with a specific postal code, grouping the results by the week, age, gender, and income fields.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhich artists from India have released songs that have been streamed more than 1 million times?\\n\\nContext: CREATE TABLE Artists (ArtistID INT, ArtistName VARCHAR(100), Country VARCHAR(50)); INSERT INTO Artists (ArtistID, ArtistName, Country) VALUES (1, 'AR Rahman', 'India'), (2, 'Green Day', 'USA'); CREATE TABLE MusicStreams (StreamID INT, SongID INT, ArtistID INT, StreamCount INT); INSERT INTO MusicStreams (StreamID, SongID, ArtistID, StreamCount) VALUES (1, 1, 1, 1000000), (2, 2, 2, 5000000);<end_of_turn>\\n<start_of_turn>model\\nSELECT ArtistName FROM Artists a JOIN MusicStreams ms ON a.ArtistID = ms.ArtistID WHERE Country = 'India' AND ms.StreamCount > 1000000;\\n\\nExplanation: This query first joins the Artists and MusicStreams tables on the ArtistID column, then filters the results to only include artists from India who have released songs with more than 1 million streams. It then selects the ArtistName column. The final result is a list of names of artists from India who have released songs with more than 1 million streams.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nDisplay the number of cases and total billing amounts for cases resolved with a 'Settlement' or 'Alternative Dispute Resolution'.\\n\\nContext: CREATE TABLE CaseResolutions (CaseID INT, CaseType VARCHAR(20), Resolution VARCHAR(20), BillingAmount DECIMAL(10,2)); INSERT INTO CaseResolutions (CaseID, CaseType, Resolution, BillingAmount) VALUES (1, 'Civil', 'Plaintiff Verdict', 7000.00), (2, 'Civil', 'Settlement', 3000.00), (3, 'Civil', 'Alternative Dispute Resolution', 1500.00);<end_of_turn>\\n<start_of_turn>model\\nSELECT COUNT(*), SUM(BillingAmount) FROM CaseResolutions WHERE Resolution IN ('Settlement', 'Alternative Dispute Resolution');\\n\\nExplanation: The SQL query counts the number of cases and adds up the billing amounts for cases resolved with a settlement or alternative dispute resolution by using the COUNT() and SUM() functions and the IN keyword.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the budget increase for each agency between 2019 and 2020, ranked from highest to lowest?\\n\\nContext: CREATE TABLE AgencyYearBudget (AgencyId INT, Year INT, Budget INT, PRIMARY KEY (AgencyId, Year)); INSERT INTO AgencyYearBudget (AgencyId, Year, Budget) VALUES (1, 2019, 5000000); INSERT INTO AgencyYearBudget (AgencyId, Year, Budget) VALUES (1, 2020, 5600000); INSERT INTO AgencyYearBudget (AgencyId, Year, Budget) VALUES (2, 2019, 4000000); INSERT INTO AgencyYearBudget (AgencyId, Year, Budget) VALUES (2, 2020, 4600000);<end_of_turn>\\n<start_of_turn>model\\nSELECT AgencyId, (Budget - LAG(Budget, 1) OVER (PARTITION BY AgencyId ORDER BY Year)) as BudgetIncrease FROM AgencyYearBudget WHERE Year IN (2019, 2020) ORDER BY BudgetIncrease DESC;\\n\\nExplanation: Ranks the budget increase for each agency between 2019 and 2020, from highest to lowest.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the total number of online travel agency bookings for hotels in Mumbai, India in the month of July 2022?\\n\\nContext: CREATE TABLE online_travel_agencies (id INT, hotel_id INT, revenue INT, booking_date DATE); CREATE TABLE hotels (id INT, name TEXT, city TEXT, country TEXT);<end_of_turn>\\n<start_of_turn>model\\nSELECT SUM(1) FROM online_travel_agencies ota INNER JOIN hotels h ON ota.hotel_id = h.id WHERE h.city = 'Mumbai' AND h.country = 'India' AND booking_date BETWEEN '2022-07-01' AND '2022-07-31';\\n\\nExplanation: This SQL query calculates the total number of online travel agency bookings for hotels in Mumbai, India in the month of July 2022. It does this by using the SUM function on the constant value 1, filtering the rows by the city, country, and booking_date, and joining the online_travel_agencies table with the hotels table.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the total number of machines in the 'machine_3' and 'machine_4' categories?\\n\\nContext: CREATE TABLE manufacturing_machines (id INT, name VARCHAR(50), category VARCHAR(20)); INSERT INTO manufacturing_machines (id, name, category) VALUES (1, 'Machine 3', 'machine_3'), (2, 'Machine 4', 'machine_4'), (3, 'Machine 5', 'machine_5');<end_of_turn>\\n<start_of_turn>model\\nSELECT COUNT(*) FROM manufacturing_machines WHERE category IN ('machine_3', 'machine_4');\\n\\nExplanation: This SQL query counts the total number of machines in the 'machine_3' and 'machine_4' categories by selecting all records where the 'category' column is in the list of 'machine_3' and 'machine_4' and then counting the number of records with the COUNT() function.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nList all satellites launched by China in descending order by launch date.\\n\\nContext: CREATE TABLE satellites (id INT, country VARCHAR(255), launch_date DATE); INSERT INTO satellites (id, country, launch_date) VALUES (1, 'USA', '2000-01-01'), (2, 'Russia', '2005-01-01'), (3, 'USA', '2010-01-01'), (4, 'Russia', '2015-01-01'), (5, 'China', '2001-01-01'), (6, 'China', '2011-01-01'), (7, 'China', '2016-01-01');<end_of_turn>\\n<start_of_turn>model\\nSELECT * FROM satellites WHERE country = 'China' ORDER BY launch_date DESC;\\n\\nExplanation: This query selects all satellites launched by China and orders them by launch date in descending order using the ORDER BY clause.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat's the total donation amount for each region, excluding the top 2 donors in each region?\\n\\nContext: CREATE TABLE donors (id INT, name TEXT, region TEXT, donation_amount DECIMAL(10,2)); INSERT INTO donors (id, name, region, donation_amount) VALUES (1, 'John Smith', 'Asia-Pacific', 500.00), (2, 'Jane Doe', 'Europe', 1500.00), (3, 'James Lee', 'Middle East', 3000.00), (4, 'Fatima Al-Faisal', 'Middle East', 4000.00), (5, 'Tariq Al-Saadi', 'Middle East', 5000.00), (6, 'Sophia Wang', 'Asia-Pacific', 600.00), (7, 'Peter Johnson', 'Europe', 700.00);<end_of_turn>\\n<start_of_turn>model\\nSELECT region, SUM(donation_amount) FROM donors d1 WHERE donation_amount < (SELECT DISTINCT donation_amount FROM donors d2 WHERE d1.region = d2.region ORDER BY donation_amount DESC LIMIT 2 OFFSET 1) GROUP BY region;\\n\\nExplanation: The SQL query calculates the total donation amount for each region, excluding the top 2 donors in each region. It first selects the donation amounts for each region that are less than the second highest donation amount for that region. It then calculates the sum of these donation amounts for each region using the SUM function and the GROUP BY clause. The second highest donation amount for each region is selected using a subquery with the DISTINCT and OFFSET clauses.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nList all space missions that have had both male and female crew members.\\n\\nContext: CREATE TABLE Missions (MissionID INT, Name VARCHAR(50), LaunchDate DATETIME, CrewGender VARCHAR(10)); INSERT INTO Missions (MissionID, Name, LaunchDate, CrewGender) VALUES (1, 'Artemis I', '2022-08-29', 'Male'), (2, 'Artemis II', '2023-06-01', 'Mixed'), (3, 'Artemis III', '2024-08-10', 'Female');<end_of_turn>\\n<start_of_turn>model\\nSELECT Name FROM Missions WHERE CrewGender = 'Male' AND CrewGender = 'Female';\\n\\nExplanation: This query lists all space missions that have had both male and female crew members. It filters the Missions table to only include rows where the CrewGender column is equal to both 'Male' and 'Female', which is not possible for a single row. Therefore, the query will return no results. However, if we use the SQL OR operator instead of AND, the query will return missions that have had either male or female crew members.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the minimum stay length in days for visitors from Oceania who visited adventure tourism destinations in 2022?\\n\\nContext: CREATE TABLE TourismDestinations (DestinationID INT, DestinationType VARCHAR(20)); INSERT INTO TourismDestinations (DestinationID, DestinationType) VALUES (1, 'Adventure'); CREATE TABLE Visitors (VisitorID INT, Nationality VARCHAR(20), DestinationID INT, StayLength INT, VisitYear INT); INSERT INTO Visitors (VisitorID, Nationality, DestinationID, StayLength, VisitYear) VALUES (1, 'Australian', 1, 21, 2022), (2, 'NewZealander', 1, 14, 2022);<end_of_turn>\\n<start_of_turn>model\\nSELECT MIN(StayLength\/7.0) FROM Visitors WHERE Nationality IN ('Australian', 'NewZealander') AND DestinationID = 1 AND VisitYear = 2022;\\n\\nExplanation: Calculate the minimum stay length in days for visitors from Oceania who visited adventure tourism destinations in 2022.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nList policy types and their corresponding average claim amounts for policyholders aged 60 and above.\\n\\nContext: CREATE TABLE Claims (Policy_Type VARCHAR(20), Policyholder_Age INT, Claim_Amount INT); INSERT INTO Claims (Policy_Type, Policyholder_Age, Claim_Amount) VALUES ('Life', 65, 15000), ('Health', 67, 3000), ('Auto', 62, 5000), ('Life', 60, 20000), ('Health', 63, 4000);<end_of_turn>\\n<start_of_turn>model\\nSELECT Policy_Type, AVG(Claim_Amount) FROM Claims WHERE Policyholder_Age >= 60 GROUP BY Policy_Type;\\n\\nExplanation: This SQL query lists policy types and their corresponding average claim amounts for policyholders aged 60 and above by grouping the Claims table by policy type and calculating the average claim amount for each policy type where the policyholder age is 60 or above.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhich community projects in Brazil have the highest budget?\\n\\nContext: CREATE TABLE community_projects (id INT, name VARCHAR(100), budget INT, country VARCHAR(50)); INSERT INTO community_projects (id, name, budget, country) VALUES (1, 'Projeto X', 50000, 'Brazil');<end_of_turn>\\n<start_of_turn>model\\nSELECT name, budget FROM community_projects WHERE country = 'Brazil' AND budget = (SELECT MAX(budget) FROM community_projects WHERE country = 'Brazil')\\n\\nExplanation: This query identifies community projects in Brazil with the highest budget by selecting the name and budget where the country is 'Brazil' and the budget is equal to the maximum budget in Brazil.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the average age of users who engaged with articles on 'politics'?\\n\\nContext: CREATE TABLE user_article_engagement (user_id text, age integer, engagement text); INSERT INTO user_article_engagement (user_id, age, engagement) VALUES ('User 5', 45, 'politics'); INSERT INTO user_article_engagement (user_id, age, engagement) VALUES ('User 6', 32, 'politics');<end_of_turn>\\n<start_of_turn>model\\nSELECT AVG(age) as avg_age FROM user_article_engagement WHERE engagement = 'politics';\\n\\nExplanation: This query calculates the average age of users who engaged with articles on 'politics'.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nUpdate the donation amount for donor 'John Doe' to $6000.\\n\\nContext: CREATE TABLE donations_update (donor_id INT, donor_name VARCHAR(255), donation_amount INT); INSERT INTO donations_update (donor_id, donor_name, donation_amount) VALUES (1, 'John Doe', 5000), (2, 'Jane Smith', 7000), (3, 'Alice Johnson', 8000);<end_of_turn>\\n<start_of_turn>model\\nUPDATE donations_update SET donation_amount = 6000 WHERE donor_name = 'John Doe';\\n\\nExplanation: This query updates the donation amount for donor 'John Doe' from $5000 to $6000 in the donations_update table.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nInsert a new record for an 'Accessible' bus named 'BusE' with bus_id 'BUS-789'\\n\\nContext: CREATE TABLE vehicles (vehicle_id VARCHAR(20), vehicle_type VARCHAR(20), vehicle_name VARCHAR(20));<end_of_turn>\\n<start_of_turn>model\\nINSERT INTO vehicles (vehicle_id, vehicle_type, vehicle_name) VALUES ('BUS-789', 'Bus', 'BusE'), ('TRAIN-123', 'Train', 'TrainA');\\n\\nExplanation: This query inserts a new record for an 'Accessible' bus named 'BusE' with bus_id 'BUS-789' into the 'vehicles' table. It uses the INSERT INTO statement to add a new record to the table with the specified column values.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nShow the total production volume for each mine in the \"mine_production\" and \"mines\" tables\\n\\nContext: CREATE TABLE mines (id INT, name VARCHAR(20)); INSERT INTO mines (id, name) VALUES (1, 'Golden Mine'), (2, 'Silver Mine'); CREATE TABLE mine_production (mine_id INT, volume INT); INSERT INTO mine_production (mine_id, volume) VALUES (1, 1000), (1, 1200), (2, 1500);<end_of_turn>\\n<start_of_turn>model\\nSELECT m.name, SUM(mp.volume) as total_volume FROM mines m JOIN mine_production mp ON m.id = mp.mine_id GROUP BY m.name;\\n\\nExplanation: This query shows the total production volume for each mine by joining the \"mines\" and \"mine_production\" tables on the mine_id column, then grouping the results by mine name and calculating the sum of the volume column for each group.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the average number of home runs hit per game by each player in the MLB?\\n\\nContext: CREATE TABLE players (player_id INT, player_name VARCHAR(100)); CREATE TABLE games (game_id INT, home_team INT, away_team INT, home_runs INT);<end_of_turn>\\n<start_of_turn>model\\nSELECT players.player_name, AVG(games.home_runs) as avg_home_runs_per_game FROM players INNER JOIN games ON players.player_id = games.home_team GROUP BY players.player_name;\\n\\nExplanation: This query joins the players and games tables on the player_id field and calculates the average number of home runs hit per game by each player in the MLB. It does this by summing the games.home_runs for each game and dividing by the number of games played by each player. It then groups the results by player_name and returns the average home runs per game for each player.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the average transaction value for each digital asset?\\n\\nContext: CREATE TABLE transactions (digital_asset VARCHAR(255), transaction_value DECIMAL(10,2)); INSERT INTO transactions (digital_asset, transaction_value) VALUES ('Asset1', 100.50), ('Asset2', 200.25), ('Asset3', 50.00), ('Asset4', 300.75), ('Asset5', 150.00);<end_of_turn>\\n<start_of_turn>model\\nSELECT digital_asset, AVG(transaction_value) OVER (PARTITION BY digital_asset) as avg_transaction_value FROM transactions;\\n\\nExplanation: The SQL query calculates the average transaction value for each digital asset by partitioning the data based on the digital_asset column and then using the AVG function to calculate the average transaction_value within each partition.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nHow many accidents were reported for vessels traveling from the USA to Canada in 2021?\\n\\nContext: CREATE TABLE Accidents (Id INT, VesselId INT, Year INT, Country VARCHAR(50)); INSERT INTO Accidents (Id, VesselId, Year, Country) VALUES (1, 1, 2021, 'USA'), (2, 1, 2022, 'Canada'), (3, 3, 2021, 'Mexico'), (4, 2, 2020, 'USA'); CREATE TABLE VesselCountry (VesselId INT, Country VARCHAR(50)); INSERT INTO VesselCountry (VesselId, Country) VALUES (1, 'USA'), (2, 'Canada'), (3, 'Mexico');<end_of_turn>\\n<start_of_turn>model\\nSELECT COUNT(*) FROM Accidents INNER JOIN VesselCountry ON Accidents.VesselId = VesselCountry.VesselId WHERE Accidents.Year = 2021 AND VesselCountry.Country = 'USA' AND VesselCountry.Country = 'Canada';\\n\\nExplanation: This query counts the number of accidents (COUNT*) for records where the Year is 2021 and the VesselCountry table has both 'USA' and 'Canada' as the Country for the corresponding VesselId.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat are the total number of music streams and ticket sales for artists from Latin America?\\n\\nContext: CREATE TABLE music_streams(artist_id INT, region VARCHAR(50), streams INT); CREATE TABLE ticket_sales(artist_id INT, region VARCHAR(50), sales INT);<end_of_turn>\\n<start_of_turn>model\\nSELECT SUM(streams) AS total_streams, SUM(sales) AS total_sales FROM music_streams JOIN ticket_sales ON music_streams.artist_id = ticket_sales.artist_id WHERE region = 'Latin America';\\n\\nExplanation: This query calculates the total number of music streams and ticket sales for artists from Latin America by joining the music_streams and ticket_sales tables on the artist_id column. It then filters the results for rows where the region is 'Latin America' and calculates the sums of the streams and sales columns using the aggregate functions SUM().<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nList all workforce development programs and their respective budgets, sorted by budget in descending order.\\n\\nContext: CREATE TABLE workforce_programs (program_id INT, name TEXT, budget FLOAT); INSERT INTO workforce_programs (program_id, name, budget) VALUES (1, 'Apprenticeship Initiative', 50000.00), (2, 'Skills Training Program', 75000.00), (3, 'Youth Employment Scheme', 120000.00);<end_of_turn>\\n<start_of_turn>model\\nSELECT * FROM workforce_programs ORDER BY budget DESC;\\n\\nExplanation: This query selects all columns from the workforce_programs table and sorts the results by the budget column in descending order. It returns a list of all workforce development programs and their respective budgets, sorted from highest to lowest budget.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the count of sustainable building projects with a completion year after 2019?\\n\\nContext: CREATE TABLE sustainable_building_projects (project_id INT, project_name VARCHAR(100), state VARCHAR(50), completion_year INT); INSERT INTO sustainable_building_projects (project_id, project_name, state, completion_year) VALUES (1, 'GreenTowers', 'California', 2021), (2, 'EcoHQ', 'Texas', 2020), (3, 'SolarVilla', 'Washington', 2019), (4, 'BiomassBuilding', 'Oregon', 2022);<end_of_turn>\\n<start_of_turn>model\\nSELECT COUNT(*) FROM sustainable_building_projects WHERE completion_year > 2019;\\n\\nExplanation: This query calculates the total number of sustainable building projects with a completion year after 2019 by filtering the table based on the completion year and then counting the number of rows using the COUNT function.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nHow many building permits were issued for contractors in Texas?\\n\\nContext: CREATE TABLE Contractors (ContractorID INT, ContractorName VARCHAR(50), City VARCHAR(50), State VARCHAR(2), Country VARCHAR(50)); INSERT INTO Contractors (ContractorID, ContractorName, City, State, Country) VALUES (1, 'DEF Construction', 'Dallas', 'TX', 'USA');<end_of_turn>\\n<start_of_turn>model\\nSELECT ContractorID FROM Contractors WHERE State = 'TX'; SELECT COUNT(PermitID) FROM BuildingPermits WHERE ContractorID IN (SELECT ContractorID FROM Contractors WHERE State = 'TX');\\n\\nExplanation: This query first selects the ContractorID from the Contractors table where the State is 'TX'. The second query then counts the PermitID from the BuildingPermits table where the ContractorID is in the list of ContractorIDs obtained in the first query.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the average age of healthcare providers in the \"rural_clinics\" table, partitioned by clinic location?\\n\\nContext: CREATE TABLE rural_clinics (clinic_location VARCHAR(255), healthcare_provider_age INT); INSERT INTO rural_clinics (clinic_location, healthcare_provider_age) VALUES ('Location1', 35), ('Location1', 40), ('Location2', 50), ('Location2', 55);<end_of_turn>\\n<start_of_turn>model\\nSELECT clinic_location, AVG(healthcare_provider_age) OVER (PARTITION BY clinic_location) FROM rural_clinics;\\n\\nExplanation: The SQL query calculates the average age of healthcare providers in each clinic location by using the window function AVG() with the PARTITION BY clause. This creates a new \"column\" of average healthcare provider age for each unique value in the \"clinic_location\" column.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nHow many users have each mobile operating system?\\n\\nContext: CREATE TABLE mobile_users (user_id INT, username VARCHAR(50), os VARCHAR(20)); INSERT INTO mobile_users VALUES (1, 'User 1', 'Android'); INSERT INTO mobile_users VALUES (2, 'User 2', 'iOS'); INSERT INTO mobile_users VALUES (3, 'User 3', 'Android'); INSERT INTO mobile_users VALUES (4, 'User 4', 'Windows Phone');<end_of_turn>\\n<start_of_turn>model\\nSELECT os, COUNT(*) as user_count FROM mobile_users GROUP BY os;\\n\\nExplanation: This SQL query counts the number of users for each mobile operating system by grouping the results by the os column and then counting the number of rows in each group.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nList the chemical names with their production costs in descending order\\n\\nContext: CREATE TABLE chemical_costs (chemical VARCHAR(20), cost FLOAT); INSERT INTO chemical_costs (chemical, cost) VALUES ('Eco-friendly Polymer', 475.50), ('Nano Polymer', 452.12), ('Smart Polymer', 500.00), ('Carbon Nanotube', 650.00), ('Graphene', 700.00), ('Buckyball', 750.00);<end_of_turn>\\n<start_of_turn>model\\nSELECT chemical, cost FROM chemical_costs ORDER BY cost DESC;\\n\\nExplanation: The SQL query lists the chemical names with their production costs in descending order by ordering the 'cost' column in descending order.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nUpdate the 'encounter_date' column in the 'shark_encounters' table, changing '2021-09-12' to '2022-09-12'\\n\\nContext: CREATE TABLE shark_encounters (encounter_id INT, species VARCHAR(255), encounter_date DATE); INSERT INTO shark_encounters (encounter_id, species, encounter_date) VALUES (1, 'Oceanic Whitetip Shark', '2021-09-12'), (2, 'Great White Shark', '2022-02-05');<end_of_turn>\\n<start_of_turn>model\\nUPDATE shark_encounters SET encounter_date = '2022-09-12' WHERE encounter_date = '2021-09-12';\\n\\nExplanation: This query uses an UPDATE statement to modify the 'encounter_date' column in the shark_encounters table. It changes any instances of '2021-09-12' to '2022-09-12'.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the total number of military personnel trained by the UK in the last fiscal year?\\n\\nContext: CREATE TABLE Training (trainee VARCHAR(255), trainer VARCHAR(255), location VARCHAR(255), start_date DATE, end_date DATE, number_of_trainees INT); INSERT INTO Training (trainee, trainer, location, start_date, end_date, number_of_trainees) VALUES ('US Army', 'UK Army', 'London', '2021-04-01', '2021-06-30', 50);<end_of_turn>\\n<start_of_turn>model\\nSELECT SUM(number_of_trainees) FROM Training WHERE trainer = 'UK' AND start_date >= '2021-04-01' AND end_date <= '2022-03-31';\\n\\nExplanation: The SQL query calculates the total number of military personnel trained by summing the 'number_of_trainees' column where the 'trainer' is 'UK' and the 'start_date' and 'end_date' are within the last fiscal year.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nUpdate the 'city_infrastructure' table to change the status of the project with ID 15 to 'Completed'\\n\\nContext: CREATE TABLE city_infrastructure (project_id INT, project_name VARCHAR(50), project_status VARCHAR(20));<end_of_turn>\\n<start_of_turn>model\\nUPDATE city_infrastructure SET project_status = 'Completed' WHERE project_id = 15;\\n\\nExplanation: This SQL query updates the 'city_infrastructure' table to change the status of the project with ID 15 to 'Completed'. It uses the UPDATE statement, followed by the table name, which is 'city_infrastructure'. The SET keyword is used to specify the new value for the 'project_status' column, and the WHERE clause filters the records to be updated based on the 'project_id' column condition.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nDelete risk assessments for policyholders with the last name 'Lee' from the risk_assessment_table\\n\\nContext: CREATE TABLE risk_assessment_table (assessment_id INT, policy_holder TEXT, risk_score INT); INSERT INTO risk_assessment_table (assessment_id, policy_holder, risk_score) VALUES (1, 'John Smith', 650), (2, 'Jane Doe', 500), (3, 'Mike Johnson', 800), (4, 'Sarah Lee', 700);<end_of_turn>\\n<start_of_turn>model\\nDELETE FROM risk_assessment_table WHERE policy_holder LIKE '%Lee%';\\n\\nExplanation: The SQL query first selects records from the risk_assessment_table table where policy_holder contains the string 'Lee'. It then deletes those records, effectively removing any risk assessments for policyholders with the last name 'Lee'.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the change in the number of tourists visiting India between Q1 and Q2 in 2023?\\n\\nContext: CREATE TABLE quarterly_visitors (id INT, country TEXT, quarter INT, year INT, num_visitors INT); INSERT INTO quarterly_visitors (id, country, quarter, year, num_visitors) VALUES (1, 'India', 1, 2023, 1000000), (2, 'India', 2, 2023, 1100000), (3, 'China', 1, 2023, 1200000);<end_of_turn>\\n<start_of_turn>model\\nSELECT country, (SUM(CASE WHEN quarter = 2 THEN num_visitors ELSE 0 END) - SUM(CASE WHEN quarter = 1 THEN num_visitors ELSE 0 END)) AS change_in_visitors FROM quarterly_visitors WHERE country = 'India' AND year = 2023 GROUP BY country;\\n\\nExplanation: This query calculates the change in the number of tourists visiting India between Q1 and Q2 in 2023 by filtering the quarterly_visitors table for visits to India in those quarters and calculating the difference between the sum of num_visitors in Q2 and the sum of num_visitors in Q1.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nUpdate the labor_practices table to reflect accurate data for company 'ABC Fashion'\\n\\nContext: CREATE TABLE labor_practices (id INT PRIMARY KEY, company VARCHAR(255), workers_treated_fairly INT, child_labor_free BOOLEAN); INSERT INTO labor_practices (id, company, workers_treated_fairly, child_labor_free) VALUES (1, 'XYZ Fashion', 500, true), (2, 'DEF Fashion', 300, false), (3, 'GHI Fashion', 400, true);<end_of_turn>\\n<start_of_turn>model\\nUPDATE labor_practices SET workers_treated_fairly = 450, child_labor_free = true WHERE company = 'ABC Fashion';\\n\\nExplanation: The SQL query updates the labor_practices table to reflect accurate data for 'ABC Fashion' by using the UPDATE statement. The WHERE clause filters the records based on the company name 'ABC Fashion'. The SET clause updates the workers_treated_fairly column to 450 and sets the child_labor_free column to true for the filtered records.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nShow the total amount of funding for programs in 'Theater' category, excluding programs with a budget over $50,000.\\n\\nContext: CREATE TABLE Programs (id INT, name TEXT, category TEXT, budget INT); INSERT INTO Programs (id, name, category, budget) VALUES (1, 'Dance Performance', 'Theater', 50000), (2, 'Film Festival', 'Music', 75000), (3, 'Photography Exhibition', 'Visual Arts', 100000);<end_of_turn>\\n<start_of_turn>model\\nSELECT SUM(budget) FROM Programs WHERE category = 'Theater' AND budget <= 50000;\\n\\nExplanation: The SQL query uses the SELECT statement with the SUM keyword to get the total amount of funding for programs in 'Theater' category, excluding programs with a budget over $50,000. It uses the WHERE clause to filter the records based on category and budget.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhich clinical trials have a 'COMPLETED' status for drug 'D002'?\\n\\nContext: CREATE TABLE clinical_trials (drug_id VARCHAR(10), trial_status VARCHAR(10));<end_of_turn>\\n<start_of_turn>model\\nSELECT * FROM clinical_trials WHERE drug_id = 'D002' AND trial_status = 'COMPLETED';\\n\\nExplanation: This query retrieves all clinical trials for drug 'D002' with a 'COMPLETED' status by selecting all rows where 'drug_id' is 'D002' and 'trial_status' is 'COMPLETED'.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the total number of employees by role at each mining site?\\n\\nContext: CREATE TABLE mining_sites(id INT, name VARCHAR, location VARCHAR); CREATE TABLE employees(site_id INT, gender VARCHAR, role VARCHAR); INSERT INTO mining_sites(id, name, location) VALUES (1, 'Delta Mining', 'Northern MN'), (2, 'Echo Mining', 'Southern MN'); INSERT INTO employees(site_id, gender, role) VALUES (1, 'Male', 'Engineer'), (1, 'Female', 'Operator'), (2, 'Male', 'Manager'), (2, 'Female', 'Engineer');<end_of_turn>\\n<start_of_turn>model\\nSELECT mining_sites.name, role, COUNT(*) FROM mining_sites INNER JOIN employees ON mining_sites.id = employees.site_id GROUP BY mining_sites.name, role;\\n\\nExplanation: This SQL query displays the total number of employees by role at each mining site by using a join to combine the mining_sites and employees tables based on the site_id column. It then groups the results by the name of each mining site and the role of each employee, and calculates the count of employees for each group using the COUNT function. The resulting table displays the name of each mining site, the role of each employee, and the total number of employees with that role at that site.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the average financial wellbeing score for males and females in the US?\\n\\nContext: CREATE TABLE financial_wellbeing (id INTEGER, name TEXT, gender TEXT, score INTEGER, country TEXT); INSERT INTO financial_wellbeing (id, name, gender, score, country) VALUES (1, 'John Doe', 'Male', 70, 'USA'), (2, 'Jane Doe', 'Female', 75, 'USA');<end_of_turn>\\n<start_of_turn>model\\nSELECT gender, AVG(score) FROM financial_wellbeing WHERE country = 'USA' GROUP BY gender;\\n\\nExplanation: This query calculates the average financial wellbeing score for each gender in the US by using AVG function on score column and GROUP BY gender.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the total number of crewed missions to the International Space Station?\\n\\nContext: CREATE TABLE ISSMissions (id INT, mission_date DATE, crewed BOOLEAN);<end_of_turn>\\n<start_of_turn>model\\nSELECT COUNT(*) FROM ISSMissions WHERE crewed = TRUE;\\n\\nExplanation: The SQL query counts the total number of crewed missions to the International Space Station. It does this by selecting the COUNT function on all rows (*) and filtering rows with 'crewed' column value of TRUE.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the total landfill capacity (in cubic meters) for the 'eastern' region in 2022?\\n\\nContext: CREATE TABLE landfill_capacity(region VARCHAR(10), year INT, capacity INT); INSERT INTO landfill_capacity VALUES('eastern', 2021, 500000), ('eastern', 2022, 550000), ('western', 2021, 600000), ('western', 2022, 650000);<end_of_turn>\\n<start_of_turn>model\\nSELECT capacity FROM landfill_capacity WHERE region = 'eastern' AND year = 2022;\\n\\nExplanation: The SQL query returns the landfill capacity for the eastern region in the year 2022.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhich player has scored the most points in the last 5 games?\\n\\nContext: CREATE TABLE points (player TEXT, points INT, game_date DATE); INSERT INTO points (player, points, game_date) VALUES ('Player A', 30, '2023-03-01'), ('Player B', 25, '2023-03-01');<end_of_turn>\\n<start_of_turn>model\\nSELECT player, SUM(points) OVER (PARTITION BY player ORDER BY game_date DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 4 PRECEDING) as total_points FROM points WHERE game_date >= DATEADD(day, -5, CURRENT_DATE);\\n\\nExplanation: This SQL query determines the player who has scored the most points in the last 5 games. It partitions the data by 'player', sums the 'points' for the last 5 games in descending order by 'game_date' using the window function SUM(), and filters the data for the last 5 days using the WHERE clause.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the prevalence of diabetes in \"Michigan\" rural areas\\n\\nContext: CREATE TABLE diabetes_prevalence(id INT, location TEXT, population INT, diabetes_cases INT); INSERT INTO diabetes_prevalence(id, location, population, diabetes_cases) VALUES (1, 'Michigan Rural Area', 4000, 600), (2, 'Michigan Urban Area', 12000, 1800), (3, 'Ohio Rural Area', 5000, 750), (4, 'Ohio Urban Area', 15000, 2250);<end_of_turn>\\n<start_of_turn>model\\nSELECT diabetes_cases\/population FROM diabetes_prevalence WHERE location LIKE '%Michigan Rural Area%';\\n\\nExplanation: This query calculates the prevalence of diabetes in \"Michigan\" rural areas by dividing the number of diabetes cases by the population.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nFind the top 2 countries with the most virtual tourism sessions in Q4 2023, excluding the 'Asia' region.\\n\\nContext: CREATE TABLE virtual_tourism (id INT, country VARCHAR(50), num_sessions INT, session_date DATE, region VARCHAR(50)); INSERT INTO virtual_tourism (id, country, num_sessions, session_date, region) VALUES (1, 'USA', 2500, '2023-01-01', 'North America'), (2, 'Canada', 1800, '2023-01-02', 'North America'), (3, 'Australia', 3000, '2023-10-01', 'Oceania');<end_of_turn>\\n<start_of_turn>model\\nSELECT country, SUM(num_sessions) as total_sessions FROM virtual_tourism WHERE session_date BETWEEN '2023-10-01' AND '2023-12-31' AND region != 'Asia' GROUP BY country ORDER BY total_sessions DESC LIMIT 2;\\n\\nExplanation: The SQL query calculates the total number of virtual tourism sessions for each country in Q4 2023, excluding the 'Asia' region, and then groups, orders, and limits the results to find the top 2 countries with the most sessions.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nNumber of impact investments in the healthcare sector with an ESG score above 80?\\n\\nContext: CREATE TABLE impact_investments (id INT, sector VARCHAR(20), ESG_score FLOAT); INSERT INTO impact_investments (id, sector, ESG_score) VALUES (1, 'Healthcare', 85.0), (2, 'Education', 70.0), (3, 'Healthcare', 65.0);<end_of_turn>\\n<start_of_turn>model\\nSELECT COUNT(*) FROM impact_investments WHERE sector = 'Healthcare' AND ESG_score > 80;\\n\\nExplanation: Count the number of impact investments in the healthcare sector with an ESG score above 80 by selecting all records with 'Healthcare' as the sector and a score greater than 80 in the ESG_score column, and counting the number of records.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nHow many seals are there in the 'seals' table?\\n\\nContext: CREATE TABLE seals (id INT, name VARCHAR(255), location VARCHAR(255));<end_of_turn>\\n<start_of_turn>model\\nSELECT COUNT(*) FROM seals;\\n\\nExplanation: This query counts all the seals in the 'seals' table by using the COUNT function to count all rows.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the minimum project timeline for residential building projects in Texas?\\n\\nContext: CREATE TABLE project_timeline (project_id INT, state VARCHAR(2), type VARCHAR(20), timeline INT); INSERT INTO project_timeline (project_id, state, type, timeline) VALUES (1, 'TX', 'Residential', 180);<end_of_turn>\\n<start_of_turn>model\\nSELECT MIN(timeline) FROM project_timeline WHERE state = 'TX' AND type = 'Residential';\\n\\nExplanation: This query identifies the minimum project timeline for residential building projects in Texas by selecting all records that meet the specified criteria and calculating the minimum timeline for those projects.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nIdentify the mental health condition with the highest improvement rate for patients in Oceania, along with the associated treatment approach.\\n\\nContext: CREATE TABLE improvements (id INT, condition TEXT, approach TEXT, region TEXT, improvement FLOAT); INSERT INTO improvements (id, condition, approach, region, improvement) VALUES (1, 'Depression', 'CBT', 'Oceania', 0.8), (2, 'Anxiety', 'DBT', 'Oceania', 0.7), (3, 'PTSD', 'EMDR', 'Oceania', 0.9), (4, 'Depression', 'Medication', 'Oceania', 0.6);<end_of_turn>\\n<start_of_turn>model\\nSELECT condition, approach, MAX(improvement) as max_improvement FROM improvements WHERE region = 'Oceania' GROUP BY condition, approach;\\n\\nExplanation: Partition the data by mental health condition and treatment approach in Oceania, then order by improvement in descending order to identify the condition with the highest improvement rate for patients in Oceania.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the total amount of water conserved in the state of New York due to water conservation initiatives?\\n\\nContext: CREATE TABLE Water_Conservation_Initiatives (ID INT, Initiative VARCHAR(50), State VARCHAR(20), Water_Saved FLOAT);<end_of_turn>\\n<start_of_turn>model\\nSELECT SUM(Water_Saved) FROM Water_Conservation_Initiatives WHERE State = 'New York';\\n\\nExplanation: This query calculates the total amount of water conserved in the state of New York due to water conservation initiatives by filtering the Water_Conservation_Initiatives table for rows where the State column is 'New York' and then computing the sum of the Water_Saved column values.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nDelete the athlete demographics table\\n\\nContext: athlete_demographics<end_of_turn>\\n<start_of_turn>model\\nDROP TABLE IF EXISTS athlete_demographics;\\n\\nExplanation: This statement drops the athlete_demographics table if it exists.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nHow many companies were founded by women in the last 10 years?\\n\\nContext: CREATE TABLE founders (id INT, name VARCHAR(50), gender VARCHAR(10)); CREATE TABLE companies (id INT, name VARCHAR(50), founding_date DATE, founder_id INT);<end_of_turn>\\n<start_of_turn>model\\nSELECT COUNT(*) AS companies_founded_by_women FROM companies c JOIN founders f ON c.founder_id = f.id WHERE f.gender = 'Female' AND c.founding_date >= DATE_SUB(CURRENT_DATE, INTERVAL 10 YEAR);\\n\\nExplanation: This query joins the companies and founders tables on the appropriate ID and filters for female founders based on the gender column in the founders table. It also filters for companies founded in the last 10 years based on the founding_date column in the companies table. Finally, it counts the number of companies founded by women in the last 10 years.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nUpdate the water consumption of 'Jade Jamboree' in 2019 to 22000.\\n\\nContext: CREATE TABLE Water_Consumption_Records (Mine_Name VARCHAR(50), Water_Consumption FLOAT, Year INT); INSERT INTO Water_Consumption_Records (Mine_Name, Water_Consumption, Year) VALUES ('Jade Jamboree', 25000.0, 2019), ('Crystal Caverns', 24000.1, 2019), ('Gemstone Galleries', 26000.5, 2019);<end_of_turn>\\n<start_of_turn>model\\nUPDATE Water_Consumption_Records SET Water_Consumption = 22000 WHERE Mine_Name = 'Jade Jamboree' AND Year = 2019;\\n\\nExplanation: This query updates the water consumption value for 'Jade Jamboree' in the 2019 Water_Consumption_Records table to 22000.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the difference between the total donations for 'Habitats for Tigers' and 'Habitats for Lions'?\\n\\nContext: CREATE TABLE Donations (id INT, campaign VARCHAR(255), amount DECIMAL(10, 2));<end_of_turn>\\n<start_of_turn>model\\nSELECT (SELECT SUM(amount) FROM Donations WHERE campaign = 'Habitats for Tigers') - (SELECT SUM(amount) FROM Donations WHERE campaign = 'Habitats for Lions');\\n\\nExplanation: This query calculates the difference between the total donations for the 'Habitats for Tigers' and 'Habitats for Lions' campaigns by subtracting the sum of the 'amount' column in the 'Donations' table where the 'campaign' is 'Habitats for Lions' from the sum where the 'campaign' is 'Habitats for Tigers'.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the most common treatment approach among patients aged 40-50?\\n\\nContext: CREATE TABLE treatments (patient_id INT, age INT, treatment_type VARCHAR(50)); INSERT INTO treatments (patient_id, age, treatment_type) VALUES (1, 45, 'CBT'); INSERT INTO treatments (patient_id, age, treatment_type) VALUES (2, 50, 'DBT'); INSERT INTO treatments (patient_id, age, treatment_type) VALUES (3, 42, 'Mindfulness'); INSERT INTO treatments (patient_id, age, treatment_type) VALUES (4, 48, 'CBT'); INSERT INTO treatments (patient_id, age, treatment_type) VALUES (5, 39, 'DBT');<end_of_turn>\\n<start_of_turn>model\\nSELECT treatment_type, COUNT(*) as count FROM treatments WHERE age BETWEEN 40 AND 50 GROUP BY treatment_type ORDER BY count DESC LIMIT 1;\\n\\nExplanation: This query finds the most common treatment approach among patients aged 40-50. It does this by using the GROUP BY clause to group records by the 'treatment_type' column and the WHERE clause to filter records where the 'age' column is between 40 and 50. Then, it orders the results by the 'count' column in descending order and limits the results to the top 1.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWho is the volunteer with the least hours in program 'Health'?\\n\\nContext: CREATE TABLE Volunteers (volunteer_id INT, volunteer_name VARCHAR(255), program_id INT, hours DECIMAL(10, 2)); INSERT INTO Volunteers (volunteer_id, volunteer_name, program_id, hours) VALUES (1, 'Hannah', 5, 30.00), (2, 'Ivy', 4, 40.00), (3, 'Jack', 2, 25.00), (4, 'Katie', 5, 20.00), (5, 'Liam', 3, 50.00), (6, 'Mia', 1, 35.00), (7, 'Noah', 4, 15.00);<end_of_turn>\\n<start_of_turn>model\\nSELECT volunteer_name, SUM(hours) AS total_hours FROM Volunteers WHERE program_id = 5 GROUP BY volunteer_name ORDER BY total_hours ASC LIMIT 1;\\n\\nExplanation: This query retrieves the volunteer with the least hours in program 'Health' (program_id = 5) by grouping the Volunteers table by the 'volunteer_name' column, summing the 'hours' column, and ordering the result set by the summed amount in ascending order. It limits the result set to a single row, which is the volunteer with the least hours.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the difference in average permit cost between commercial and residential buildings in California in 2021?\\n\\nContext: CREATE TABLE permit_cost_comparison (cost_id INT, state VARCHAR(50), building_type VARCHAR(50), permit_cost FLOAT, material_type VARCHAR(50), issue_date DATE); INSERT INTO permit_cost_comparison (cost_id, state, building_type, permit_cost, material_type, issue_date) VALUES (1, 'California', 'Commercial', 400000.00, 'Sustainable', '2021-01-01'); INSERT INTO permit_cost_comparison (cost_id, state, building_type, permit_cost, material_type, issue_date) VALUES (2, 'California', 'Residential', 200000.00, 'Sustainable', '2021-01-10');<end_of_turn>\\n<start_of_turn>model\\nSELECT AVG(permit_cost) - LAG(AVG(permit_cost)) OVER (PARTITION BY state ORDER BY EXTRACT(YEAR FROM issue_date)) FROM permit_cost_comparison WHERE state = 'California' AND building_type IN ('Commercial', 'Residential') AND issue_date BETWEEN '2021-01-01' AND '2021-12-31';\\n\\nExplanation: Calculates the difference in average permit cost between commercial and residential buildings in California in 2021<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the average agricultural innovation investment per country in Africa?\\n\\nContext: CREATE TABLE investment (id INT, project TEXT, location TEXT, investment_amount INT, year INT); INSERT INTO investment (id, project, location, investment_amount, year) VALUES (1, 'Potato Seed Project', 'Kenya', 200000, 2018), (2, 'Corn Seed Project', 'Nigeria', 300000, 2019), (3, 'Rice Seed Project', 'Tanzania', 150000, 2017), (4, 'Wheat Seed Project', 'Ethiopia', 250000, 2020);<end_of_turn>\\n<start_of_turn>model\\nSELECT AVG(investment_amount) FROM investment WHERE location LIKE 'Africa%' GROUP BY location;\\n\\nExplanation: Calculate the average investment in agricultural innovation per country in Africa by filtering records with location starting from 'Africa', then grouping them by location.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nFind the average billing rate for attorneys who have handled more than 5 cases.\\n\\nContext: CREATE TABLE Attorneys (id INT, cases INT, billing_rate DECIMAL(5,2));<end_of_turn>\\n<start_of_turn>model\\nSELECT AVG(billing_rate) FROM Attorneys WHERE cases > 5;\\n\\nExplanation: The SQL query calculates the average billing rate for attorneys who have handled more than 5 cases using AVG and WHERE.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nList all the community development initiatives in 'rural_development' database for regions with a population density greater than 500 people per square kilometer.\\n\\nContext: CREATE TABLE community_development (id INT, initiative_name TEXT, region TEXT, population_density FLOAT); INSERT INTO community_development (id, initiative_name, region, population_density) VALUES (1, 'CommunityDevA', 'Region1', 600); INSERT INTO community_development (id, initiative_name, region, population_density) VALUES (2, 'CommunityDevB', 'Region2', 450);<end_of_turn>\\n<start_of_turn>model\\nSELECT community_development.initiative_name FROM community_development WHERE community_development.population_density > 500;\\n\\nExplanation: This query lists all the community development initiatives in the 'community_development' table for regions with a population density greater than 500 people per square kilometer. It uses the WHERE clause to filter out any records where the population density is less than or equal to 500.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the total checking account balance for customers in the Denver branch?\\n\\nContext: CREATE TABLE accounts (customer_id INT, account_type VARCHAR(20), branch VARCHAR(20), balance DECIMAL(10,2)); INSERT INTO accounts (customer_id, account_type, branch, balance) VALUES (1, 'Savings', 'New York', 5000.00), (2, 'Checking', 'New York', 7000.00), (3, 'Checking', 'Denver', 3000.00), (4, 'Savings', 'Denver', 4000.00);<end_of_turn>\\n<start_of_turn>model\\nSELECT SUM(balance) FROM accounts WHERE account_type = 'Checking' AND branch = 'Denver';\\n\\nExplanation: This query adds up the balance column for all rows where the account_type is 'Checking' and the branch is 'Denver'.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the earliest launch date of any satellite that is still in orbit?\\n\\nContext: CREATE TABLE satellites (satellite_id INT, satellite_name VARCHAR(100), country VARCHAR(50), launch_date DATE, in_orbit BOOLEAN); INSERT INTO satellites (satellite_id, satellite_name, country, launch_date, in_orbit) VALUES (1, 'Sputnik 1', 'Russia', '1957-10-04', TRUE); INSERT INTO satellites (satellite_id, satellite_name, country, launch_date, in_orbit) VALUES (2, 'Explorer 1', 'United States', '1958-01-31', TRUE);<end_of_turn>\\n<start_of_turn>model\\nSELECT MIN(launch_date) FROM satellites WHERE in_orbit = TRUE;\\n\\nExplanation: This query retrieves the earliest launch date of any satellite that is still in orbit by using the MIN() function and the WHERE clause to filter the records in the satellites table based on the in_orbit column value.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nHow many accessible technology patents were granted to women-led teams?\\n\\nContext: CREATE TABLE patents (id INT, is_women_led BOOLEAN, is_accessible BOOLEAN); INSERT INTO patents (id, is_women_led, is_accessible) VALUES (1, true, true), (2, false, true), (3, true, false);<end_of_turn>\\n<start_of_turn>model\\nSELECT COUNT(*) FROM patents WHERE is_women_led = true AND is_accessible = true;\\n\\nExplanation: This query counts the number of patents granted to women-led teams for accessible technology. It does this by using the COUNT() function on all rows, filtering the table for rows where is_women_led is true and is_accessible is true.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the most recent art piece in the 'Pop Art' style?\\n\\nContext: CREATE TABLE ArtPieces (id INT, title VARCHAR(50), galleryId INT, year INT, value INT, style VARCHAR(20)); INSERT INTO ArtPieces (id, title, galleryId, year, value, style) VALUES (1, 'Piece 1', 1, 2000, 10000, 'Impressionism'), (2, 'Piece 2', 1, 2010, 15000, 'Surrealism'), (3, 'Piece 3', 2, 2020, 20000, 'Cubism'), (4, 'Piece 4', 3, 1990, 5000, 'Surrealism'), (5, 'Piece 5', NULL, 1984, 25000, 'Impressionism'), (6, 'Piece 6', NULL, 2014, 30000, 'Abstract'), (7, 'Piece 7', NULL, 1964, 15000, 'Pop Art');<end_of_turn>\\n<start_of_turn>model\\nSELECT title, year FROM ArtPieces WHERE style = 'Pop Art' ORDER BY year DESC LIMIT 1;\\n\\nExplanation: This query filters art pieces by the 'style' column and selects the title and year where 'style' is 'Pop Art', ordered by the 'year' column in descending order and limited to one record. It returns the title and year of the most recent art piece in the 'Pop Art' style.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nList all public transportation systems in the public_transportation table\\n\\nContext: CREATE TABLE public_transportation (id INT PRIMARY KEY, system_name VARCHAR(255), system_type VARCHAR(255), location VARCHAR(255), operating_hours TIMESTAMP);<end_of_turn>\\n<start_of_turn>model\\nSELECT system_name FROM public_transportation;\\n\\nExplanation: The prompt requires listing all public transportation systems in the public_transportation table. The SQL statement selects the system_name column from the public_transportation table, which returns all the systems.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhich maritime laws were enacted in the Mediterranean Sea since 2010?\\n\\nContext: CREATE TABLE maritime_laws (region TEXT, year INT, law_name TEXT); INSERT INTO maritime_laws (region, year, law_name) VALUES ('Mediterranean Sea', 2010, 'MARPOL Annex V'); INSERT INTO maritime_laws (region, year, law_name) VALUES ('Mediterranean Sea', 2012, 'MSFD'); INSERT INTO maritime_laws (region, year, law_name) VALUES ('Mediterranean Sea', 2015, 'IMO Paris MOU');<end_of_turn>\\n<start_of_turn>model\\nSELECT * FROM maritime_laws WHERE region = 'Mediterranean Sea' AND year >= 2010;\\n\\nExplanation: This query uses a simple filter on the maritime_laws table to retrieve all the laws enacted in the Mediterranean Sea since 2010.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nList the top 3 news categories with the highest number of articles in the \"articles\" table.\\n\\nContext: CREATE TABLE articles (article_id INT, title VARCHAR(100), category VARCHAR(50), publication_date DATE, views INT); INSERT INTO articles (article_id, title, category, publication_date, views) VALUES (1, 'News from the Capital', 'Politics', '2022-01-01', 1500), (2, 'Tech Innovations in 2022', 'Technology', '2022-01-02', 1200), (3, 'The Art of Persuasion', 'Psychology', '2022-01-03', 1800), (4, 'Education Reforms in Europe', 'Education', '2022-01-04', 1000);<end_of_turn>\\n<start_of_turn>model\\nSELECT category, COUNT(*) as article_count FROM articles GROUP BY category ORDER BY article_count DESC LIMIT 3;\\n\\nExplanation: This SQL query lists the top 3 news categories with the highest number of articles in the \"articles\" table by using the COUNT function on the \"category\" column, grouping the data by the \"category\" column, and ordering the results in descending order by the count. The LIMIT keyword is used to limit the results to the top 3.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nList the names of the volunteers who have participated in disaster response training programs and their respective trainers, including the organization they represent.\\n\\nContext: CREATE TABLE Volunteers (id INT, name TEXT, organization TEXT); INSERT INTO Volunteers (id, name, organization) VALUES (1, 'Alex', 'Red Cross'), (2, 'Jamie', 'Doctors Without Borders'), (3, 'Sophia', 'World Vision'); CREATE TABLE Trainers (id INT, name TEXT, organization TEXT); INSERT INTO Trainers (id, name, organization) VALUES (4, 'Mark', 'Red Cross'), (5, 'Emily', 'Doctors Without Borders'), (6, 'Oliver', 'World Vision'); CREATE TABLE Training_Programs (id INT, trainer_id INT, volunteer_id INT, program TEXT, date DATE); INSERT INTO Training_Programs (id, trainer_id, volunteer_id, program, date) VALUES (1, 4, 1, 'Disaster Response', '2022-02-15'), (2, 5, 2, 'Disaster Response', '2022-02-16'), (3, 6, 3, 'Disaster Response', '2022-02-17');<end_of_turn>\\n<start_of_turn>model\\nSELECT V.name as volunteer_name, T.name as trainer_name, T.organization as trainer_organization FROM Volunteers V INNER JOIN Training_Programs TP ON V.id = TP.volunteer_id INNER JOIN Trainers T ON TP.trainer_id = T.id WHERE TP.program = 'Disaster Response';\\n\\nExplanation: The SQL query performs an inner join between the Volunteers and Training_Programs tables on the id and volunteer_id columns respectively, and another inner join between the Training_Programs and Trainers tables on the trainer_id and id columns. It then filters the records based on the program name. Finally, it selects the names of the volunteers and trainers along with the organization of the trainers.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the average number of views per article in the \"articles\" table for each category?\\n\\nContext: CREATE TABLE articles (article_id INT, title VARCHAR(100), category VARCHAR(50), publication_date DATE, views INT); INSERT INTO articles (article_id, title, category, publication_date, views) VALUES (1, 'News from the Capital', 'Politics', '2022-01-01', 1500), (2, 'Tech Innovations in 2022', 'Technology', '2022-01-02', 1200), (3, 'The Art of Persuasion', 'Psychology', '2022-01-03', 1800), (4, 'Education Reforms in Europe', 'Education', '2022-01-04', 1000);<end_of_turn>\\n<start_of_turn>model\\nSELECT category, AVG(views) as avg_views FROM articles GROUP BY category;\\n\\nExplanation: This SQL query calculates the average number of views per article in the \"articles\" table for each category by using the AVG function on the \"views\" column, and grouping the data by the \"category\" column.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nAdd new column to impact_investments table\\n\\nContext: CREATE TABLE impact_investments (id INT PRIMARY KEY, name VARCHAR(100), amount INT, sector VARCHAR(20));<end_of_turn>\\n<start_of_turn>model\\nALTER TABLE impact_investments ADD COLUMN region VARCHAR(10);\\n\\nExplanation: This query adds a new column named 'region' to the impact_investments table.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nList all programs and their corresponding volunteer engagement metrics for 2022, ordered by the highest number of volunteers?\\n\\nContext: CREATE TABLE Programs (ProgramID INT, ProgramName TEXT, Budget FLOAT); CREATE TABLE VolunteerPrograms (VolunteerID INT, ProgramID INT, VolunteerDate DATE); INSERT INTO Programs (ProgramID, ProgramName, Budget) VALUES (1, 'Education', 10000.00), (2, 'Health', 15000.00); INSERT INTO VolunteerPrograms (VolunteerID, ProgramID, VolunteerDate) VALUES (1, 1, '2022-01-01'), (2, 1, '2022-02-01'), (3, 2, '2022-03-01'), (4, 2, '2022-04-01');<end_of_turn>\\n<start_of_turn>model\\nSELECT Programs.ProgramName, COUNT(DISTINCT VolunteerPrograms.VolunteerID) as VolunteerCount FROM Programs INNER JOIN VolunteerPrograms ON Programs.ProgramID = VolunteerPrograms.ProgramID WHERE YEAR(VolunteerPrograms.VolunteerDate) = 2022 GROUP BY Programs.ProgramName ORDER BY VolunteerCount DESC;\\n\\nExplanation: This SQL query retrieves the ProgramName and VolunteerCount columns by using an INNER JOIN between the Programs and VolunteerPrograms tables, joining the ProgramID columns in both tables. The results are then filtered based on the YEAR() function for the VolunteerDate column and grouped by the ProgramName column. The COUNT(DISTINCT VolunteerID) function is used to count the number of unique volunteers for each program. The results are then sorted in descending order based on the VolunteerCount column, displaying all programs and their corresponding volunteer engagement metrics for 2022, ordered by the highest number of volunteers.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nFind the number of games played in each city in the game_results table.\\n\\nContext: CREATE TABLE game_results (game_id INT, home_team VARCHAR(20), away_team VARCHAR(20), home_score INT, away_score INT, city VARCHAR(20), stadium VARCHAR(50));<end_of_turn>\\n<start_of_turn>model\\nSELECT city, COUNT(*) as num_games FROM game_results GROUP BY city;\\n\\nExplanation: This query calculates the number of games played in each city in the game_results table by grouping the table by the city column and counting the number of rows in each group.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat are the top 3 most common incident types in the 'IncidentReports' table?\\n\\nContext: CREATE TABLE IncidentReports (id INT, incident_name VARCHAR(50), severity VARCHAR(10), incident_type VARCHAR(50)); INSERT INTO IncidentReports (id, incident_name, severity, incident_type) VALUES (1, 'Incident1', 'High', 'Malware'), (2, 'Incident2', 'Medium', 'Phishing'), (3, 'Incident3', 'Low', 'Unpatched Software'), (4, 'Incident4', 'High', 'SQL Injection'), (5, 'Incident5', 'Low', 'Denial of Service');<end_of_turn>\\n<start_of_turn>model\\nSELECT incident_type, COUNT(*) as frequency FROM IncidentReports GROUP BY incident_type ORDER BY frequency DESC LIMIT 3;\\n\\nExplanation: This query groups the incidents in the IncidentReports table by incident_type and counts the number of occurrences for each incident type. It then orders the results in descending order by the frequency and returns the top 3 most common incident types in the IncidentReports table.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the total number of defense diplomacy events and their budgets for each year since 2016?\\n\\nContext: CREATE TABLE defense_diplomacy (id INT, event_name VARCHAR(50), region VARCHAR(50), year INT, budget INT);<end_of_turn>\\n<start_of_turn>model\\nSELECT year, COUNT(*), SUM(budget) FROM defense_diplomacy WHERE year >= 2016 GROUP BY year;\\n\\nExplanation: This query calculates the total number of defense diplomacy events and their budgets for each year since 2016. It does this by selecting the year, COUNT and SUM of the budget column, filtering for events that took place since 2016 and grouping by year.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nHow many crimes were reported in 'park' neighborhood in January?\\n\\nContext: CREATE TABLE crimes (id INT, date DATE, neighborhood VARCHAR(20)); INSERT INTO crimes (id, date, neighborhood) VALUES (1, '2022-01-01', 'park'), (2, '2022-02-01', 'park'), (3, '2022-01-05', 'square');<end_of_turn>\\n<start_of_turn>model\\nSELECT COUNT(*) FROM crimes WHERE neighborhood = 'park' AND date BETWEEN '2022-01-01' AND '2022-01-31';\\n\\nExplanation: The SQL query counts the number of crimes reported in 'park' neighborhood in January by using the COUNT() function with a WHERE clause to filter the data by the neighborhood and date columns, and the BETWEEN operator to specify the range of dates.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nInsert new records into the games table and update the corresponding esports_games table\\n\\nContext: CREATE TABLE games (id INT PRIMARY KEY, name TEXT); CREATE TABLE esports_games (id INT PRIMARY KEY, game_id INT, teams_count INT);<end_of_turn>\\n<start_of_turn>model\\nINSERT INTO games (id, name) VALUES (1, 'Dota 2'), (2, 'CS:GO'); UPDATE esports_games SET game_id = CASE WHEN id = 1 THEN 1 WHEN id = 2 THEN 2 ELSE NULL END WHERE game_id IS NULL;\\n\\nExplanation: This query inserts new records into the games table for 'Dota 2' and 'CS:GO', and then updates the esports_games table to assign the corresponding game_id values to existing records based on the id values.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nDelete the 'rural_farmers' table\\n\\nContext: CREATE TABLE rural_farmers (id INT PRIMARY KEY, name VARCHAR(50), age INT, gender VARCHAR(10), location VARCHAR(50), profession VARCHAR(50)); INSERT INTO rural_farmers (id, name, age, gender, location, profession) VALUES (1, 'John Doe', 35, 'Male', 'USA', 'Farmer'), (2, 'Jane Smith', 40, 'Female', 'Canada', 'Farmer');<end_of_turn>\\n<start_of_turn>model\\nDROP TABLE rural_farmers;\\n\\nExplanation: This command deletes the 'rural_farmers' table, removing it and all data from the database.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nIdentify the military equipment with the highest total sales quantity for the year 2020.\\n\\nContext: CREATE TABLE Sales (Sale_ID INT, Equipment_ID INT, Quantity INT, Sale_Date DATE); INSERT INTO Sales (Sale_ID, Equipment_ID, Quantity, Sale_Date) VALUES (1, 1, 25, '2020-01-01'), (2, 2, 50, '2019-12-15'), (3, 3, 30, '2020-03-20'); CREATE TABLE Equipment (Equipment_ID INT, Equipment_Name VARCHAR(50), Supplier_ID INT, Unit_Price DECIMAL(10,2)); INSERT INTO Equipment (Equipment_ID, Equipment_Name, Supplier_ID, Unit_Price) VALUES (1, 'K9 Thunder', 1, 8500000), (2, 'Marder IFV', 2, 4500000), (3, 'CV90 Infantry Fighting Vehicle', 3, 5000000);<end_of_turn>\\n<start_of_turn>model\\nSELECT E.Equipment_Name, SUM(S.Quantity) AS 'Total Quantity Sold' FROM Sales S JOIN Equipment E ON S.Equipment_ID = E.Equipment_ID WHERE YEAR(S.Sale_Date) = 2020 GROUP BY E.Equipment_Name ORDER BY SUM(S.Quantity) DESC LIMIT 1;\\n\\nExplanation: The SQL query joins the Sales and Equipment tables and filters the data for the year 2020. The query groups the data by equipment name and calculates the total quantity sold for each equipment. The query orders the data by the total quantity sold in descending order and returns the equipment name with the highest total sales quantity. The query renames the columns as specified in the prompt.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the average response time for police assistance requests in each sector?\\n\\nContext: CREATE TABLE police_assistance (id INT, sector VARCHAR(50), response_time INT); INSERT INTO police_assistance (id, sector, response_time) VALUES (1, 'Sector A', 7), (2, 'Sector B', 9), (3, 'Sector C', 8);<end_of_turn>\\n<start_of_turn>model\\nSELECT sector, AVG(response_time) FROM police_assistance GROUP BY sector;\\n\\nExplanation: The SQL query groups the police assistance requests by sector and calculates the average response time for each sector.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nDelete the record with service_id 2 from the 'Public_Services' table\\n\\nContext: CREATE TABLE Public_Services( service_id INT PRIMARY KEY, service_name VARCHAR(255), location VARCHAR(255), budget FLOAT, created_date DATE);  INSERT INTO Public_Services (service_id, service_name, location, budget, created_date) VALUES (1, 'Road Maintenance', 'NYC', 5000000.00, '2022-01-01'), (2, 'Waste Management', 'NYC', 7000000.00, '2022-01-02'), (3, 'Street Lighting', 'San Francisco', 3000000.00, '2022-01-03');<end_of_turn>\\n<start_of_turn>model\\nDELETE FROM Public_Services WHERE service_id = 2;\\n\\nExplanation: This SQL query deletes the record with service_id = 2 from the 'Public_Services' table.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the average carbon sequestration rate, in metric tons per hectare per year, for boreal forests in Canada and Russia?\\n\\nContext: CREATE TABLE carbon_sequestration (forest_type VARCHAR(30), country VARCHAR(20), sequestration_rate FLOAT); INSERT INTO carbon_sequestration (forest_type, country, sequestration_rate) VALUES ('Boreal Forest', 'Canada', 1.23), ('Boreal Forest', 'Russia', 2.34);<end_of_turn>\\n<start_of_turn>model\\nSELECT AVG(sequestration_rate) FROM carbon_sequestration WHERE forest_type = 'Boreal Forest' AND country IN ('Canada', 'Russia');\\n\\nExplanation: The SQL query calculates the average carbon sequestration rate for boreal forests in Canada and Russia by using the IN operator to filter the table to only those rows where the forest type is Boreal Forest and the country is Canada or Russia, then using the AVG function to calculate the average sequestration_rate value for those rows.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the total amount of funding received by each school district for mental health programs by state?\\n\\nContext: CREATE TABLE school_districts (sd_id INT, district_name VARCHAR(50), state VARCHAR(50), total_funding FLOAT); INSERT INTO school_districts (sd_id, district_name, state, total_funding) VALUES (1, 'District A', 'California', 50000), (2, 'District B', 'Texas', 75000), (3, 'District C', 'New York', 60000);<end_of_turn>\\n<start_of_turn>model\\nSELECT state, SUM(total_funding) as total_mental_health_funding FROM school_districts GROUP BY state;\\n\\nExplanation: This query calculates the total amount of funding received by each school district for mental health programs by state. It does so by grouping the school_districts table by the state column and then calculating the sum of the total_funding column for each group.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the average word count of articles published in the last month?\\n\\nContext: CREATE TABLE articles (id INT, title VARCHAR(50), topic VARCHAR(50), word_count INT, publish_date DATE); INSERT INTO articles (id, title, topic, word_count, publish_date) VALUES (1, 'Article 1', 'topic1', 1500, '2022-01-01'), (2, 'Article 2', 'topic2', 1000, '2022-02-01');<end_of_turn>\\n<start_of_turn>model\\nSELECT AVG(word_count) FROM articles WHERE publish_date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH);\\n\\nExplanation: This query calculates the average word count of articles published in the last month by selecting the AVG function on the 'word_count' column where the 'publish_date' column is greater than or equal to the date one month ago.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nFind the average donation per campaign in the 'campaigns' table.\\n\\nContext: CREATE TABLE campaigns (campaign_id INT, campaign_name TEXT, amount_raised DECIMAL(10,2));<end_of_turn>\\n<start_of_turn>model\\nSELECT campaign_name, AVG(amount_raised) FROM campaigns GROUP BY campaign_name;\\n\\nExplanation: This SQL query calculates the average donation per campaign in the 'campaigns' table by grouping campaigns based on their names and calculating the average amount raised.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the average monthly energy production for each wind farm in gigawatt-hours?\\n\\nContext: CREATE TABLE wind_farms (name VARCHAR(255), location VARCHAR(255), capacity FLOAT, monthly_production FLOAT); INSERT INTO wind_farms VALUES ('Farm A', 'USA', 100, 2000), ('Farm B', 'Canada', 150, 3000), ('Farm C', 'Germany', 200, 4000);<end_of_turn>\\n<start_of_turn>model\\nSELECT name, AVG(monthly_production) OVER (PARTITION BY name) AS avg_monthly_production FROM wind_farms;\\n\\nExplanation: The SQL query calculates the average monthly energy production for each wind farm by partitioning the data by the 'name' column and using the AVG function.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nHow many community development initiatives were completed in the region of Lombardy between 2015 and 2017?\\n\\nContext: CREATE TABLE community_development (id INT, region VARCHAR(50), initiative_type VARCHAR(50), cost FLOAT, start_date DATE, end_date DATE); INSERT INTO community_development (id, region, initiative_type, cost, start_date, end_date) VALUES (1, 'Lombardy', 'Community Center', 30000.00, '2015-01-01', '2015-12-31');<end_of_turn>\\n<start_of_turn>model\\nSELECT COUNT(*) FROM community_development WHERE region = 'Lombardy' AND start_date <= '2017-12-31' AND end_date >= '2015-01-01' AND initiative_type = 'Community Center';\\n\\nExplanation: This query counts the number of Community Center initiatives in the region of Lombardy between 2015 and 2017 by selecting all records where the 'region' is 'Lombardy' and the 'start_date' is on or before '2017-12-31' and the 'end_date' is on or after '2015-01-01'.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nList all infrastructure projects and their respective design standards, if any.\\n\\nContext: CREATE TABLE InfrastructureProjects (ProjectID int, Name varchar(50)); CREATE TABLE DesignStandards (StandardID int, ProjectID int, Description varchar(50)); INSERT INTO InfrastructureProjects (ProjectID, Name) VALUES (1, 'Highway Construction'), (2, 'Airport Expansion'); INSERT INTO DesignStandards (StandardID, ProjectID, Description) VALUES (101, 1, 'ASTM D638'), (102, 1, 'AASHTO 2014'), (201, 2, 'FAA 2017');<end_of_turn>\\n<start_of_turn>model\\nSELECT InfrastructureProjects.Name, DesignStandards.Description FROM InfrastructureProjects LEFT JOIN DesignStandards ON InfrastructureProjects.ProjectID = DesignStandards.ProjectID;\\n\\nExplanation: This query joins the 'InfrastructureProjects' table and the 'DesignStandards' table on the 'ProjectID' column and returns the 'Name' column from the 'InfrastructureProjects' table and the 'Description' column from the 'DesignStandards' table.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nList all the countries that have at least one urban agriculture program and their respective program names, excluding Canada?\\n\\nContext: CREATE TABLE countries (id INT, name VARCHAR(50)); CREATE TABLE urban_agriculture_programs (id INT, country_id INT, name VARCHAR(50)); INSERT INTO countries (id, name) VALUES (1, 'USA'), (2, 'Canada'), (3, 'Mexico'); INSERT INTO urban_agriculture_programs (id, country_id, name) VALUES (1, 1, 'GrowNYC'), (2, 3, 'Ciudad Verde'), (3, 1, 'Chicago Urban Agriculture'), (4, 2, 'Vancouver Urban Farming');<end_of_turn>\\n<start_of_turn>model\\nSELECT c.name, program_name FROM countries c JOIN urban_agriculture_programs p ON c.id = p.country_id WHERE c.name != 'Canada';\\n\\nExplanation: The SQL query uses the 'countries' and 'urban_agriculture_programs' tables to list all the countries that have at least one urban agriculture program and their respective program names, excluding Canada by using the WHERE clause with the inequality operator.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nCount the number of companies founded by individuals from underrepresented racial and ethnic groups\\n\\nContext: CREATE TABLE company_founding(id INT PRIMARY KEY, company_name VARCHAR(100), founder_race VARCHAR(50)); INSERT INTO company_founding VALUES (1, 'Acme Inc', 'Asian'); INSERT INTO company_founding VALUES (2, 'Beta Corp', 'White'); INSERT INTO company_founding VALUES (3, 'Charlie LLC', 'Hispanic');<end_of_turn>\\n<start_of_turn>model\\nSELECT COUNT(*) FROM company_founding WHERE founder_race IN ('Black', 'Hispanic', 'Indigenous', 'Pacific Islander');\\n\\nExplanation: This SQL query counts the number of companies founded by individuals from underrepresented racial and ethnic groups. It does this by selecting all rows from the company_founding table where the founder_race column is one of 'Black', 'Hispanic', 'Indigenous', or 'Pacific Islander', and then counting the number of rows.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWho is responsible for climate adaptation data?\\n\\nContext: CREATE TABLE staff (id INT PRIMARY KEY, name VARCHAR(255), role VARCHAR(255), department VARCHAR(255)); INSERT INTO staff (id, name, role, department) VALUES (1, 'Eve', 'Data Manager', 'climate_adaptation'), (2, 'Frank', 'Project Manager', 'climate_mitigation'), (3, 'Grace', 'Finance Analyst', 'climate_finance'), (4, 'Hugo', 'Data Scientist', 'climate_communication');<end_of_turn>\\n<start_of_turn>model\\nSELECT name FROM staff WHERE role = 'Data Manager' AND department = 'climate_adaptation';\\n\\nExplanation: This query selects the 'name' of the staff member who is the 'Data Manager' for the 'climate_adaptation' department.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the maximum grant amount given for women-led agricultural innovation projects in Rwanda?\\n\\nContext: CREATE TABLE agricultural_innovation_projects (id INT, country VARCHAR(20), grant_amount DECIMAL(10, 2), gender VARCHAR(10)); INSERT INTO agricultural_innovation_projects (id, country, grant_amount, gender) VALUES (1, 'Rwanda', 8000.00, 'Women'), (2, 'Rwanda', 6000.00, 'Men');<end_of_turn>\\n<start_of_turn>model\\nSELECT MAX(grant_amount) FROM agricultural_innovation_projects WHERE country = 'Rwanda' AND gender = 'Women';\\n\\nExplanation: This query calculates the maximum grant amount awarded for women-led agricultural innovation projects in Rwanda by finding the highest grant amount for Rwanda and women gender.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the safety record of the Airbus A320?\\n\\nContext: CREATE TABLE accidents (accident_id INT, aircraft_model VARCHAR(50), num_injuries INT); INSERT INTO accidents (accident_id, aircraft_model, num_injuries) VALUES (1, 'Boeing 747', 50), (2, 'Airbus A320', 20), (3, 'Boeing 777', 30);<end_of_turn>\\n<start_of_turn>model\\nSELECT AVG(num_injuries) FROM accidents WHERE aircraft_model = 'Airbus A320';\\n\\nExplanation: This query calculates the safety record of the Airbus A320 by taking the average number of injuries for the Airbus A320 model in the accidents table.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the number of students who have a lower mental health score than the average mental health score of students who have participated in open pedagogy?\\n\\nContext: CREATE TABLE students (student_id INT, mental_health_score INT, participated_in_open_pedagogy BOOLEAN); INSERT INTO students (student_id, mental_health_score, participated_in_open_pedagogy) VALUES (1, 80, TRUE), (2, 70, FALSE), (3, 90, TRUE);<end_of_turn>\\n<start_of_turn>model\\nSELECT COUNT(*) FROM students s1 WHERE s1.mental_health_score < (SELECT AVG(s2.mental_health_score) FROM students s2 WHERE s2.participated_in_open_pedagogy = TRUE);\\n\\nExplanation: This SQL query finds the number of students who have a lower mental health score than the average mental health score of students who have participated in open pedagogy. It does this by using a subquery to find the average mental health score of students who have participated in open pedagogy, and then filtering the rows in the students table to only include students who have a mental health score lower than that average. The number of rows is then found using the COUNT(*) function.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nHow many successful missions were conducted by SpaceIL?\\n\\nContext: CREATE TABLE spaceil_missions (mission_id INT, name VARCHAR(100), launch_date DATE, result VARCHAR(10));<end_of_turn>\\n<start_of_turn>model\\nSELECT COUNT(*) FROM spaceil_missions WHERE result = 'Success';\\n\\nExplanation: Count the number of successful missions conducted by SpaceIL by filtering the 'result' column with the value 'Success'.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the maximum energy storage utilization (%) in South Korea for each year between 2018 and 2021?\\n\\nContext: CREATE TABLE storage_utilization (year INT, location TEXT, country TEXT, utilization FLOAT); INSERT INTO storage_utilization (year, location, country, utilization) VALUES (2018, 'Seoul', 'South Korea', 85.0), (2019, 'Seoul', 'South Korea', 88.0), (2020, 'Busan', 'South Korea', 90.0), (2021, 'Incheon', 'South Korea', 92.0);<end_of_turn>\\n<start_of_turn>model\\nSELECT year, MAX(utilization) FROM storage_utilization WHERE country = 'South Korea' AND year BETWEEN 2018 AND 2021 GROUP BY year;\\n\\nExplanation: The SQL query calculates the maximum energy storage utilization (%) in South Korea for each year between 2018 and 2021. It first selects the year and utilization columns and then applies the MAX function to the utilization column for each year. The WHERE clause filters the data to only include rows for South Korea and for the years between 2018 and 2021. The GROUP BY clause groups the results by year.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nHow many artworks are there in each category?\\n\\nContext: CREATE TABLE Artworks (artwork_name TEXT, category TEXT);<end_of_turn>\\n<start_of_turn>model\\nSELECT category, COUNT(*) as artwork_count FROM Artworks GROUP BY category;\\n\\nExplanation: The query groups the Artworks table by category and counts the number of artworks in each category.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhich art pieces were donated by local philanthropists?\\n\\nContext: CREATE TABLE art_pieces (id INT, title TEXT, medium TEXT, donor_id INT, donor_type TEXT);CREATE TABLE donors (id INT, name TEXT, city TEXT, country TEXT);<end_of_turn>\\n<start_of_turn>model\\nSELECT ap.title, d.name, d.city FROM art_pieces ap JOIN donors d ON ap.donor_id = d.id WHERE d.city = 'San Francisco';\\n\\nExplanation: This query joins the 'art_pieces' and 'donors' tables. It filters donors from a specific city and retrieves the corresponding art pieces' titles and donors' names.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nHow many safety incidents were reported per vessel in the last year?\\n\\nContext: CREATE TABLE vessels (id INT, name VARCHAR(255), imo INT); CREATE TABLE incidents (id INT, vessel_id INT, incident_date DATE, incident_type VARCHAR(255));<end_of_turn>\\n<start_of_turn>model\\nSELECT v.name, COUNT(i.id) as num_incidents FROM incidents i JOIN vessels v ON i.vessel_id = v.id WHERE i.incident_date >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) GROUP BY v.name;\\n\\nExplanation: The SQL query joins the vessels and incidents tables on the vessel_id and id columns, respectively. It then filters the results to only include rows where the incident_date is within the last year using the DATE_SUB function. The final result is a list of vessel names and the number of safety incidents reported for each vessel in the last year, grouped by vessel name.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the total amount of donations received by the top 10 refugee camps, ordered from highest to lowest, for the year 2021?\\n\\nContext: CREATE TABLE refugee_camps (id INT, camp_name TEXT, country TEXT, total_donations DECIMAL(10,2)); INSERT INTO refugee_camps (id, camp_name, country, total_donations) VALUES (1, 'Kakuma', 'Kenya', 5000000.00), (2, 'Dadaab', 'Kenya', 7000000.00), (3, 'Zaatari', 'Jordan', 12000000.00), (4, 'Azraq', 'Jordan', 8000000.00);<end_of_turn>\\n<start_of_turn>model\\nSELECT SUM(total_donations) as total_donations, camp_name FROM refugee_camps GROUP BY camp_name ORDER BY total_donations DESC LIMIT 10;\\n\\nExplanation: The SQL query calculates the total donations for each refugee camp by summing the total_donations column and grouping by camp_name. The ORDER BY clause sorts the result set in descending order based on the sum of donations, and the LIMIT clause returns the top 10 refugee camps with the highest total donations.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWho are the volunteers with no donation records?\\n\\nContext: CREATE TABLE Volunteers (id INT, name TEXT); CREATE TABLE VolunteerDonations (id INT, volunteer_id INT, amount FLOAT);<end_of_turn>\\n<start_of_turn>model\\nSELECT Volunteers.name FROM Volunteers LEFT JOIN VolunteerDonations ON Volunteers.id = VolunteerDonations.volunteer_id WHERE VolunteerDonations.id IS NULL;\\n\\nExplanation: This SQL query performs a left join between the Volunteers and VolunteerDonations tables on the id and volunteer_id columns, respectively, filters for the rows where the VolunteerDonations.id is null, and returns the name column from the Volunteers table, providing the names of the volunteers with no donation records.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the total number of visitors by age group for all art exhibitions?\\n\\nContext: CREATE TABLE art_exhibitions (exhibition_id INT, exhibition_name VARCHAR(50), visitor_count INT, age_group VARCHAR(20));<end_of_turn>\\n<start_of_turn>model\\nSELECT age_group, SUM(visitor_count) as total_visitors FROM art_exhibitions GROUP BY age_group;\\n\\nExplanation: This SQL query calculates the total number of visitors for each age group by summing up visitor_count for each age_group and grouping by age_group.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the total number of labor rights violations by region?\\n\\nContext: CREATE TABLE Labor_Rights (region VARCHAR(20), violation_reported BOOLEAN); INSERT INTO Labor_Rights (region, violation_reported) VALUES ('Northeast', true), ('Northeast', false), ('Midwest', true);<end_of_turn>\\n<start_of_turn>model\\nSELECT region, SUM(violation_reported) as total_violations FROM Labor_Rights GROUP BY region;\\n\\nExplanation: The SQL query calculates the total number of labor rights violations by region. It does this by grouping the Labor_Rights table by region and calculating the sum of the violation_reported column for each region.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the number of defense diplomacy events that took place in the Middle East in the year 2019?\\n\\nContext: CREATE TABLE defense_diplomacy (location VARCHAR(50), year INT, events INT); INSERT INTO defense_diplomacy (location, year, events) VALUES ('Middle East', 2019, 200), ('Europe', 2019, 300), ('Asia-Pacific', 2019, 150), ('Africa', 2019, 250), ('Americas', 2019, 100);<end_of_turn>\\n<start_of_turn>model\\nSELECT SUM(events) FROM defense_diplomacy WHERE location = 'Middle East' AND year = 2019;\\n\\nExplanation: This query calculates the number of defense diplomacy events that took place in the Middle East in the year 2019. It does this by summing the events column in the defense_diplomacy table where the location is 'Middle East' and the year is 2019.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the average distance to the nearest hospital in rural areas?\\n\\nContext: CREATE TABLE hospitals (id INT, name TEXT, location TEXT, is_rural BOOLEAN); INSERT INTO hospitals (id, name, location, is_rural) VALUES (1, 'Hospital A', '123 Main St, Rural Town A', true), (2, 'Hospital B', '456 Elm St, Urban City A', false); CREATE TABLE healthcare_facilities (id INT, name TEXT, location TEXT, is_rural BOOLEAN); INSERT INTO healthcare_facilities (id, name, location, is_rural) VALUES (1, 'Clinic A', '789 Oak St, Rural Town A', true), (2, 'Clinic B', '321 Maple St, Urban City B', false); CREATE TABLE distances (facility_id INT, hospital_id INT, distance REAL); INSERT INTO distances (facility_id, hospital_id, distance) VALUES (1, 1, 10), (2, 2, 25);<end_of_turn>\\n<start_of_turn>model\\nSELECT AVG(distance) FROM distances d INNER JOIN healthcare_facilities hf ON d.facility_id = hf.id INNER JOIN hospitals h ON d.hospital_id = h.id WHERE hf.is_rural = true AND h.is_rural = true;\\n\\nExplanation: This query calculates the average distance to the nearest hospital in rural areas. It does so by using the AVG function on the distance column, while filtering the rows to only include those where both the healthcare_facilities and hospitals tables have the is_rural column set to true. It also performs an inner join between the distances, healthcare_facilities, and hospitals tables, on the facility_id and hospital_id columns.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nUpdate the \"technology_for_social_good\" table to set the \"funding_status\" to \"Approved\" for the records with \"region\" as \"Europe\" and \"funding_amount\" greater than 50000\\n\\nContext: CREATE TABLE technology_for_social_good (id INT PRIMARY KEY, project_name VARCHAR(100), region VARCHAR(50), funding_amount INT, funding_status VARCHAR(20)); INSERT INTO technology_for_social_good (id, project_name, region, funding_amount, funding_status) VALUES (1, 'Clean Water AI', 'Europe', 60000, 'Pending'); INSERT INTO technology_for_social_good (id, project_name, region, funding_amount, funding_status) VALUES (2, 'Green Energy App', 'Asia-Pacific', 40000, 'Approved');<end_of_turn>\\n<start_of_turn>model\\nUPDATE technology_for_social_good SET funding_status = 'Approved' WHERE region = 'Europe' AND funding_amount > 50000;\\n\\nExplanation: This SQL query updates the \"technology_for_social_good\" table to set the \"funding_status\" to \"Approved\" for the records with \"region\" as \"Europe\" and \"funding_amount\" greater than 50000. It uses the UPDATE statement with a WHERE clause to filter the records based on the given conditions.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nDelete records of students who have not published any articles\\n\\nContext: CREATE TABLE Students (StudentID INT, Name VARCHAR(50), Department VARCHAR(50)); INSERT INTO Students (StudentID, Name, Department) VALUES (1, 'John Doe', 'Computer Science'), (2, 'Jane Smith', 'Physics'), (3, 'Alice Johnson', 'Mathematics'); CREATE TABLE Publications (PublicationID INT, StudentID INT, Title VARCHAR(50)); INSERT INTO Publications (PublicationID, StudentID) VALUES (1, 1), (2, 1), (3, 2);<end_of_turn>\\n<start_of_turn>model\\nDELETE FROM Students WHERE StudentID NOT IN (SELECT StudentID FROM Publications);\\n\\nExplanation: The SQL query deletes records of students from the Students table who do not have any associated records in the Publications table, based on the StudentID. This is achieved by using a subquery to first select StudentIDs that exist in the Publications table, and then deleting records from the Students table where the StudentID is not in the subquery result.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the average sustainability score for cosmetic products, partitioned by brand and ordered by average score in descending order?\\n\\nContext: CREATE TABLE products (product_id INT, brand_id INT, sustainability_score FLOAT); INSERT INTO products (product_id, brand_id, sustainability_score) VALUES (1, 1, 80), (2, 1, 85), (3, 2, 70), (4, 2, 75); CREATE TABLE brands (brand_id INT, name VARCHAR(255)); INSERT INTO brands (brand_id, name) VALUES (1, 'BrandA'), (2, 'BrandB');<end_of_turn>\\n<start_of_turn>model\\nSELECT brands.name, AVG(products.sustainability_score) as avg_score FROM products JOIN brands ON products.brand_id = brands.brand_id GROUP BY brands.name ORDER BY avg_score DESC;\\n\\nExplanation: The SQL query partitions the data by brand, orders it by average sustainability score in descending order, and then calculates the average sustainability score for each brand.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the total number of streams for Latin artists in the 'music_streaming' table?\\n\\nContext: CREATE TABLE music_streaming (stream_id INT, user_id INT, song_id INT, streams INT, date DATE, artist_id INT, artist_nationality VARCHAR(50));<end_of_turn>\\n<start_of_turn>model\\nSELECT SUM(streams) FROM music_streaming WHERE artist_nationality LIKE '%Latin%';\\n\\nExplanation: The query calculates the total number of streams for Latin artists in the 'music_streaming' table by filtering the data for artists with Latin nationalities and then calculating the sum of the streams.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhich train lines have the highest and lowest number of stations?\\n\\nContext: CREATE TABLE train_lines (line_id INT, line_name VARCHAR(255), stations INT); INSERT INTO train_lines (line_id, line_name, stations) VALUES (1, 'Red Line', 15), (2, 'Blue Line', 12), (3, 'Green Line', 18), (4, 'Orange Line', 10);<end_of_turn>\\n<start_of_turn>model\\nSELECT line_name, stations AS highest_stations FROM train_lines ORDER BY stations DESC LIMIT 1; SELECT line_name, stations AS lowest_stations FROM train_lines ORDER BY stations ASC LIMIT 1;\\n\\nExplanation: The SQL query identifies the train lines with the highest and lowest number of stations by joining the train_lines table and filtering the records with the highest and lowest number of stations using the ORDER BY clause and LIMIT clause. The query is repeated to identify the train line with the lowest number of stations.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the total number of digital assets issued by companies based in Canada, ordered by the date of issuance?\\n\\nContext: CREATE TABLE digital_assets (id INT, name VARCHAR(100), issuer_country VARCHAR(50), issue_date DATE); INSERT INTO digital_assets (id, name, issuer_country, issue_date) VALUES (1, 'CryptoCoin', 'Canada', '2018-01-01'); INSERT INTO digital_assets (id, name, issuer_country, issue_date) VALUES (2, 'BitAsset', 'USA', '2019-03-15');<end_of_turn>\\n<start_of_turn>model\\nSELECT SUM(id) OVER (ORDER BY issue_date) as total_assets_issued, name, issuer_country, issue_date FROM digital_assets WHERE issuer_country = 'Canada' ORDER BY issue_date;\\n\\nExplanation: This query calculates the running total of digital assets issued by companies based in Canada, ordered by the date of issuance. It uses the SUM function with the OVER clause and ORDER BY to calculate the running total. The query also selects the name, issuer_country, and issue_date columns.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the number of wells in the 'GH_Well' table that have a production rate greater than 500?\\n\\nContext: CREATE TABLE GH_Well (Well_ID VARCHAR(10), Production_Rate INT); INSERT INTO GH_Well (Well_ID, Production_Rate) VALUES ('W001', 200), ('W002', 300);<end_of_turn>\\n<start_of_turn>model\\nSELECT COUNT(*) FROM GH_Well WHERE Production_Rate > 500;\\n\\nExplanation: The SQL query counts the number of wells in the 'GH_Well' table that have a production rate greater than 500 by using the COUNT aggregate function on all rows where the 'Production_Rate' column is greater than 500.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the total number of auto shows attended by a specific manufacturer?\\n\\nContext: CREATE TABLE Auto_Shows (id INT, manufacturer VARCHAR(50), show_name VARCHAR(50), year INT); CREATE TABLE Manufacturers (id INT, name VARCHAR(50));<end_of_turn>\\n<start_of_turn>model\\nSELECT COUNT(DISTINCT show_name) FROM Auto_Shows JOIN Manufacturers ON Auto_Shows.manufacturer = Manufacturers.name WHERE Manufacturers.name = 'Tesla';\\n\\nExplanation: This query calculates the total number of auto shows attended by a specific manufacturer by joining the Auto_Shows and Manufacturers tables on the manufacturer column and filtering the results by the name column in the Manufacturers table.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the minimum number of passengers per trip for public buses in Sydney?\\n\\nContext: CREATE TABLE public_buses (bus_id INT, passengers INT, trip_duration INT); INSERT INTO public_buses (bus_id, passengers, trip_duration) VALUES (1, 10, 30), (2, 15, 45), (3, 20, 60), (4, 25, 75);<end_of_turn>\\n<start_of_turn>model\\nSELECT MIN(passengers) as min_passengers FROM public_buses;\\n\\nExplanation: Find the minimum number of passengers per trip for public buses in Sydney by selecting the minimum value of passengers from the public_buses table.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the average number of volunteers for organizations in the Midwest?\\n\\nContext: CREATE TABLE organizations (id INT, name TEXT, num_volunteers INT); CREATE TABLE regions (id INT, region TEXT); INSERT INTO organizations (id, name, num_volunteers) VALUES (1, 'Habitat for Humanity', 500), (2, 'Red Cross', 300), (3, 'UNICEF', 200); INSERT INTO regions (id, region) VALUES (1, 'Midwest'), (2, 'Southeast'), (3, 'Northeast');<end_of_turn>\\n<start_of_turn>model\\nSELECT AVG(o.num_volunteers) AS avg_volunteers FROM organizations o JOIN regions r ON o.id = r.id WHERE r.region = 'Midwest';\\n\\nExplanation: This SQL query performs a join between the organizations and regions tables on the id column, and then filters for rows where the region is 'Midwest'. It then calculates the average of the num_volunteers column, which represents the average number of volunteers for organizations in the Midwest region.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nFind the average age of members who have done a 'Cycling' workout.\\n\\nContext: CREATE TABLE Members (id INT, name VARCHAR(50), age INT); INSERT INTO Members (id, name, age) VALUES (1, 'Surae', 28), (2, 'Javier', 35), (3, 'Minh', 32), (4, 'Elena', 45); CREATE TABLE Workouts (member_id INT, workout VARCHAR(50)); INSERT INTO Workouts (member_id, workout) VALUES (1, 'Cycling'), (2, 'Cycling'), (3, 'Yoga'), (4, 'Pilates');<end_of_turn>\\n<start_of_turn>model\\nSELECT AVG(age) FROM Members m JOIN Workouts w ON m.id = w.member_id WHERE w.workout = 'Cycling';\\n\\nExplanation: The SQL query joins the Members and Workouts tables on the member_id column and filters for members who have done a 'Cycling' workout. It then uses the AVG function to calculate the average age of these members.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat are the names and types of local businesses in Paris with more than 10 seats?\\n\\nContext: CREATE TABLE local_business (id INT PRIMARY KEY, name VARCHAR(255), type VARCHAR(255), location VARCHAR(255), seats INT); INSERT INTO local_business (id, name, type, location, seats) VALUES (1, 'Bistrot La Fontaine', 'French', 'Paris', 15);<end_of_turn>\\n<start_of_turn>model\\nSELECT l.name, l.type, l.location FROM local_business l WHERE l.location = 'Paris' AND l.seats > 10;\\n\\nExplanation: This query filters the local_business table to show only the rows where the location is 'Paris' and the number of seats is more than 10. The result is a list of names, types, and locations of businesses in Paris with more than 10 seats.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the total rainfall for each irrigation system in the past month?\\n\\nContext: CREATE TABLE irrigation_systems (system_id INTEGER, system_name TEXT, rainfall INTEGER); INSERT INTO irrigation_systems VALUES (1, 'Drip Irrigation', 50), (2, 'Sprinkler Irrigation', 75);<end_of_turn>\\n<start_of_turn>model\\nSELECT system_name, SUM(rainfall) as total_rainfall FROM irrigation_systems WHERE system_id IN (SELECT system_id FROM irrigation_systems_data WHERE data_date >= CURDATE() - INTERVAL 1 MONTH) GROUP BY system_name;\\n\\nExplanation: This query first selects the system_id from the irrigation_systems_data table where data_date is within the past month. It then joins the irrigation_systems table using the system_id to calculate the total rainfall for each irrigation system.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the percentage of cases in the access to justice database that were resolved through mediation in the last quarter?\\n\\nContext: CREATE TABLE access_to_justice_cases (id INT, resolution_type VARCHAR(20), resolution_date DATE);<end_of_turn>\\n<start_of_turn>model\\nSELECT (COUNT(*) FILTER (WHERE resolution_type = 'mediation')) * 100.0 \/ COUNT(*) FROM access_to_justice_cases WHERE resolution_date >= DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTHS);\\n\\nExplanation: This query calculates the percentage of cases in the access to justice database that were resolved through mediation in the last quarter by selecting all rows from the access_to_justice_cases table where the resolution_date is within the last quarter, filtering the rows where the resolution_type is 'mediation', calculating the count of these rows using the COUNT function with the FILTER clause, dividing this count by the total number of rows using the COUNT function, and then multiplying the result by 100.0 to get the percentage.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the earliest planting date for each crop in 'farm_activities' table?\\n\\nContext: CREATE TABLE farm_activities (region VARCHAR(50), crop VARCHAR(50), planting_date DATE); INSERT INTO farm_activities VALUES ('West Coast', 'Wheat', '2022-04-01'); INSERT INTO farm_activities VALUES ('West Coast', 'Corn', '2022-05-01'); INSERT INTO farm_activities VALUES ('East Coast', 'Rice', '2022-06-01');<end_of_turn>\\n<start_of_turn>model\\nSELECT crop, MIN(planting_date) AS earliest_planting FROM farm_activities GROUP BY crop;\\n\\nExplanation: Finds the earliest planting date for each crop.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nHow many employees are there in each department in the 'workforce_diversity' table?\\n\\nContext: CREATE TABLE workforce_diversity (employee_id INT, name VARCHAR(50), department VARCHAR(50), gender VARCHAR(10), age INT); INSERT INTO workforce_diversity (employee_id, name, department, gender, age) VALUES (1, 'John Doe', 'Engineering', 'Male', 35); INSERT INTO workforce_diversity (employee_id, name, department, gender, age) VALUES (2, 'Jane Smith', 'Operations', 'Female', 28);<end_of_turn>\\n<start_of_turn>model\\nSELECT department, COUNT(*) FROM workforce_diversity GROUP BY department;\\n\\nExplanation: This SQL query calculates the number of employees in each department by using the COUNT function along with the GROUP BY clause on the 'department' column in the 'workforce_diversity' table.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat's the total donation amount from first-time donors in Q1 2021?\\n\\nContext: CREATE TABLE donors (id INT, first_time BOOLEAN, donation_amount DECIMAL, donation_date DATE);<end_of_turn>\\n<start_of_turn>model\\nSELECT SUM(donation_amount) FROM (SELECT donation_amount FROM donors WHERE first_time = TRUE AND donation_date >= '2021-01-01' AND donation_date < '2021-04-01') AS first_time_q1_donations;\\n\\nExplanation: The subquery (first_time_q1_donations) filters the donors table for first-time donors and donations made in Q1 2021. The outer query calculates the sum of donation_amount from the filtered results.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nCreate a view named 'high_bed_hospitals' with hospitals having more than 100 beds\\n\\nContext: CREATE TABLE rural_hospitals( hospital_id INT PRIMARY KEY, name VARCHAR(255), bed_count INT, rural_population_served INT);<end_of_turn>\\n<start_of_turn>model\\nCREATE VIEW high_bed_hospitals AS SELECT name, bed_count FROM rural_hospitals WHERE bed_count > 100;\\n\\nExplanation: 1. Define a new view high_bed_hospitals 2. Select name and bed_count columns from the rural_hospitals table 3. Filter rows with bed_count greater than 100<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat was the total defense contract value in H2 2021?\\n\\nContext: CREATE TABLE defense_contracts (contract_id INT, value FLOAT, sign_date DATE); INSERT INTO defense_contracts (contract_id, value, sign_date) VALUES (1, 600000, '2021-10-01'), (2, 800000, '2021-12-31');<end_of_turn>\\n<start_of_turn>model\\nSELECT SUM(value) FROM defense_contracts WHERE sign_date BETWEEN '2021-07-01' AND '2021-12-31';\\n\\nExplanation: The SQL query calculates the total defense contract value in H2 2021 by summing the 'value' column for records where 'sign_date' is within the range of the first day (July 1) and the last day (December 31) of H2 2021.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nShow all transactions that were made on a holiday.\\n\\nContext: CREATE TABLE transactions (id INT, transaction_date DATE); INSERT INTO transactions (id, transaction_date) VALUES (1, '2022-01-01'), (2, '2022-01-08'), (3, '2022-01-15'), (4, '2022-01-22'), (5, '2022-01-29'), (6, '2022-12-25');<end_of_turn>\\n<start_of_turn>model\\nSELECT * FROM transactions WHERE transaction_date IN (DATE('2022-01-01'), DATE('2022-01-17'), DATE('2022-02-21'), DATE('2022-05-30'), DATE('2022-07-04'), DATE('2022-12-25'));\\n\\nExplanation: The SQL query selects all rows from the transactions table where the transaction_date is one of the following dates: January 1, January 17, February 21, May 30, July 4, and December 25. These dates correspond to holidays in the United States. This will return all transactions made on a holiday.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the total number of ethical AI initiatives in the technology sector?\\n\\nContext: CREATE TABLE ethical_ai (initiative_id INT, initiative_name VARCHAR(50), sector VARCHAR(50), launch_year INT); INSERT INTO ethical_ai (initiative_id, initiative_name, sector, launch_year) VALUES (1, 'EthicalAI1', 'Technology', 2018), (2, 'EthicalAI2', 'Finance', 2019), (3, 'EthicalAI3', 'Healthcare', 2017);<end_of_turn>\\n<start_of_turn>model\\nSELECT sector, COUNT(*) as count FROM ethical_ai WHERE sector = 'Technology' GROUP BY sector;\\n\\nExplanation: Count the total number of ethical AI initiatives in the technology sector. The query filters the data by sector and groups the data by sector, then calculates the count using the COUNT function for each group.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the average habitat size in square kilometers for each habitat type in the North American conservation programs?\\n\\nContext: CREATE TABLE north_american_habitats (habitat_type VARCHAR(50), size INT); INSERT INTO north_american_habitats (habitat_type, size) VALUES ('Forests', 5000), ('Wetlands', 3000), ('Grasslands', 7000);<end_of_turn>\\n<start_of_turn>model\\nSELECT habitat_type, AVG(size) FROM north_american_habitats GROUP BY habitat_type;\\n\\nExplanation: This query calculates the average size for each habitat_type in the north_american_habitats table.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nIdentify customers who made a transaction on the same day in two different branches.\\n\\nContext: CREATE TABLE branches (branch_id INT, branch_name VARCHAR(50)); INSERT INTO branches (branch_id, branch_name) VALUES (1, 'New York'); INSERT INTO branches (branch_id, branch_name) VALUES (2, 'Los Angeles'); CREATE TABLE transactions (transaction_id INT, customer_id INT, branch_id INT, transaction_date DATE); INSERT INTO transactions (transaction_id, customer_id, branch_id, transaction_date) VALUES (1, 1, 1, '2022-01-01'); INSERT INTO transactions (transaction_id, customer_id, branch_id, transaction_date) VALUES (2, 2, 2, '2022-01-01');<end_of_turn>\\n<start_of_turn>model\\nSELECT t1.customer_id, t1.branch_id as branch_id_1, t2.branch_id as branch_id_2 FROM transactions t1 INNER JOIN transactions t2 ON t1.customer_id = t2.customer_id AND t1.transaction_date = t2.transaction_date AND t1.branch_id != t2.branch_id WHERE t1.transaction_date BETWEEN DATEADD(day, -30, GETDATE()) AND GETDATE();\\n\\nExplanation: This query identifies customers who made a transaction on the same day in two different branches. It uses a self-join to join the transactions table with itself and filters the data based on the customer_id, transaction_date, and branch_id columns. The result is a list of customers who made transactions on the same day in two different branches.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nFind the number of tree species in each forest area\\n\\nContext: CREATE TABLE ForestArea (area VARCHAR(255), species VARCHAR(255)); INSERT INTO ForestArea (area, species) VALUES ('Area1', 'Pine'), ('Area1', 'Oak'), ('Area2', 'Spruce'), ('Area2', 'Maple'), ('Area3', 'Birch'), ('Area3', 'Cedar');<end_of_turn>\\n<start_of_turn>model\\nSELECT area, COUNT(*) as num_species FROM ForestArea GROUP BY area;\\n\\nExplanation: The SQL query finds the number of tree species in each forest area by grouping the records based on the 'area' column and counting the number of records for each group.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nUpdate records in labor_statistics table and set hourly_wage = hourly_wage * 1.10 where job_category is 'Plumbing'\\n\\nContext: CREATE TABLE labor_statistics (id INT, job_category VARCHAR(20), hourly_wage DECIMAL(5,2));<end_of_turn>\\n<start_of_turn>model\\nUPDATE labor_statistics SET hourly_wage = hourly_wage * 1.10 WHERE job_category = 'Plumbing';\\n\\nExplanation: *This SQL query updates records in the labor_statistics table* *that meet the condition: job_category is 'Plumbing' by increasing hourly_wage by 10%*<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the maximum ocean acidification level in the Atlantic Ocean?\\n\\nContext: CREATE TABLE ocean_acidification (region TEXT, level REAL); INSERT INTO ocean_acidification (region, level) VALUES ('Atlantic Ocean', 8.2), ('Pacific Ocean', 8.1), ('Indian Ocean', 8.0);<end_of_turn>\\n<start_of_turn>model\\nSELECT MAX(level) FROM ocean_acidification WHERE region = 'Atlantic Ocean';\\n\\nExplanation: The SQL query calculates the maximum level from the ocean_acidification table for the Atlantic Ocean.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat are the billing amounts for cases in California?\\n\\nContext: CREATE TABLE cases (case_id INT, client_id INT, state VARCHAR(2)); CREATE TABLE clients (client_id INT, billing_amount DECIMAL(10,2)); INSERT INTO cases (case_id, client_id, state) VALUES (1, 1, 'CA'), (2, 2, 'NY'); INSERT INTO clients (client_id, billing_amount) VALUES (1, 5000.00), (2, 6000.00);<end_of_turn>\\n<start_of_turn>model\\nSELECT c.billing_amount FROM clients c JOIN cases cs ON c.client_id = cs.client_id WHERE cs.state = 'CA';\\n\\nExplanation: This SQL query retrieves the billing amounts for cases in California. It joins the clients and cases tables on the client_id, filters for cases in California, and then selects the billing_amount.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the minimum duration of a space mission led by an astronaut from India?\\n\\nContext: CREATE TABLE Astronauts(id INT, name VARCHAR(50), nationality VARCHAR(50)); CREATE TABLE SpaceMissions(id INT, mission VARCHAR(50), leader_id INT, duration FLOAT); INSERT INTO Astronauts(id, name, nationality) VALUES (1, 'Rakesh Sharma', 'India'), (2, 'Kalpana Chawla', 'India'), (3, 'Sunita Williams', 'India'); INSERT INTO SpaceMissions(id, mission, leader_id, duration) VALUES (1, 'Apollo 11', 1, 12), (2, 'Artemis I', 2, 15), (3, 'Ares III', 3, 18), (4, 'Mangalyaan', 1, 300);<end_of_turn>\\n<start_of_turn>model\\nSELECT MIN(duration) FROM SpaceMissions INNER JOIN Astronauts ON SpaceMissions.leader_id = Astronauts.id WHERE Astronauts.nationality = 'India';\\n\\nExplanation: This query finds the minimum duration of a space mission led by an astronaut from India by joining the SpaceMissions and Astronauts tables on the leader_id and id columns, respectively, and selecting the minimum duration where the nationality is 'India'.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the distribution of astronauts' nationalities?\\n\\nContext: CREATE TABLE Astronauts (AstronautID INT, Age INT, Gender VARCHAR(10), Name VARCHAR(50), Nationality VARCHAR(50));<end_of_turn>\\n<start_of_turn>model\\nSELECT Nationality, COUNT(*) FROM Astronauts GROUP BY Nationality;\\n\\nExplanation: This query groups the 'Astronauts' table by 'Nationality' and counts the number of occurrences for each nationality.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the minimum size (in hectares) of a plot in the 'plots' table, where the plot is used for agroforestry?\\n\\nContext: CREATE TABLE plots (id INT, size_ha FLOAT, type TEXT); INSERT INTO plots (id, size_ha, type) VALUES (1, 2.5, 'Urban'); INSERT INTO plots (id, size_ha, type) VALUES (2, 1.8, 'Agroforestry');<end_of_turn>\\n<start_of_turn>model\\nSELECT MIN(size_ha) FROM plots WHERE type = 'Agroforestry';\\n\\nExplanation: This SQL query calculates the minimum size of a plot that is used for agroforestry. The MIN() function is used to find the smallest 'size_ha' column value for rows where the 'type' column is equal to 'Agroforestry'.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the total transaction volume for the 'DeFi' category in the 'DApps' table, grouped by month?\\n\\nContext: CREATE TABLE DApps (id INT, name VARCHAR(50), category VARCHAR(20), transaction_volume DECIMAL(18,2), date DATE);<end_of_turn>\\n<start_of_turn>model\\nSELECT DATE_FORMAT(date, '%Y-%m') AS month, SUM(transaction_volume) FROM DApps WHERE category = 'DeFi' GROUP BY month;\\n\\nExplanation: This SQL query calculates the total transaction volume for the 'DeFi' category in the 'DApps' table, grouped by month. It uses the DATE_FORMAT function to extract the year and month from the 'date' column, and the SUM aggregate function with the GROUP BY clause to group the results by month and calculate the total transaction volume for each group. It also uses the WHERE clause to filter the rows based on the 'category' column.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the total number of athlete wellbeing program participants by type?\\n\\nContext: CREATE TABLE wellbeing_program_participants (id INT, participant VARCHAR(255), program VARCHAR(255)); INSERT INTO wellbeing_program_participants (id, participant, program) VALUES (1, 'Jane Smith', 'Yoga'), (2, 'Mike Johnson', 'Meditation'), (3, 'Lisa Davis', 'Pilates'), (4, 'John Brown', 'Yoga'), (5, 'Emma Wilson', 'Meditation'), (6, 'Daniel Kim', 'Pilates');<end_of_turn>\\n<start_of_turn>model\\nSELECT program, COUNT(*) as total_participants FROM wellbeing_program_participants GROUP BY program;\\n\\nExplanation: The SQL query calculates the total number of athlete wellbeing program participants by type by grouping the wellbeing_program_participants table by the program column and then applying the COUNT function on the entire table.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nHow many customers have a financial wellbeing score greater than 8?\\n\\nContext: CREATE TABLE customers (customer_id INT, region VARCHAR(20), financial_wellbeing_score DECIMAL(3, 1)); INSERT INTO customers (customer_id, region, financial_wellbeing_score) VALUES (1, 'Northeast', 6.5), (2, 'Midwest', 7.2), (3, 'West', 8.5);<end_of_turn>\\n<start_of_turn>model\\nSELECT COUNT(*) FROM customers WHERE financial_wellbeing_score > 8;\\n\\nExplanation: This SQL query counts the number of customers with a financial wellbeing score greater than 8 by filtering the customers table for rows where financial_wellbeing_score is greater than 8.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the average depth of marine protected areas in the Arctic Ocean?\\n\\nContext: CREATE TABLE marine_protected_areas (name TEXT, location TEXT, depth FLOAT); INSERT INTO marine_protected_areas (name, location, depth) VALUES ('Beaufort Sea Marine Protected Area', 'Arctic', 500.0), ('Chukchi Sea Marine Protected Area', 'Arctic', 800.0), ('Laptev Sea Marine Protected Area', 'Arctic', 1000.0);<end_of_turn>\\n<start_of_turn>model\\nSELECT AVG(depth) FROM marine_protected_areas WHERE location = 'Arctic';\\n\\nExplanation: This query calculates the average depth of marine protected areas in the Arctic Ocean by summing the depths of areas in the Arctic and dividing by the count of areas.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the minimum salary for employees who have completed diversity and inclusion training?\\n\\nContext: CREATE TABLE Employees (EmployeeID INT, Salary FLOAT, DiversityTraining BOOLEAN); INSERT INTO Employees (EmployeeID, Salary, DiversityTraining) VALUES (1, 70000, true), (2, 65000, false), (3, 55000, true), (4, 80000, true), (5, 85000, false);<end_of_turn>\\n<start_of_turn>model\\nSELECT MIN(Salary) FROM Employees WHERE DiversityTraining = true;\\n\\nExplanation: The SQL query calculates the minimum salary for employees who have completed diversity and inclusion training by using the MIN() function and a WHERE clause to filter the required data.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the average rating of sustainable tourism activities in Australia?\\n\\nContext: CREATE TABLE activities(id INT, name TEXT, country TEXT, rating INT, sustainability_rating INT); INSERT INTO activities (id, name, country, rating, sustainability_rating) VALUES (1, 'Hiking Trail A', 'Australia', 4, 5), (2, 'Bike Tour B', 'Australia', 5, 5), (3, 'Kayak Tour C', 'Australia', 4, 4);<end_of_turn>\\n<start_of_turn>model\\nSELECT AVG(rating) FROM activities WHERE country = 'Australia' AND sustainability_rating = 5;\\n\\nExplanation: This SQL query calculates the average rating of sustainable tourism activities in Australia by using the AVG() function on the rating column, filtering the data by country and sustainability rating.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nHow many different crops were grown in 'farm_activities' table per region?\\n\\nContext: CREATE TABLE farm_activities (region VARCHAR(50), crop VARCHAR(50), planting_date DATE); INSERT INTO farm_activities VALUES ('West Coast', 'Wheat', '2022-04-01'); INSERT INTO farm_activities VALUES ('West Coast', 'Corn', '2022-05-01'); INSERT INTO farm_activities VALUES ('East Coast', 'Rice', '2022-06-01');<end_of_turn>\\n<start_of_turn>model\\nSELECT region, COUNT(DISTINCT crop) AS num_crops FROM farm_activities GROUP BY region;\\n\\nExplanation: Counts the number of distinct crops grown per region.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nInsert new environmental impact record\\n\\nContext: CREATE TABLE impact (id INT PRIMARY KEY, site_id INT, impact_score INT);<end_of_turn>\\n<start_of_turn>model\\nINSERT INTO impact (site_id, impact_score) VALUES (3, 70);\\n\\nExplanation: This query inserts a new environmental impact record for site_id 3 with an impact score of 70 in the impact table.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nHow many accessible vehicles are there for each maintenance type?\\n\\nContext: CREATE TABLE Vehicles (VehicleID int, VehicleType varchar(50), Accessibility bit); INSERT INTO Vehicles VALUES (1, 'Bus', 1), (2, 'Train', 0), (3, 'Tram', 1); CREATE TABLE MaintenanceTypes (MaintenanceTypeID int, MaintenanceType varchar(50)); INSERT INTO MaintenanceTypes VALUES (1, 'Oil Change'), (2, 'Tire Rotation'); CREATE TABLE VehicleMaintenance (VehicleID int, MaintenanceTypeID int); INSERT INTO VehicleMaintenance VALUES (1, 1), (1, 2), (3, 1);<end_of_turn>\\n<start_of_turn>model\\nSELECT V.VehicleType, M.MaintenanceType, COUNT(VM.VehicleID) as AccessibleVehicleCount FROM Vehicles V INNER JOIN VehicleMaintenance VM ON V.VehicleID = VM.VehicleID INNER JOIN MaintenanceTypes M ON VM.MaintenanceTypeID = M.MaintenanceTypeID WHERE V.Accessibility = 1 GROUP BY V.VehicleType, M.MaintenanceType;\\n\\nExplanation: Join Vehicles, VehicleMaintenance, and MaintenanceTypes tables, filter for accessible vehicles, and count the number of accessible vehicles for each maintenance type.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nList the number of unique mental health providers in the 'treatment' table who treated patients in January 2022.\\n\\nContext: CREATE TABLE treatment (treatment_id INT, patient_id INT, condition VARCHAR(50), provider VARCHAR(50), date DATE); INSERT INTO treatment (treatment_id, patient_id, condition, provider, date) VALUES (1, 1, 'Anxiety Disorder', 'Dr. Jane', '2021-01-01'); INSERT INTO treatment (treatment_id, patient_id, condition, provider, date) VALUES (2, 1, 'PTSD', 'Dr. Bob', '2021-02-01'); INSERT INTO treatment (treatment_id, patient_id, condition, provider, date) VALUES (3, 2, 'Anxiety Disorder', 'Dr. Bob', '2021-03-01'); INSERT INTO treatment (treatment_id, patient_id, condition, provider, date) VALUES (4, 3, 'Depression', 'Dr. Jane', '2022-01-15');<end_of_turn>\\n<start_of_turn>model\\nSELECT COUNT(DISTINCT provider) FROM treatment WHERE date BETWEEN '2022-01-01' AND '2022-01-31';\\n\\nExplanation: This SQL query counts the number of unique mental health providers in the 'treatment' table who treated patients in January 2022 by using the COUNT function with the DISTINCT keyword on the provider column and the WHERE clause to filter the records by date range.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nUpdate the \"citizen_feedback\" table to mark feedback with the ID 34 as \"resolved\"\\n\\nContext: CREATE TABLE citizen_feedback (feedback_id INT, feedback_text VARCHAR(255), status VARCHAR(20));<end_of_turn>\\n<start_of_turn>model\\nUPDATE citizen_feedback SET status = 'resolved' WHERE feedback_id = 34;\\n\\nExplanation: This SQL query updates the \"citizen_feedback\" table to mark feedback with the ID 34 as \"resolved\". It uses the UPDATE statement, followed by the table name, which is \"citizen_feedback\". The SET keyword is used to specify the new value for the \"status\" column, and the WHERE clause filters the records to be updated based on the \"feedback_id\" column condition.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nFind the average price of sustainable clothing items\\n\\nContext: CREATE TABLE clothing_info (id INT, category VARCHAR(50), subcategory VARCHAR(50), is_sustainable BOOLEAN, price DECIMAL(5,2)); INSERT INTO clothing_info (id, category, subcategory, is_sustainable, price) VALUES (1, 'Clothing', 'Tops', TRUE, 45.00), (2, 'Clothing', 'Tops', TRUE, 55.00), (3, 'Clothing', 'Bottoms', FALSE, 35.00), (4, 'Clothing', 'Bottoms', TRUE, 65.00), (5, 'Clothing', 'Outerwear', FALSE, 75.00);<end_of_turn>\\n<start_of_turn>model\\nSELECT AVG(price) FROM clothing_info WHERE is_sustainable = TRUE;\\n\\nExplanation: The SQL query calculates the average price (AVG) of sustainable clothing items from the clothing_info table by filtering on is_sustainable = TRUE.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nIdentify the top 5 best-selling skincare products in the USA?\\n\\nContext: CREATE TABLE Skincare_Sales_USA(Product_Name VARCHAR(30), Product_Type VARCHAR(20), Sales DECIMAL(10,2)); INSERT INTO Skincare_Sales_USA(Product_Name, Product_Type, Sales) VALUES('Product A', 'Moisturizer', 2000), ('Product B', 'Cleanser', 1500), ('Product C', 'Toner', 1200), ('Product D', 'Exfoliant', 1800), ('Product E', 'Serum', 2500), ('Product F', 'Moisturizer', 3000), ('Product G', 'Cleanser', 2000), ('Product H', 'Toner', 1700), ('Product I', 'Exfoliant', 1600), ('Product J', 'Serum', 2200);<end_of_turn>\\n<start_of_turn>model\\nSELECT Product_Name, Sales FROM Skincare_Sales_USA WHERE Country = 'USA' ORDER BY Sales DESC LIMIT 5;\\n\\nExplanation: The SQL query selects the Product_Name and Sales columns from the Skincare_Sales_USA table for the rows where Country is 'USA'. The ORDER BY clause orders the results by the Sales column in descending order and the LIMIT clause limits the results to the top 5 rows with the highest Sales.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the total rainfall in Oregon in the past week?\\n\\nContext: CREATE TABLE Weather (location VARCHAR(50), rainfall INT, timestamp TIMESTAMP);<end_of_turn>\\n<start_of_turn>model\\nSELECT SUM(rainfall) FROM Weather WHERE location = 'Oregon' AND timestamp > NOW() - INTERVAL '1 week';\\n\\nExplanation: This query calculates the total rainfall in Oregon in the past week by filtering the Weather table based on the location and timestamp, then calculating the sum of the rainfall.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the number of 'education_workshops' conducted in 'Asia'?\\n\\nContext: CREATE TABLE community_education(id INT, workshop_name VARCHAR(50), workshop_location VARCHAR(50), num_participants INT); INSERT INTO community_education(id, workshop_name, workshop_location, num_participants) VALUES (1, 'Wildlife Conservation Basics', 'Africa', 50), (2, 'Endangered Species Protection', 'Asia', 75), (3, 'Marine Life Education', 'Europe', 60);<end_of_turn>\\n<start_of_turn>model\\nSELECT COUNT(*) FROM community_education WHERE workshop_location = 'Asia';\\n\\nExplanation: The query counts the number of 'education_workshops' conducted in 'Asia'.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nCount of cultural competency trainings per community health worker.\\n\\nContext: CREATE TABLE CulturalCompetencyTrainings (TrainingId INT, CHWId INT, TrainingDate DATE); INSERT INTO CulturalCompetencyTrainings (TrainingId, CHWId, TrainingDate) VALUES (1, 1, '2021-01-01'), (2, 1, '2021-02-01'), (3, 2, '2021-03-01');<end_of_turn>\\n<start_of_turn>model\\nSELECT CHWId, COUNT(*) AS TrainingCount FROM CulturalCompetencyTrainings GROUP BY CHWId;\\n\\nExplanation: This query counts the number of cultural competency trainings per community health worker (CHWId) by grouping by CHWId in the CulturalCompetencyTrainings table.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the difference in the number of members between unions that are involved in workplace safety and those that are not in Arizona?\\n\\nContext: CREATE TABLE union_safety (id INT, union_name TEXT, state TEXT, involved_in_safety BOOLEAN); INSERT INTO union_safety (id, union_name, state, involved_in_safety) VALUES (1, 'Union M', 'Arizona', true), (2, 'Union N', 'Arizona', false), (3, 'Union O', 'Arizona', true);<end_of_turn>\\n<start_of_turn>model\\nSELECT SUM(involved_in_safety) - SUM(NOT involved_in_safety) FROM union_safety WHERE state = 'Arizona';\\n\\nExplanation: This query calculates the difference in the number of members between unions that are involved in workplace safety and those that are not in Arizona by subtracting the sum of not involved in safety from the sum of involved in safety.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the total donation amount per region in Q1 2022?\\n\\nContext: CREATE TABLE Donations (DonationID INT, DonorID INT, DonationDate DATE, DonationAmount FLOAT, DonorRegion TEXT);<end_of_turn>\\n<start_of_turn>model\\nSELECT DonorRegion, SUM(DonationAmount) as 'Total Donation Amount' FROM Donations WHERE DonationDate BETWEEN '2022-01-01' AND '2022-03-31' GROUP BY DonorRegion;\\n\\nExplanation: The SQL query calculates the total donation amount per region in Q1 2022 by grouping the donations by donor region and summing the donation amount.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nInsert a new animal named Koala with a population of 500 into the 'animals' table.\\n\\nContext: CREATE TABLE animals (id INT PRIMARY KEY, name VARCHAR(50), population INT);<end_of_turn>\\n<start_of_turn>model\\nINSERT INTO animals (name, population) VALUES ('Koala', 500);\\n\\nExplanation: The SQL query adds a new record to the 'animals' table with Koala as the name and 500 as the population using the INSERT INTO statement.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the total number of workers employed by factories in each country?\\n\\nContext: CREATE TABLE factories (factory_id INT, factory_name VARCHAR(255), country VARCHAR(255), total_workers INT);<end_of_turn>\\n<start_of_turn>model\\nSELECT country, SUM(total_workers) FROM factories GROUP BY country;\\n\\nExplanation: This SQL query calculates the total number of workers employed by factories in each country. It does so by selecting the country column and the sum of the total_workers column, but groups the results by the country column, resulting in a separate sum for each unique country.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhich energy storage technology has the highest capacity in the EnergyStorage table?\\n\\nContext: CREATE TABLE EnergyStorage (technology TEXT, capacity INT); INSERT INTO EnergyStorage (technology, capacity) VALUES ('Lithium-ion', 3000), ('Lead-acid', 2000);<end_of_turn>\\n<start_of_turn>model\\nSELECT technology, capacity FROM EnergyStorage ORDER BY capacity DESC LIMIT 1;\\n\\nExplanation: We order the EnergyStorage table by capacity in descending order and select the top row to find the energy storage technology with the highest capacity.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nShow all aircraft models and their associated manufacturers and launch dates.\\n\\nContext: CREATE TABLE aircraft (aircraft_id INT, model VARCHAR(100), manufacturer VARCHAR(100), launch_date DATE); INSERT INTO aircraft (aircraft_id, model, manufacturer, launch_date) VALUES (1, 'Aircraft Model 1', 'Aviation Inc.', '2015-01-01'); INSERT INTO aircraft (aircraft_id, model, manufacturer, launch_date) VALUES (2, 'Aircraft Model 2', 'Flight Corp.', '2020-05-15');<end_of_turn>\\n<start_of_turn>model\\nSELECT model, manufacturer, launch_date FROM aircraft;\\n\\nExplanation: This query selects the model, manufacturer, and launch_date columns from the aircraft table.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the average age of artists in the 'artists' table?\\n\\nContext: CREATE TABLE artists (artist_id INT, name VARCHAR(50), age INT, country VARCHAR(50)); INSERT INTO artists (artist_id, name, age, country) VALUES (1, 'Pablo Picasso', 91, 'Spain'); INSERT INTO artists (artist_id, name, age, country) VALUES (2, 'Francis Bacon', 82, 'Ireland');<end_of_turn>\\n<start_of_turn>model\\nSELECT AVG(age) FROM artists;\\n\\nExplanation: The SQL query calculates the average age of artists by using the AVG function on the 'age' column from the 'artists' table.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the total number of posts, comments, and likes for users in the United States and Canada, by month, for the past year?\\n\\nContext: CREATE TABLE user_behavior (user_id INT, post_date DATE, post_type VARCHAR(10), activity INT); INSERT INTO user_behavior (user_id, post_date, post_type, activity) VALUES (1, '2021-01-01', 'post', 10), (1, '2021-01-05', 'comment', 5), (2, '2021-01-03', 'like', 1);<end_of_turn>\\n<start_of_turn>model\\nSELECT post_date, SUM(activity) as total_activity FROM (SELECT post_date, activity FROM user_behavior WHERE post_type = 'post' AND user_id IN (SELECT user_id FROM user_info WHERE country IN ('USA', 'Canada')) UNION ALL SELECT post_date, activity FROM user_behavior WHERE post_type = 'comment' AND user_id IN (SELECT user_id FROM user_info WHERE country IN ('USA', 'Canada')) UNION ALL SELECT post_date, activity FROM user_behavior WHERE post_type = 'like' AND user_id IN (SELECT user_id FROM user_info WHERE country IN ('USA', 'Canada'))) as total_activity_grouped_by_date GROUP BY post_date ORDER BY post_date;\\n\\nExplanation: This query calculates the total activity (posts, comments, and likes) for users in the USA and Canada, for each month in the past year. It does this by selecting the post_date and activity from user_behavior table, where post_type is 'post', 'comment', or 'like', and user_id is in the user_info table for users from either the USA or Canada. The UNION ALL operator is used to combine the results of these three SELECT statements, and then the SUM function is used to calculate the total activity for each post_date, which is grouped by month.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nInsert a new record into the Albums table for the album 'DAMN' by Kendrick Lamar released in 2017.\\n\\nContext: CREATE TABLE Albums (AlbumID INT, AlbumName VARCHAR(100), ReleaseYear INT, Artist VARCHAR(100));<end_of_turn>\\n<start_of_turn>model\\nINSERT INTO Albums (AlbumID, AlbumName, ReleaseYear, Artist) VALUES (1, 'DAMN', 2017, 'Kendrick Lamar');\\n\\nExplanation: A new record is inserted into the Albums table for the album 'DAMN' by Kendrick Lamar, released in the year 2017.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nFind the top 3 countries with the highest renewable energy production (in GWh) in 2019.\\n\\nContext: CREATE TABLE renewable_energy (country VARCHAR(50), year INT, renewable_energy_production FLOAT); INSERT INTO renewable_energy (country, year, renewable_energy_production) VALUES ('USA', 2019, 600.1), ('Germany', 2019, 500.9), ('Spain', 2019, 400.5), ('Brazil', 2019, 700.3), ('India', 2019, 800.2);<end_of_turn>\\n<start_of_turn>model\\nSELECT r.country, r.renewable_energy_production FROM renewable_energy r WHERE r.year = 2019 ORDER BY r.renewable_energy_production DESC LIMIT 3;\\n\\nExplanation: The SQL query finds the top 3 countries with the highest renewable energy production in 2019 by selecting the country and renewable_energy_production columns from the renewable_energy table where the year is 2019, ordering the results by renewable_energy_production in descending order, and limiting the results to the top 3.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the total number of graduate students per department?\\n\\nContext: CREATE TABLE departments (id INT, name VARCHAR(255)); INSERT INTO departments (id, name) VALUES (1, 'Biology'), (2, 'Mathematics'), (3, 'Sociology'); CREATE TABLE graduate_students (id INT, department_id INT, gender VARCHAR(10), num_students INT); INSERT INTO graduate_students (id, department_id, gender, num_students) VALUES (1, 1, 'Female', 50), (2, 1, 'Male', 30), (3, 2, 'Female', 20), (4, 2, 'Non-binary', 10), (5, 3, 'Male', 40), (6, 3, 'Female', 35);<end_of_turn>\\n<start_of_turn>model\\nSELECT d.name, SUM(gs.num_students)  FROM departments d JOIN graduate_students gs ON d.id = gs.department_id GROUP BY d.name;\\n\\nExplanation: This query calculates the total number of graduate students per department by joining the departments and graduate_students tables on the department_id column. It then groups the data by department name, and calculates the sum of the num_students column for each group.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nHow many non-vegan brands have more than 10 products in the makeup category?\\n\\nContext: CREATE TABLE products (product_id INT PRIMARY KEY, product_name TEXT, product_type TEXT, brand_id INT, is_vegan BOOLEAN); INSERT INTO products (product_id, product_name, product_type, brand_id, is_vegan) VALUES (1, 'Lipstick', 'Makeup', 1, false), (2, 'Mascara', 'Makeup', 2, false), (3, 'Eyeshadow', 'Makeup', 3, false), (4, 'Blush', 'Makeup', 3, true), (5, 'Foundation', 'Makeup', 4, false); INSERT INTO brands (brand_id, brand_name, is_vegan) VALUES (1, 'Lancome', false), (2, 'Maybelline', false), (3, 'Tarte', true), (4, 'Urban Decay', false);<end_of_turn>\\n<start_of_turn>model\\nSELECT COUNT(DISTINCT brand_id) FROM products WHERE product_type = 'Makeup' AND is_vegan = false GROUP BY brand_id HAVING COUNT(DISTINCT product_id) > 10;\\n\\nExplanation: This query identifies non-vegan brands with more than 10 unique makeup products.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nHow many genetic research projects were completed in Africa in 2018?\\n\\nContext: CREATE TABLE genetic_research (id INT, project_name VARCHAR(50), completion_year INT, region VARCHAR(50)); INSERT INTO genetic_research (id, project_name, completion_year, region) VALUES (1, 'Genome Mapping', 2019, 'North America'); INSERT INTO genetic_research (id, project_name, completion_year, region) VALUES (2, 'DNA Sequencing', 2020, 'South America'); INSERT INTO genetic_research (id, project_name, completion_year, region) VALUES (3, 'CRISPR Therapy', 2018, 'Africa');<end_of_turn>\\n<start_of_turn>model\\nSELECT COUNT(*) FROM genetic_research WHERE completion_year = 2018 AND region = 'Africa';\\n\\nExplanation: We count the number of genetic research projects completed in Africa in 2018 by selecting all records and applying the COUNT() function, filtering by the completion year 2018 and region 'Africa'.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nHow many members have a Premium membership in the Running club?\\n\\nContext: CREATE TABLE Members (MemberID INT, Age INT, Gender VARCHAR(10), MembershipType VARCHAR(20)); INSERT INTO Members (MemberID, Age, Gender, MembershipType) VALUES (1, 35, 'Female', 'Premium'), (2, 45, 'Male', 'Basic'), (3, 28, 'Female', 'Premium'), (4, 32, 'Male', 'Premium'), (5, 48, 'Female', 'Basic'); CREATE TABLE ClubMembership (MemberID INT, Club VARCHAR(20)); INSERT INTO ClubMembership (MemberID, Club) VALUES (1, 'Cycling'), (2, 'Yoga'), (3, 'Running'), (4, 'Pilates'), (5, 'Cycling');<end_of_turn>\\n<start_of_turn>model\\nSELECT COUNT(*) FROM Members JOIN ClubMembership ON Members.MemberID = ClubMembership.MemberID WHERE Members.MembershipType = 'Premium' AND ClubMembership.Club = 'Running';\\n\\nExplanation: We are joining the Members table with the ClubMembership table based on the MemberID. We then filter the records to only those where the MembershipType is 'Premium' and the Club is 'Running' and calculate the count of the records using the COUNT function.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the recycling rate in the city of Mexico City in 2021?\\n\\nContext: CREATE TABLE mexico_recycling_rates (city varchar(255), year int, rate decimal(5,2)); INSERT INTO mexico_recycling_rates (city, year, rate) VALUES ('Mexico City', 2019, 30.5), ('Mexico City', 2020, 32.2), ('Mexico City', 2021, 35.0);<end_of_turn>\\n<start_of_turn>model\\nSELECT rate FROM mexico_recycling_rates WHERE city = 'Mexico City' AND year = 2021;\\n\\nExplanation: This query calculates the recycling rate for Mexico City in 2021 by selecting the rate column where 'city' is 'Mexico City' and 'year' is 2021.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the total biomass of fish in each farm, ranked by the most to least?\\n\\nContext: CREATE TABLE fish_farms (id INT, name VARCHAR(255)); INSERT INTO fish_farms (id, name) VALUES (1, 'Farm A'), (2, 'Farm B'), (3, 'Farm C'); CREATE TABLE fish_inventory (id INT, farm_id INT, species_id INT, biomass FLOAT); INSERT INTO fish_inventory (id, farm_id, species_id, biomass) VALUES (1, 1, 1, 1000), (2, 1, 2, 800), (3, 2, 1, 1200), (4, 3, 2, 900), (5, 1, 3, 1500);<end_of_turn>\\n<start_of_turn>model\\nSELECT f.name, SUM(fi.biomass) as total_biomass FROM fish_inventory fi JOIN fish_farms f ON fi.farm_id = f.id GROUP BY f.name ORDER BY SUM(fi.biomass) DESC;\\n\\nExplanation: This query calculates the total biomass of fish in each farm and ranks them from most to least. It does this by joining the fish_farms table and fish_inventory table on the farm_id column. It then groups the data by the name column in the fish_farms table and calculates the sum of the biomass column in the fish_inventory table for each group. Finally, it orders the data by the sum of the biomass column in descending order.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nFind the total gas production for each country in 2018\\n\\nContext: CREATE TABLE gas_production (country VARCHAR(50), gas_production FLOAT); INSERT INTO gas_production (country, gas_production) VALUES ('Canada', 10000), ('USA', 20000), ('Mexico', 15000), ('Brazil', 12000), ('Argentina', 8000);<end_of_turn>\\n<start_of_turn>model\\nSELECT country, SUM(gas_production) as total_gas_production FROM gas_production WHERE YEAR(timestamp) = 2018 GROUP BY country;\\n\\nExplanation: The SQL query calculates the total gas production for each country in 2018. It filters the data where the year is 2018 using the YEAR() function. It then groups the filtered data by country using the GROUP BY clause, and calculates the sum of the gas_production for each group.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the number of hospitals and clinics in each state, grouped by hospital and clinic type?\\n\\nContext: CREATE TABLE hospitals (id INT, name TEXT, state TEXT, location TEXT, type TEXT, num_beds INT); INSERT INTO hospitals (id, name, state, location, type, num_beds) VALUES (1, 'Hospital A', 'State A', 'Urban', 'Teaching', 200), (2, 'Hospital B', 'State B', 'Rural', 'Community', 150), (3, 'Clinic C', 'State A', 'Urban', 'Primary Care', 25); CREATE TABLE clinics (id INT, name TEXT, state TEXT, location TEXT, type TEXT, num_providers INT); INSERT INTO clinics (id, name, state, location, type, num_providers) VALUES (1, 'Clinic X', 'State A', 'Urban', 'Specialty Care', 10), (2, 'Clinic Y', 'State B', 'Rural', 'Urgent Care', 8), (3, 'Clinic Z', 'State A', 'Urban', 'Primary Care', 12);<end_of_turn>\\n<start_of_turn>model\\nSELECT s.state, h.type as hospital_type, c.type as clinic_type, COUNT(h.id) as num_hospitals, COUNT(c.id) as num_clinics FROM (SELECT DISTINCT state FROM hospitals UNION SELECT DISTINCT state FROM clinics) as s LEFT JOIN hospitals h ON s.state = h.state LEFT JOIN clinics c ON s.state = c.state GROUP BY s.state, h.type, c.type;\\n\\nExplanation: The SQL query first creates two tables, hospitals and clinics, with relevant columns and data. It then uses a subquery to get the unique list of states from both tables. This list is used to left join the hospitals and clinics tables on state. Finally, it groups the result by state, hospital type, and clinic type and calculates the number of hospitals and clinics for each combination.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nHow many wildlife sanctuaries in Greenland have experienced changes in permafrost conditions during the past 5 years?\\n\\nContext: CREATE TABLE WildlifeSanctuaries(sanctuary TEXT, permafrost TEXT, date DATE); INSERT INTO WildlifeSanctuaries(sanctuary, permafrost, date) VALUES ('Kangerlussuaq', 'Stable', '2017-01-01'), ('Kangerlussuaq', 'Unstable', '2018-01-01');<end_of_turn>\\n<start_of_turn>model\\nSELECT COUNT(*) FROM WildlifeSanctuaries WHERE permafrost != 'Stable' AND date BETWEEN '2017-01-01' AND '2022-01-01';\\n\\nExplanation: The query calculates the count of wildlife sanctuaries in Greenland that have experienced changes in permafrost conditions during the past 5 years.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the sum of donations and volunteer hours for each organization in Q1 2022?\\n\\nContext: CREATE TABLE donations (donor_id INT, organization_id INT, amount DECIMAL(10,2), donation_date DATE); INSERT INTO donations (donor_id, organization_id, amount, donation_date) VALUES (1, 101, 500.00, '2022-01-01'), (2, 102, 350.00, '2022-01-15'), (3, 101, 200.00, '2022-01-30'); CREATE TABLE volunteer_hours (volunteer_id INT, organization_id INT, hours INT, volunteer_date DATE); INSERT INTO volunteer_hours (volunteer_id, organization_id, hours, volunteer_date) VALUES (1, 101, 10, '2022-01-05'), (2, 102, 7, '2022-01-10'), (3, 101, 8, '2022-01-20');<end_of_turn>\\n<start_of_turn>model\\nSELECT organization_id, SUM(amount) + SUM(hours) as total FROM (SELECT organization_id, amount FROM donations WHERE donation_date BETWEEN '2022-01-01' AND '2022-01-31' UNION ALL SELECT organization_id, hours FROM volunteer_hours WHERE volunteer_date BETWEEN '2022-01-01' AND '2022-01-31') AS total_data GROUP BY organization_id;\\n\\nExplanation: This query calculates the sum of donations and volunteer hours for each organization in Q1 2022 by creating two tables (donations and volunteer_hours), inserting sample data for Q1 2022, and then using UNION ALL to combine the two tables. Finally, the query groups the results by organization_id and calculates the total sum of donations and volunteer hours.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat was the average ticket price for concerts in a specific city?\\n\\nContext: CREATE TABLE Concerts (id INT, city VARCHAR(20), price FLOAT, tickets_sold INT); INSERT INTO Concerts (id, city, price, tickets_sold) VALUES (1, 'Chicago', 100.0, 200), (2, 'Chicago', 120.0, 150), (3, 'New York', 150.0, 250);<end_of_turn>\\n<start_of_turn>model\\nSELECT AVG(price) FROM Concerts WHERE city = 'Chicago';\\n\\nExplanation: This query calculates the average ticket price for concerts in a specific city by averaging the price column where the city is 'Chicago'.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the total climate finance provided to each sector in Africa, ranked from highest to lowest?\\n\\nContext: CREATE TABLE ClimateFinanceAfrica (Sector VARCHAR(50), Year INT, Amount INT); INSERT INTO ClimateFinanceAfrica (Sector, Year, Amount) VALUES ('Renewable Energy', 2010, 2000000), ('Energy Efficiency', 2015, 2500000), ('Land Use', 2020, 3000000), ('Water Management', 2010, 1500000), ('Waste Management', 2015, 1750000);<end_of_turn>\\n<start_of_turn>model\\nSELECT Sector, SUM(Amount) AS TotalFinance FROM ClimateFinanceAfrica GROUP BY Sector ORDER BY TotalFinance DESC;\\n\\nExplanation: The SQL query calculates the total climate finance provided to each sector in Africa, ranked from highest to lowest. It uses the ClimateFinanceAfrica table with the columns Sector, Year, and Amount. The query groups the data by Sector, calculates the total amount of climate finance (TotalFinance) for each sector using the SUM function, and orders the results by TotalFinance in descending order.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the average sustainability rating for brands that use organic cotton?\\n\\nContext: CREATE TABLE BRAND_SUSTAINABILITY (id INT PRIMARY KEY, brand_id INT, uses_organic_cotton BOOLEAN, sustainability_rating FLOAT); CREATE TABLE SUSTAINABILITY_RATINGS (id INT PRIMARY KEY, brand_id INT, rating FLOAT, rating_date DATE);<end_of_turn>\\n<start_of_turn>model\\nSELECT AVG(sustainability_rating) FROM BRAND_SUSTAINABILITY JOIN SUSTAINABILITY_RATINGS ON BRAND_SUSTAINABILITY.brand_id = SUSTAINABILITY_RATINGS.brand_id WHERE uses_organic_cotton = TRUE;\\n\\nExplanation: This query joins the BRAND_SUSTAINABILITY and SUSTAINABILITY_RATINGS tables on the brand_id column, filters for rows where uses_organic_cotton is TRUE, and calculates the average sustainability_rating. It helps to analyze the average sustainability rating for brands that use organic cotton.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the average CO2 emissions reduction (in metric tons) for each type of carbon offset project?\\n\\nContext: CREATE TABLE carbon_offset_projects (id INT, project_name VARCHAR(255), project_type VARCHAR(255), co2_emissions_reduction FLOAT);<end_of_turn>\\n<start_of_turn>model\\nSELECT project_type, AVG(co2_emissions_reduction) FROM carbon_offset_projects GROUP BY project_type;\\n\\nExplanation: This SQL query calculates the average CO2 emissions reduction (in metric tons) for each type of carbon offset project by finding the average of the co2_emissions_reduction column for each project_type value and grouping the results by the project_type column.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nTop 3 countries with the most Explainable AI patents granted?\\n\\nContext: CREATE TABLE patent (id INT, title VARCHAR(255), country VARCHAR(255), date DATE); INSERT INTO patent (id, title, country, date) VALUES (1, 'Explainable AI System', 'USA', '2021-05-15'), (2, 'Interpretable AI Framework', 'Germany', '2020-08-23'), (3, 'Transparent AI Model', 'Canada', '2019-12-18');<end_of_turn>\\n<start_of_turn>model\\nSELECT country, COUNT(*) as num_patents, RANK() OVER (PARTITION BY 1 ORDER BY COUNT(*) DESC) as rank FROM patent GROUP BY country;\\n\\nExplanation: Ranks countries by the number of Explainable AI patents they have, using window functions to rank and partition the data.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhich routes have a transfer to the Orange Line?\\n\\nContext: CREATE TABLE OrangeTransfers (route VARCHAR(20), transfer VARCHAR(20)); INSERT INTO OrangeTransfers (route, transfer) VALUES ('1', 'Orange Line'), ('2', 'Orange Line');<end_of_turn>\\n<start_of_turn>model\\nSELECT transfer FROM OrangeTransfers WHERE route = 'Orange Line';\\n\\nExplanation: This query selects the 'transfer' column from the 'OrangeTransfers' table where the 'route' is 'Orange Line', returning routes that have a transfer to the Orange Line.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the average donation amount per donor from Latin America?\\n\\nContext: CREATE TABLE donations (id INT, donor_id INT, donation_amount DECIMAL(10, 2), donor_country VARCHAR(50)); INSERT INTO donations (id, donor_id, donation_amount, donor_country) VALUES (1, 1, 200.00, 'Brazil'); INSERT INTO donations (id, donor_id, donation_amount, donor_country) VALUES (2, 2, 150.00, 'Argentina');<end_of_turn>\\n<start_of_turn>model\\nSELECT AVG(donation_amount) as avg_donation_amount FROM (SELECT donation_amount, donor_country, ROW_NUMBER() OVER (PARTITION BY donor_country ORDER BY donation_amount DESC) as rank FROM donations WHERE donor_country IN ('Brazil', 'Argentina', 'Colombia', 'Mexico', 'Chile')) as donor_ranks WHERE rank = 1;\\n\\nExplanation: This SQL query calculates the average donation amount per donor from Latin America by partitioning the donations table using the PARTITION BY clause and the donor_country column, ordering the results by the donation_amount column using the ORDER BY clause, and assigning a rank to each row using the ROW_NUMBER() function. The outer query calculates the average donation amount for the top donor from each country by filtering the results to only include the top donor from each country using the WHERE clause and the rank column.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhich marine species are found in the Arctic Ocean?\\n\\nContext: CREATE TABLE marine_species (name TEXT, habitat TEXT); INSERT INTO marine_species (name, habitat) VALUES ('Polar Bear', 'Arctic'), ('Narwhal', 'Arctic'), ('Walrus', 'Arctic'), ('Beluga Whale', 'Arctic');<end_of_turn>\\n<start_of_turn>model\\nSELECT name FROM marine_species WHERE habitat = 'Arctic';\\n\\nExplanation: This query filters the marine species table to only include rows where the habitat column is equal to 'Arctic', then returns the name column of those rows.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nHow many women-led businesses received funding for rural infrastructure projects since 2015?\\n\\nContext: CREATE TABLE Businesses (id INT PRIMARY KEY, gender VARCHAR(10), funded_project BOOLEAN);CREATE TABLE RuralInfrastructure (id INT PRIMARY KEY, business_id INT);<end_of_turn>\\n<start_of_turn>model\\nSELECT COUNT(*) FROM Businesses INNER JOIN RuralInfrastructure ON Businesses.id = RuralInfrastructure.business_id WHERE gender = 'women' AND funded_project = TRUE AND YEAR(RuralInfrastructure.project_date) >= 2015;\\n\\nExplanation: This query counts the number of women-led businesses that received funding for rural infrastructure projects since 2015 by performing an inner join between Businesses and RuralInfrastructure on business_id. It then filters for women-led businesses and projects funded since 2015.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the total number of animals in 'Habitat_A' and 'Habitat_B'?\\n\\nContext: CREATE TABLE Habitat (name VARCHAR(20), animal_count INT); INSERT INTO Habitat (name, animal_count) VALUES ('Habitat_A', 30), ('Habitat_B', 45);<end_of_turn>\\n<start_of_turn>model\\nSELECT SUM(animal_count) FROM Habitat WHERE name IN ('Habitat_A', 'Habitat_B');\\n\\nExplanation: This query calculates the total animal count by summing the 'animal_count' column for rows where the 'name' column is either 'Habitat_A' or 'Habitat_B'.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the total donation amount by city for cities that start with 'S'?\\n\\nContext: CREATE TABLE donations (donation_id INT, donor_city VARCHAR(50), donation_amount DECIMAL(10,2)); INSERT INTO donations VALUES (1, 'NYC', 100.00), (2, 'LA', 200.00), (3, 'SF', 150.00), (4, 'Seattle', 250.00);<end_of_turn>\\n<start_of_turn>model\\nSELECT SUM(donation_amount) FROM donations WHERE donor_city LIKE 'S%';\\n\\nExplanation: This query calculates the total donation amount by city for cities that start with 'S' by filtering the donor_city with 'S%' and then summing the donation_amount.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nRank healthcare providers by their salary within each clinic location, in the \"rural_clinics\" table with salary data.\\n\\nContext: CREATE TABLE rural_clinics (clinic_location VARCHAR(255), healthcare_provider_name VARCHAR(255), healthcare_provider_salary INT); INSERT INTO rural_clinics (clinic_location, healthcare_provider_name, healthcare_provider_salary) VALUES ('Location1', 'Provider1', 80000), ('Location1', 'Provider2', 85000), ('Location1', 'Provider3', 70000), ('Location2', 'Provider4', 90000), ('Location2', 'Provider5', 80000), ('Location2', 'Provider6', 95000);<end_of_turn>\\n<start_of_turn>model\\nSELECT clinic_location, healthcare_provider_name, healthcare_provider_salary, RANK() OVER (PARTITION BY clinic_location ORDER BY healthcare_provider_salary DESC) AS rank FROM rural_clinics;\\n\\nExplanation: The SQL query ranks healthcare providers by their salary within each clinic location using the window function RANK() with the PARTITION BY clause for clinic location and ORDER BY clause for salary in descending order. This creates a new \"column\" of ranks for each unique combination of clinic location and healthcare provider name.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the average fine for traffic violations in the city of San Francisco?\\n\\nContext: CREATE TABLE traffic_violations (id INT, city VARCHAR(255), amount FLOAT); INSERT INTO traffic_violations (id, city, amount) VALUES (1, 'San Francisco', 150.0), (2, 'San Francisco', 200.0), (3, 'Oakland', 120.0);<end_of_turn>\\n<start_of_turn>model\\nSELECT AVG(amount) FROM traffic_violations WHERE city = 'San Francisco';\\n\\nExplanation: This query calculates the average amount (fine) for traffic violations in the city of San Francisco. It does this by selecting the average value of the 'amount' column, but only for the rows where the 'city' column is equal to 'San Francisco'.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the maximum age of players who have played VR games?\\n\\nContext: CREATE TABLE Players (PlayerID INT, Age INT, Gender VARCHAR(10), HasPlayedVR BOOLEAN); INSERT INTO Players (PlayerID, Age, Gender, HasPlayedVR) VALUES (1, 25, 'Male', true), (2, 30, 'Female', false), (3, 22, 'Male', true);<end_of_turn>\\n<start_of_turn>model\\nSELECT MAX(Age) FROM Players WHERE HasPlayedVR = true;\\n\\nExplanation: Find the maximum age of players who have played VR games by filtering the Players table where HasPlayedVR is true, then getting the maximum value of the Age column.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nIdentify the agricultural innovation metrics that have the lowest average score in Central America and the Caribbean.\\n\\nContext: CREATE TABLE innovation_metrics (id INT, name TEXT, score INT, region TEXT); INSERT INTO innovation_metrics (id, name, score, region) VALUES (1, 'Soil Monitoring', 7, 'Central America'), (2, 'Irrigation', 6, 'Caribbean'), (3, 'Crop Yield', 8, 'Central America'), (4, 'Livestock Management', 9, 'Caribbean');<end_of_turn>\\n<start_of_turn>model\\nSELECT name, AVG(score) as avg_score FROM innovation_metrics WHERE region IN ('Central America', 'Caribbean') GROUP BY name ORDER BY avg_score LIMIT 1;\\n\\nExplanation: This query first calculates the average score for each innovation metric in Central America and the Caribbean by grouping by the 'name' column and using the AVG function. It then orders the results in ascending order based on the average score and returns the name of the metric with the lowest average score.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the maximum production volume in Africa?\\n\\nContext: CREATE TABLE production (id INT, location VARCHAR(20), volume INT); INSERT INTO production (id, location, volume) VALUES (1, 'Africa', 120000); INSERT INTO production (id, location, volume) VALUES (2, 'Africa', 150000); INSERT INTO production (id, location, volume) VALUES (3, 'Asia', 90000);<end_of_turn>\\n<start_of_turn>model\\nSELECT MAX(volume) FROM production WHERE location = 'Africa';\\n\\nExplanation: This query finds the maximum production volume in Africa. It selects the maximum value of the 'volume' column for rows with 'location' equal to 'Africa'.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat was the total donation amount for the year 2020?\\n\\nContext: CREATE TABLE donations (donation_id INT, donor_name VARCHAR(50), donation_amount DECIMAL(10,2), donation_date DATE);<end_of_turn>\\n<start_of_turn>model\\nSELECT SUM(donation_amount) FROM donations WHERE YEAR(donation_date) = 2020;\\n\\nExplanation: This query calculates the total donation amount for the year 2020 by summing the donation_amount values from the donations table where the donation_date is in the year 2020.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nHow many unique colors are available in the 'product_data' table?\\n\\nContext: CREATE TABLE product_data (id INT PRIMARY KEY, color VARCHAR(10));<end_of_turn>\\n<start_of_turn>model\\nSELECT COUNT(DISTINCT color) FROM product_data;\\n\\nExplanation: The SQL query counts the number of unique colors by selecting distinct color values and counting them.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nList the product codes, manufacturing dates, and supplier names for products that were manufactured using raw materials sourced from at least two different countries.\\n\\nContext: CREATE TABLE products (product_code TEXT, manufacturing_date DATE); CREATE TABLE raw_materials (raw_material_id INT, product_code TEXT, source_country TEXT, supplier_name TEXT); INSERT INTO products (product_code, manufacturing_date) VALUES ('P1', '2022-03-15'), ('P2', '2021-12-21'); INSERT INTO raw_materials (raw_material_id, product_code, source_country, supplier_name) VALUES (1, 'P1', 'India', 'Supplier A'), (2, 'P1', 'Mexico', 'Supplier B'), (3, 'P2', 'China', 'Supplier C');<end_of_turn>\\n<start_of_turn>model\\nSELECT products.product_code, products.manufacturing_date, raw_materials.supplier_name FROM products INNER JOIN raw_materials ON products.product_code = raw_materials.product_code GROUP BY products.product_code, products.manufacturing_date HAVING COUNT(DISTINCT raw_materials.source_country) >= 2;\\n\\nExplanation: This SQL query first performs an inner join between the products and raw_materials tables on the product_code field. It then groups the results by the product code and manufacturing date fields and filters the results to only include products that were manufactured using raw materials sourced from at least two different countries. Finally, it selects the product code, manufacturing date, and supplier name columns to display in the result set.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat was the change in water consumption between 2019 and 2020 for each city?\\n\\nContext: CREATE TABLE city_water_usage (city VARCHAR(50), year INT, consumption INT); INSERT INTO city_water_usage (city, year, consumption) VALUES ('CityA', 2019, 1200), ('CityA', 2020, 1500), ('CityB', 2019, 1000), ('CityB', 2020, 1100);<end_of_turn>\\n<start_of_turn>model\\nSELECT a.city, (a.consumption - b.consumption) AS consumption_change FROM city_water_usage a INNER JOIN city_water_usage b ON a.city = b.city AND a.year = 2020 AND b.year = 2019;\\n\\nExplanation: The query calculates the change in water consumption between the years 2019 and 2020 for each city by joining the city_water_usage table on the city column and the year columns and subtracting the consumption amounts.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the average cost of military equipment maintenance for Philippines and Indonesia?\\n\\nContext: CREATE TABLE military_equipment_maintenance (id INT, country VARCHAR(50), cost FLOAT); INSERT INTO military_equipment_maintenance (id, country, cost) VALUES (1, 'Philippines', 750000), (2, 'Philippines', 700000), (3, 'Indonesia', 800000);<end_of_turn>\\n<start_of_turn>model\\nSELECT AVG(cost) FROM military_equipment_maintenance WHERE country IN ('Philippines', 'Indonesia') GROUP BY country;\\n\\nExplanation: This query calculates the average cost of military equipment maintenance for Philippines and Indonesia by selecting the AVG function on the cost column, filtering the data where the country is either Philippines or Indonesia, and grouping by country.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the total weight of fair trade coffee beans imported to Australia?\\n\\nContext: CREATE TABLE imports (id INT, product TEXT, weight FLOAT, is_fair_trade BOOLEAN, country TEXT); INSERT INTO imports (id, product, weight, is_fair_trade, country) VALUES (1, 'Coffee Beans', 150.0, true, 'Australia'); INSERT INTO imports (id, product, weight, is_fair_trade, country) VALUES (2, 'Coffee Beans', 200.0, false, 'Australia');<end_of_turn>\\n<start_of_turn>model\\nSELECT SUM(weight) FROM imports WHERE product = 'Coffee Beans' AND is_fair_trade = true AND country = 'Australia';\\n\\nExplanation: This query calculates the total weight of fair trade coffee beans imported to Australia by using the SUM() function, filtering by the product, is_fair_trade, and country columns.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the average watch time for movies directed by women in Asia?\\n\\nContext: CREATE TABLE Directors (DirectorID INT, DirectorName TEXT, Gender TEXT, Country TEXT); INSERT INTO Directors (DirectorID, DirectorName, Gender, Country) VALUES (1, 'Kathryn Bigelow', 'Female', 'Japan');<end_of_turn>\\n<start_of_turn>model\\nSELECT AVG(WatchTime) FROM Movies JOIN Directors ON Movies.DirectorID = Directors.DirectorID WHERE Directors.Gender = 'Female' AND Directors.Country LIKE 'Asia%';\\n\\nExplanation: This query calculates the average watch time for movies directed by women in Asia by joining the Movies table with the Directors table on DirectorID, filtering for movies directed by women in Asian countries, and averaging their watch time.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the total maintenance cost for military equipment in the European region in the first half of 2021?\\n\\nContext: CREATE TABLE military_equipment (equipment_id INT, region VARCHAR(10), maintenance_cost DECIMAL(10,2), maintenance_date DATE); INSERT INTO military_equipment VALUES (1, 'Europe', 5000.00, '2021-03-01'), (2, 'Asia', 6000.00, '2021-04-01'), (3, 'Europe', 4000.00, '2021-06-01');<end_of_turn>\\n<start_of_turn>model\\nSELECT SUM(maintenance_cost) FROM military_equipment WHERE region = 'Europe' AND maintenance_date >= DATE '2021-01-01' AND maintenance_date < DATE '2021-07-01';\\n\\nExplanation: This query calculates the total maintenance cost for military equipment in the European region in the first half of 2021 by summing the maintenance_cost where the region is 'Europe' and the maintenance_date falls within the first half of 2021.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the safety rating of the most recent vehicle manufactured by Honda?\\n\\nContext: CREATE TABLE Vehicle (id INT, make VARCHAR(255), model VARCHAR(255), safety_rating FLOAT, manufacture_date DATE); INSERT INTO Vehicle (id, make, model, safety_rating, manufacture_date) VALUES (1, 'Honda', 'Civic', 5.0, '2022-01-01');<end_of_turn>\\n<start_of_turn>model\\nSELECT safety_rating FROM Vehicle WHERE make = 'Honda' AND manufacture_date = (SELECT MAX(manufacture_date) FROM Vehicle WHERE make = 'Honda');\\n\\nExplanation: This query finds the most recent vehicle manufactured by Honda by using a subquery to find the maximum manufacture_date for Honda vehicles, and then filtering the Vehicle table by make and manufacture_date to find the safety_rating.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nHow many sustainable tourism experiences are available in Sydney?\\n\\nContext: CREATE TABLE experiences (experience_id INT, experience_name TEXT, city TEXT, sustainable BOOLEAN, type TEXT); INSERT INTO experiences (experience_id, experience_name, city, sustainable, type) VALUES (1, 'Eco-Hiking Sydney', 'Sydney', TRUE, 'Outdoor'), (2, 'Sustainable Food Tour Sydney', 'Sydney', TRUE, 'Culinary'), (3, 'City Sightseeing Sydney', 'Sydney', FALSE, 'Sightseeing');<end_of_turn>\\n<start_of_turn>model\\nSELECT COUNT(*) FROM experiences WHERE city = 'Sydney' AND sustainable = TRUE;\\n\\nExplanation: This query counts the number of sustainable tourism experiences available in Sydney. It filters the results based on the city and sustainability, using the WHERE clause.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nFind the number of streams and revenue for songs by artist 'Taylor Swift' in the United States, grouped by month.\\n\\nContext: CREATE TABLE Streams (song_id INT, artist VARCHAR(50), country VARCHAR(50), date DATE, streams INT, revenue FLOAT);<end_of_turn>\\n<start_of_turn>model\\nSELECT DATE_FORMAT(date, '%Y-%m') AS month, SUM(streams), SUM(revenue) FROM Streams WHERE artist = 'Taylor Swift' AND country = 'United States' GROUP BY month;\\n\\nExplanation: This SQL query retrieves the number of streams and revenue for songs by artist 'Taylor Swift' in the United States, grouped by month, by summing up the streams and revenue columns in the Streams table where the artist is 'Taylor Swift' and the country is the United States. The DATE_FORMAT function formats the date column as a string in the format 'YYYY-MM', and the GROUP BY clause groups the rows by month.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nInsert records into the designer_garments table, associating designers from India with the 'Rayon' garment.\\n\\nContext: CREATE TABLE designer (id INT PRIMARY KEY, name VARCHAR(255), country_origin VARCHAR(255)); CREATE TABLE garment (id INT PRIMARY KEY, garment_name VARCHAR(255)); CREATE TABLE designer_garments (id INT PRIMARY KEY, designer_id INT, garment_id INT, FOREIGN KEY (designer_id) REFERENCES designer(id), FOREIGN KEY (garment_id) REFERENCES garment(id)); INSERT INTO designer (id, name, country_origin) VALUES (1, 'Neha', 'India'), (2, 'Alex', 'USA'); INSERT INTO garment (id, garment_name) VALUES (1, 'Rayon'), (2, 'Silk');<end_of_turn>\\n<start_of_turn>model\\nINSERT INTO designer_garments (designer_id, garment_id) SELECT designer.id, garment.id FROM designer INNER JOIN garment ON designer.country_origin = 'India' AND garment.garment_name = 'Rayon';\\n\\nExplanation: This SQL query inserts records into the designer_garments table, associating designers from India with the 'Rayon' garment. It does so by performing an inner join between the designer and garment tables, filtering the records to only include designers from India and garments named 'Rayon', and then inserting records into the designer_garments table using the id from the designer and garment tables.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the maximum revenue of fair trade cosmetic products in Sweden?\\n\\nContext: CREATE TABLE FairTradeProducts (product VARCHAR(255), country VARCHAR(255), revenue DECIMAL(10,2)); INSERT INTO FairTradeProducts (product, country, revenue) VALUES ('Moisturizer', 'Sweden', 2000), ('Cleanser', 'Sweden', 1800), ('Toner', 'Sweden', 1500);<end_of_turn>\\n<start_of_turn>model\\nSELECT MAX(revenue) FROM FairTradeProducts WHERE country = 'Sweden';\\n\\nExplanation: This query finds the maximum revenue of fair trade cosmetic products in Sweden by finding the maximum revenue values in the FairTradeProducts table where the country is 'Sweden'.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhich year had the highest Europium production in Africa?\\n\\nContext: CREATE TABLE production (year INT, region VARCHAR(10), element VARCHAR(10), quantity INT); INSERT INTO production (year, region, element, quantity) VALUES (2015, 'Africa', 'Europium', 1200), (2016, 'Africa', 'Europium', 1400), (2017, 'Africa', 'Europium', 1500), (2018, 'Africa', 'Europium', 1700), (2019, 'Africa', 'Europium', 1800);<end_of_turn>\\n<start_of_turn>model\\nSELECT year, MAX(quantity) FROM production WHERE element = 'Europium' AND region = 'Africa' GROUP BY year;\\n\\nExplanation: This query calculates the highest production quantity for Europium in Africa for each year by using the MAX function of the quantity column and the GROUP BY clause for rows where the element is Europium and the region is Africa.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nList the drought-impacted counties in Colorado and their average water usage.\\n\\nContext: CREATE TABLE co_drought_impact (county TEXT, state TEXT, avg_usage FLOAT); INSERT INTO co_drought_impact (county, state, avg_usage) VALUES ('Adams County', 'Colorado', 123.5), ('Arapahoe County', 'Colorado', 234.6), ('Denver County', 'Colorado', 345.7);<end_of_turn>\\n<start_of_turn>model\\nSELECT county, avg_usage FROM co_drought_impact\\n\\nExplanation: plaintext{The query selects the county and average water usage from the co_drought_impact table for the state Colorado.}<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nHow many new broadband subscribers were added in the last month in the 'rural' region?\\n\\nContext: CREATE TABLE broadband_subscribers (id INT, region VARCHAR(20), subscription_date DATE); INSERT INTO broadband_subscribers (id, region, subscription_date) VALUES (1, 'urban', '2022-01-01'), (2, 'rural', '2022-03-15'), (3, 'urban', '2022-02-01'), (4, 'rural', '2022-01-05');<end_of_turn>\\n<start_of_turn>model\\nSELECT COUNT(*) FROM broadband_subscribers WHERE region = 'rural' AND subscription_date BETWEEN DATE_SUB('2022-04-01', INTERVAL 1 MONTH) AND '2022-04-01';\\n\\nExplanation: The SQL query filters the broadband_subscribers table to only include rows where the region is 'rural' and the subscription_date is within the last month. Then it counts the number of rows in the filtered data.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the average price of seeds for farmers who use more than two types of seeds?\\n\\nContext: CREATE TABLE seeds (id INT PRIMARY KEY, name VARCHAR(255), price DECIMAL(10,2), crop VARCHAR(255), farm_id INT, FOREIGN KEY (farm_id) REFERENCES farmers(id));<end_of_turn>\\n<start_of_turn>model\\nSELECT f.name, AVG(s.price) FROM seeds s JOIN farmers f ON s.farm_id = f.id GROUP BY f.id HAVING COUNT(DISTINCT s.crop) > 2;\\n\\nExplanation: Calculate the average price of seeds for farmers who use more than two types of seeds by joining the farmers and seeds tables on the farm_id foreign key, grouping the result by the farmer, and filtering for farmers who have more than two distinct crops in their seed inventory.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nIdentify the number of spacecraft missions per day, and rank them in descending order?\\n\\nContext: CREATE TABLE spacecraft_missions (spacecraft_name TEXT, mission_date DATE);<end_of_turn>\\n<start_of_turn>model\\nSELECT DATE_TRUNC('day', mission_date) as mission_day, COUNT(*) as mission_count, RANK() OVER (ORDER BY COUNT(*) DESC) as mission_rank FROM spacecraft_missions GROUP BY mission_day ORDER BY mission_rank;\\n\\nExplanation: This query calculates the number of spacecraft missions per day by truncating the mission dates to the day level using the DATE_TRUNC() function, and then grouping the records by mission_day. The query calculates the mission count for each day, ranks the days by mission count in descending order, and assigns a mission rank to each day using the RANK() window function.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the average delivery time for satellites manufactured by SpaceTech Inc.?\\n\\nContext: CREATE TABLE Satellites (satellite_id INT, manufacturer VARCHAR(255), delivery_time FLOAT); INSERT INTO Satellites (satellite_id, manufacturer, delivery_time) VALUES (1, 'SpaceTech Inc.', 340.5), (2, 'Galactic Systems', 285.6), (3, 'SpaceTech Inc.', 362.9);<end_of_turn>\\n<start_of_turn>model\\nSELECT AVG(delivery_time) FROM Satellites WHERE manufacturer = 'SpaceTech Inc.';\\n\\nExplanation: This SQL query calculates the average delivery time for satellites manufactured by SpaceTech Inc. by using the AVG function on the delivery_time column, filtering rows with the WHERE clause for the manufacturer SpaceTech Inc.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the average speed of electric vehicles per manufacturer?\\n\\nContext: CREATE TABLE ev_sales (id INT, manufacturer VARCHAR(50), model VARCHAR(50), avg_speed FLOAT); INSERT INTO ev_sales (id, manufacturer, model, avg_speed) VALUES (1, 'Tesla', 'Model S', 85.0), (2, 'Tesla', 'Model 3', 140.0), (3, 'Nissan', 'Leaf', 93.0), (4, 'Chevrolet', 'Bolt', 120.0);<end_of_turn>\\n<start_of_turn>model\\nSELECT manufacturer, AVG(avg_speed) as avg_speed FROM ev_sales GROUP BY manufacturer;\\n\\nExplanation: The SQL query groups the ev_sales table by manufacturer and calculates the average speed of electric vehicles per manufacturer.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the average cargo quantity for each port in the European region?\\n\\nContext: CREATE TABLE ports_europe (port_id INT, port_name TEXT, region TEXT, cargo_quantity INT); INSERT INTO ports_europe VALUES (1, 'Port C', 'Europe', 800), (2, 'Port D', 'Europe', 1000), (3, 'Port E', 'Africa', 1200);<end_of_turn>\\n<start_of_turn>model\\nSELECT ports_europe.port_name, AVG(ports_europe.cargo_quantity) FROM ports_europe WHERE ports_europe.region = 'Europe' GROUP BY ports_europe.port_name;\\n\\nExplanation: This query filters for rows where the 'region' is 'Europe', groups the rows by 'port_name', and then calculates the average 'cargo_quantity' for each group.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhich creative AI applications have more than 100 user interactions?\\n\\nContext: CREATE TABLE creative_ai_applications (app_name VARCHAR(255), user_interactions INT); INSERT INTO creative_ai_applications (app_name, user_interactions) VALUES ('App A', 50), ('App B', 150), ('App C', 120), ('App D', 75);<end_of_turn>\\n<start_of_turn>model\\nSELECT app_name, user_interactions FROM creative_ai_applications WHERE user_interactions > 100;\\n\\nExplanation: The SQL query selects the app_name and user_interactions from the creative_ai_applications table where user_interactions are greater than 100.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nFind the number of rural healthcare providers who are specialized in pediatric care in South Africa and Kenya.\\n\\nContext: CREATE TABLE healthcare_specialties_south_africa (name TEXT, location TEXT, specialty TEXT); INSERT INTO healthcare_specialties_south_africa (name, location, specialty) VALUES ('Provider A', 'Rural South Africa', 'Pediatric Care'), ('Provider B', 'Rural Kenya', 'Neurology');<end_of_turn>\\n<start_of_turn>model\\nSELECT location, COUNT(*) as provider_count FROM healthcare_specialties_south_africa WHERE location LIKE 'Rural%' AND specialty LIKE '%Pediatric%' GROUP BY location;\\n\\nExplanation: Counts the number of rural healthcare providers who are specialized in pediatric care in South Africa and Kenya, ordered by location.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nCalculate the average weight of astronauts on their first medical record.\\n\\nContext: CREATE VIEW first_medical_records AS SELECT astronaut_id, MIN(medical_record_date) AS first_date FROM astronaut_medical GROUP BY astronaut_id;<end_of_turn>\\n<start_of_turn>model\\nSELECT AVG(weight) FROM astronaut_medical INNER JOIN first_medical_records ON astronaut_medical.astronaut_id = first_medical_records.astronaut_id AND astronaut_medical.medical_record_date = first_medical_records.first_date;\\n\\nExplanation: This query calculates the average weight of astronauts on their first medical record by joining the 'astronaut_medical' table and 'first_medical_records' view on the astronaut_id and medical_record_date, then applying the AVG function on the weight column.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nInsert records for 500 units of Ytterbium production in Vietnam for 2022.\\n\\nContext: CREATE TABLE production (year INT, element VARCHAR(10), country VARCHAR(10), quantity INT);<end_of_turn>\\n<start_of_turn>model\\nINSERT INTO production (year, element, country, quantity) VALUES (2022, 'Ytterbium', 'Vietnam', 500);\\n\\nExplanation: This query inserts records for 500 units of Ytterbium production in Vietnam for 2022. It uses the VALUES clause to specify the data.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the maximum height of dams in 'LakeB'?\\n\\nContext: CREATE TABLE dams (id INT PRIMARY KEY, name VARCHAR(255), height INT, reservoir VARCHAR(255), built_year INT); INSERT INTO dams (id, name, height, reservoir, built_year) VALUES (1, 'DamP', 50, 'LakeA', 1940), (2, 'DamQ', 75, 'LakeB', 1975), (3, 'DamR', 60, 'LakeA', 2000);<end_of_turn>\\n<start_of_turn>model\\nSELECT MAX(height) as max_height FROM dams WHERE reservoir = 'LakeB';\\n\\nExplanation: The SQL query calculates the maximum height of dams in 'LakeB'. It filters the results to only show dams in 'LakeB' and the output column max_height displays the calculated maximum height.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nList all environmental impact assessments for mining operations in the United States.\\n\\nContext: CREATE TABLE mining_operation (id INT, name VARCHAR(255), location VARCHAR(255));CREATE TABLE environmental_assessment (id INT, mining_operation_id INT, date DATE, impact VARCHAR(255)); INSERT INTO mining_operation (id, name, location) VALUES (1, 'American Gold', 'United States'); INSERT INTO mining_operation (id, name, location) VALUES (2, 'American Diamond', 'United States'); INSERT INTO environmental_assessment (id, mining_operation_id, date, impact) VALUES (1, 1, '2020-01-01', 'Water pollution');<end_of_turn>\\n<start_of_turn>model\\nSELECT mining_operation.name, environmental_assessment.date, environmental_assessment.impact FROM mining_operation JOIN environmental_assessment ON mining_operation.id = environmental_assessment.mining_operation_id WHERE mining_operation.location = 'United States';\\n\\nExplanation: This SQL query joins the mining_operation and environmental_assessment tables on the mining_operation_id column. It then filters for mining operations located in the United States and returns the name, date, and impact of each environmental assessment.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the cultural competency score for each hospital in the city?\\n\\nContext: CREATE TABLE Hospitals (HospitalID INT, City VARCHAR(255), CulturalCompetencyScore INT); INSERT INTO Hospitals (HospitalID, City, CulturalCompetencyScore) VALUES (1, 'Los Angeles', 85), (2, 'New York', 90), (3, 'Miami', 75);<end_of_turn>\\n<start_of_turn>model\\nSELECT City, CulturalCompetencyScore FROM Hospitals;\\n\\nExplanation: The SQL query retrieves the cultural competency score for each hospital in the city. It uses the SELECT clause to retrieve the cultural competency score and the city from the Hospitals table.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nCount the number of sign language interpreters in the \"service_providers\" table\\n\\nContext: CREATE TABLE service_providers (id INT, service_type VARCHAR(255), quantity INT); INSERT INTO service_providers (id, service_type, quantity) VALUES (1, 'sign_language_interpreters', 5), (2, 'assistive_technology_specialists', 10), (3, 'disability_counselors', 8), (4, 'accessibility_consultants', 6);<end_of_turn>\\n<start_of_turn>model\\nSELECT COUNT(*) FROM service_providers WHERE service_type = 'sign_language_interpreters';\\n\\nExplanation: This SQL query counts the number of sign language interpreters in the \"service_providers\" table by filtering the table where the service_type is 'sign_language_interpreters' and then using the COUNT function to count the number of rows.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the total number of VR games in the 'Simulation' category that have a satisfaction rating above 4.5?\\n\\nContext: CREATE TABLE VRGames (id INT, name VARCHAR(100), category VARCHAR(50), satisfaction FLOAT);<end_of_turn>\\n<start_of_turn>model\\nSELECT COUNT(*) FROM VRGames WHERE category = 'Simulation' AND satisfaction > 4.5;\\n\\nExplanation: This query calculates the total number of VR games in the 'Simulation' category that have a satisfaction rating above 4.5 by selecting all records with the specified category and satisfaction values and counting the number of records using the COUNT() function.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nFind total number of scientific research projects in the Indian Ocean on deep-sea coral conservation.\\n\\nContext: CREATE TABLE research_projects (project_id INT, project_name VARCHAR(255), region VARCHAR(255), focus_area VARCHAR(255), PRIMARY KEY(project_id)); INSERT INTO research_projects (project_id, project_name, region, focus_area) VALUES (1, 'Coral Conservation Research', 'Indian Ocean', 'Deep-sea Coral');<end_of_turn>\\n<start_of_turn>model\\nSELECT COUNT(*) FROM research_projects WHERE region = 'Indian Ocean' AND focus_area = 'Deep-sea Coral';\\n\\nExplanation: We find total number of scientific research projects in the Indian Ocean on deep-sea coral conservation by calculating the COUNT of the research_projects table, filtered by the Indian Ocean region and focus_area as Deep-sea Coral.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nAdd a new charging station in Madrid for electric cars.\\n\\nContext: CREATE TABLE charging_stations (station_id INT, type VARCHAR(20), city VARCHAR(20)); INSERT INTO charging_stations (station_id, type, city) VALUES (1, 'Car', 'Madrid'), (2, 'Bike', 'Madrid'), (3, 'Bike', 'Madrid');<end_of_turn>\\n<start_of_turn>model\\nINSERT INTO charging_stations (station_id, type, city) VALUES (4, 'Car', 'Madrid');\\n\\nExplanation: The SQL query adds a new charging station in Madrid for electric cars by inserting a row with station_id 4, type 'Car', and city 'Madrid' into the charging_stations table.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nDelete all records for the Samba genre from the year 2020 in Brazil\\n\\nContext: CREATE TABLE music_genres (genre VARCHAR(255), country VARCHAR(255), revenue FLOAT, event_date DATE); INSERT INTO music_genres (genre, country, revenue, event_date) VALUES ('Samba', 'Brazil', 8000.0, '2020-01-01'), ('Bossa Nova', 'Brazil', 6000.0, '2020-01-01'), ('Funk', 'Brazil', 4000.0, '2020-01-01');<end_of_turn>\\n<start_of_turn>model\\nDELETE FROM music_genres WHERE genre = 'Samba' AND YEAR(event_date) = 2020 AND country = 'Brazil';\\n\\nExplanation: This query deletes all records for the Samba genre from the year 2020 in Brazil. It does so by filtering the music_genres table based on the genre, year, and country and then deleting the matching records.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nHow many times did each strain of cannabis concentrate sell at each dispensary in Q2 2022?\\n\\nContext: CREATE TABLE concentrate_strain_sales (dispensary_id INT, sale_date DATE, strain_id INT, quantity INT); INSERT INTO concentrate_strain_sales (dispensary_id, sale_date, strain_id, quantity) VALUES (1, '2022-04-01', 4, 25), (1, '2022-04-15', 5, 15), (1, '2022-05-05', 6, 10), (2, '2022-04-03', 4, 30), (2, '2022-04-30', 6, 15), (2, '2022-05-20', 4, 20);<end_of_turn>\\n<start_of_turn>model\\nSELECT s.name, d.name, SUM(css.quantity) as total_sales FROM concentrate_strain_sales css JOIN strains s ON css.strain_id = s.id JOIN dispensaries d ON css.dispensary_id = d.id WHERE css.sale_date BETWEEN '2022-04-01' AND '2022-06-30' GROUP BY s.name, d.name;\\n\\nExplanation: This query joins the concentrate_strain_sales, strains, and dispensaries tables on the strain_id and dispensary_id foreign keys. It then filters the data for Q2 2022, calculates the total quantity of each concentrate strain sold at each dispensary using the SUM() function, and groups the results by strain and dispensary.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the total number of technology for social good initiatives by type?\\n\\nContext: CREATE TABLE Tech_Social_Good_Types (initiative VARCHAR(50), type VARCHAR(50)); INSERT INTO Tech_Social_Good_Types (initiative, type) VALUES ('AI for Disaster Relief', 'AI'), ('Accessible Technology for Persons with Disabilities', 'Accessibility'), ('Community Technology Centers', 'Community'), ('Online Education Platforms', 'Education'), ('Cybersecurity for Nonprofits', 'Security');<end_of_turn>\\n<start_of_turn>model\\nSELECT type, COUNT(initiative) as num_initiatives FROM Tech_Social_Good_Types GROUP BY type;\\n\\nExplanation: This SQL query calculates the total number of technology for social good initiatives by type. It uses the GROUP BY clause to group the results by type and the COUNT function to calculate the number of initiatives for each group.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nDisplay the passenger count for each route and day of the week in the 'passenger_count' table\\n\\nContext: CREATE SCHEMA IF NOT EXISTS public_transport;CREATE TABLE IF NOT EXISTS public_transport.passenger_count (count_id SERIAL PRIMARY KEY, route_id INTEGER, passenger_count INTEGER, count_date DATE);INSERT INTO public_transport.passenger_count (route_id, passenger_count, count_date) VALUES (101, 500, '2021-12-01'), (102, 350, '2021-12-01'), (101, 550, '2021-12-02'), (102, 380, '2021-12-02');<end_of_turn>\\n<start_of_turn>model\\nSELECT EXTRACT(DOW FROM count_date) AS day_of_week, route_id, passenger_count FROM public_transport.passenger_count;\\n\\nExplanation: This query extracts the day of the week from the count_date column and displays the passenger count for each route and day of the week in the passenger_count table.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nDelete all satellites with a launch date before 2000-01-01 from the satellite_data table\\n\\nContext: CREATE TABLE satellite_data (satellite_id INT, name VARCHAR(255), launch_date DATE); INSERT INTO satellite_data (satellite_id, name, launch_date) VALUES (1, 'Sputnik 1', '1957-10-04'), (2, 'Explorer 1', '1958-01-31');<end_of_turn>\\n<start_of_turn>model\\nDELETE FROM satellite_data WHERE launch_date < '2000-01-01';\\n\\nExplanation: This query deletes all records from the satellite_data table where the launch_date is before 2000-01-01.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat are the top 5 most popular game modes in VR games played by female players over the age of 30?\\n\\nContext: CREATE TABLE users (user_id INT, age INT, gender VARCHAR(10)); INSERT INTO users (user_id, age, gender) VALUES (1, 35, 'Female'), (2, 25, 'Male'), (3, 45, 'Female'); CREATE TABLE vr_games (game_id INT, game_mode VARCHAR(20)); INSERT INTO vr_games (game_id, game_mode) VALUES (1, 'Adventure'), (2, 'Shooter'), (3, 'Strategy'), (4, 'Puzzle'); CREATE TABLE user_games (user_id INT, game_id INT, playtime INT); INSERT INTO user_games (user_id, game_id, playtime) VALUES (1, 1, 50), (1, 2, 20), (1, 3, 0), (2, 2, 100), (2, 3, 80), (3, 1, 60), (3, 4, 100);<end_of_turn>\\n<start_of_turn>model\\nSELECT game_mode, SUM(playtime) AS total_playtime FROM user_games JOIN users ON user_games.user_id = users.user_id JOIN vr_games ON user_games.game_id = vr_games.game_id WHERE users.age > 30 AND users.gender = 'Female' GROUP BY game_mode ORDER BY total_playtime DESC LIMIT 5;\\n\\nExplanation: This query finds the top 5 most popular game modes in VR games played by female players over the age of 30 by joining the users, user_games, and vr_games tables and filtering for female players over the age of 30. It then groups the results by game mode and orders them by total playtime in descending order to find the top 5 most popular game modes.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the change in the number of public libraries in each zone between 2019 and 2020?\\n\\nContext: CREATE TABLE zones (zone_name VARCHAR(50), year INT, num_libraries INT); INSERT INTO zones VALUES ('Zone 1', 2019, 30); INSERT INTO zones VALUES ('Zone 1', 2020, 35); INSERT INTO zones VALUES ('Zone 2', 2019, 40); INSERT INTO zones VALUES ('Zone 2', 2020, 43);<end_of_turn>\\n<start_of_turn>model\\nSELECT zone_name, (LEAD(num_libraries) OVER (PARTITION BY zone_name ORDER BY year) - num_libraries) as change_in_num_libraries FROM zones;\\n\\nExplanation: Calculate the change in the number of public libraries in each zone between 2019 and 2020 by using the LEAD function to access the next row's num_libraries value.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the average rating of Impressionist artworks?\\n\\nContext: CREATE TABLE ArtMovements (MovementID int, Name varchar(50)); CREATE TABLE ArtPieces (ArtPieceID int, Title varchar(50), YearCreated int, MovementID int, AverageRating decimal(3,2));<end_of_turn>\\n<start_of_turn>model\\nSELECT AVG(ArtPieces.AverageRating) AS AverageImpressionistArtworksRating FROM ArtPieces INNER JOIN ArtMovements ON ArtPieces.MovementID = ArtMovements.MovementID WHERE ArtMovements.Name = 'Impressionism';\\n\\nExplanation: This query performs an inner join on ArtPieces and ArtMovements tables based on MovementID. It then filters the ArtPieces for Impressionist artworks and calculates the average rating using the AVG function.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nHow many trains in the 'suburban' schema have maintenance costs less than $4000?\\n\\nContext: CREATE SCHEMA suburban; CREATE TABLE suburban.trains (id INT, maintenance_cost INT); INSERT INTO suburban.trains (id, maintenance_cost) VALUES (1, 6000), (2, 3000), (3, 4000);<end_of_turn>\\n<start_of_turn>model\\nSELECT COUNT(*) FROM suburban.trains WHERE maintenance_cost < 4000;\\n\\nExplanation: The SQL query counts the number of trains in the 'suburban' schema with maintenance costs less than $4000. It uses the COUNT function with an asterisk (*) to count all records that meet the condition specified in the WHERE clause.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the average time to resolution for security incidents in the finance department, and how does it compare to the average for the entire organization?\\n\\nContext: CREATE TABLE incidents (incident_id INT, incident_date DATE, resolution_date DATE, department VARCHAR(50));<end_of_turn>\\n<start_of_turn>model\\nSELECT AVG(DATEDIFF(resolution_date, incident_date)) as avg_resolution_time_finance FROM incidents WHERE department = 'finance'; SELECT AVG(DATEDIFF(resolution_date, incident_date)) as avg_resolution_time_org FROM incidents;\\n\\nExplanation: The SQL query uses the DATEDIFF function to calculate the average time to resolution for security incidents in the finance department and for the entire organization. It then compares the two averages to provide a comparison of the two values.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the average carbon footprint of products in the food industry in Canada?\\n\\nContext: CREATE TABLE CarbonFootprint (CFID INT, Industry VARCHAR(20), CarbonFootprint FLOAT, Country VARCHAR(20)); INSERT INTO CarbonFootprint VALUES (1, 'Food', 2.5, 'Canada'); INSERT INTO CarbonFootprint VALUES (2, 'Food', 3.0, 'Canada');<end_of_turn>\\n<start_of_turn>model\\nSELECT AVG(CarbonFootprint) FROM CarbonFootprint WHERE Industry = 'Food' AND Country = 'Canada';\\n\\nExplanation: This query calculates the average carbon footprint of products in the food industry in Canada. It does this by selecting the average (AVG) of the CarbonFootprint column, but only for rows where the Industry is 'Food' and the Country is 'Canada'.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nFind the bottom 3 suppliers with the lowest ethical labor scores.\\n\\nContext: CREATE TABLE supplier (supplier_id INT, name VARCHAR(255), ethical_score INT, year INT); INSERT INTO supplier (supplier_id, name, ethical_score, year) VALUES (1, 'Green Supplies', 85, 2021), (2, 'Eco Distributors', 80, 2021), (3, 'Sustainable Traders', 90, 2021), (4, 'Ethical Brands', 95, 2021);<end_of_turn>\\n<start_of_turn>model\\nSELECT supplier_id, name, ethical_score FROM (SELECT supplier_id, name, ethical_score, NTILE(4) OVER (ORDER BY ethical_score) AS quartile FROM supplier) AS supplier_quartiles WHERE quartile = 4;\\n\\nExplanation: The query uses NTILE window function to divide suppliers into four equal groups based on their ethical scores and filters the bottom 3 suppliers by using WHERE clause. The query then selects the supplier_id, name, and ethical_score columns.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat are the total items in the warehouse in Indonesia and South Korea combined?\\n\\nContext: CREATE TABLE Warehouse (id INT, country VARCHAR(255), items_quantity INT); INSERT INTO Warehouse (id, country, items_quantity) VALUES (1, 'Indonesia', 300), (2, 'South Korea', 200), (3, 'Japan', 400);<end_of_turn>\\n<start_of_turn>model\\nSELECT SUM(items_quantity) FROM Warehouse WHERE country = 'Indonesia' INTERSECT SELECT SUM(items_quantity) FROM Warehouse WHERE country = 'South Korea';\\n\\nExplanation: Summarize the items_quantity where the country is Indonesia, and also summarize the items_quantity where the country is South Korea, then return the intersection of those two summaries.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the average rating of AI-powered chatbots for hotels in the North America region?\\n\\nContext: CREATE TABLE ratings (rating_id INT, hotel_id INT, rating FLOAT, rating_source TEXT); INSERT INTO ratings (rating_id, hotel_id, rating, rating_source) VALUES (1, 1, 4.5, 'AI-powered chatbot'), (2, 2, 4.2, 'Human'), (3, 1, 4.7, 'AI-powered chatbot'); CREATE TABLE hotels (hotel_id INT, region TEXT); INSERT INTO hotels (hotel_id, region) VALUES (1, 'North America'), (2, 'Europe');<end_of_turn>\\n<start_of_turn>model\\nSELECT region, AVG(rating) FROM ratings r JOIN hotels h ON r.hotel_id = h.hotel_id WHERE rating_source = 'AI-powered chatbot' GROUP BY region;\\n\\nExplanation: This query calculates the average rating of AI-powered chatbots for hotels in the North America region. It does so by joining the ratings and hotels tables on the hotel_id column, filtering the resulting table for rows where the rating_source is 'AI-powered chatbot', and then grouping the rows by the region column and calculating the average of the rating column for each group.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhich genetic mutations were discovered in the clinical trial 'Trial_B' and 'Trial_C'?\\n\\nContext: CREATE TABLE ClinicalTrial (ID INT, Name TEXT, Mutations TEXT); INSERT INTO ClinicalTrial (ID, Name, Mutations) VALUES (2, 'Trial_B', 'MT2,MT3'), (3, 'Trial_C', 'MT1,MT3');<end_of_turn>\\n<start_of_turn>model\\nSELECT Mutations FROM ClinicalTrial WHERE Name IN ('Trial_B', 'Trial_C');\\n\\nExplanation: The SQL query selects the mutations column from the ClinicalTrial table where the name is either 'Trial_B' or 'Trial_C'. This returns the genetic mutations discovered in the clinical trials 'Trial_B' and 'Trial_C'.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nCalculate the average salary of employees in the IT department.\\n\\nContext: CREATE TABLE Employees (EmployeeID INT, Department VARCHAR(20), Salary FLOAT); INSERT INTO Employees (EmployeeID, Department, Salary) VALUES (1, 'IT', 75000), (2, 'Marketing', 60000), (3, 'IT', 80000), (4, 'HR', 70000), (5, 'IT', 85000);<end_of_turn>\\n<start_of_turn>model\\nSELECT AVG(Salary) FROM Employees WHERE Department = 'IT';\\n\\nExplanation: The SQL query calculates the average salary of employees in the IT department using the AVG() function and a WHERE clause to filter data by department.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat are the names of dams with height greater than 300 feet?\\n\\nContext: CREATE TABLE dams (id INT, name VARCHAR(255), height INT, length INT); INSERT INTO dams (id, name, height, length) VALUES (1, 'Sample Dam', 400, 1000);<end_of_turn>\\n<start_of_turn>model\\nSELECT name FROM dams WHERE height > 300;\\n\\nExplanation: * Selects the 'name' column * Filters rows where the 'height' is greater than 300<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nList all vessels that have visited port 'Singapore' since 2021-01-01 ordered by their last visit date.\\n\\nContext: CREATE TABLE vessels (vessel_id INT, vessel_name TEXT); INSERT INTO vessels (vessel_id, vessel_name) VALUES (1, 'Vessel A'), (2, 'Vessel B'); CREATE TABLE visits (visit_id INT, vessel_id INT, port_id INT, visit_date DATE); INSERT INTO visits (visit_id, vessel_id, port_id, visit_date) VALUES (1, 1, 3, '2021-02-01'), (2, 2, 3, '2021-03-01'), (3, 1, 3, '2021-04-01');<end_of_turn>\\n<start_of_turn>model\\nSELECT vessel_name, MAX(visit_date) FROM visits JOIN vessels ON visits.vessel_id = vessels.vessel_id WHERE port_id = (SELECT port_id FROM ports WHERE port_name = 'Singapore') AND visit_date >= '2021-01-01' GROUP BY vessel_name ORDER BY MAX(visit_date) DESC;\\n\\nExplanation: This query lists all vessels that have visited port 'Singapore' since 2021-01-01 and orders them by their last visit date. It performs a join between the vessels and visits tables and filters for visits to the port 'Singapore' since 2021-01-01. It then groups the results by vessel_name and orders by the latest visit_date.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nInsert a new volunteer with ID 6 who signed up on 2022-07-15\\n\\nContext: CREATE TABLE volunteers (volunteer_id INT, signup_date DATE); INSERT INTO volunteers (volunteer_id, signup_date) VALUES (1, '2022-01-05'), (2, '2022-03-30'), (3, '2022-04-15'), (4, '2022-06-10');<end_of_turn>\\n<start_of_turn>model\\nINSERT INTO volunteers (volunteer_id, signup_date) VALUES (6, '2022-07-15');\\n\\nExplanation: This query inserts a new record into the volunteers table for a volunteer with ID 6 and a signup date of 2022-07-15.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the average rating of hotels in the US that have adopted AI technology?\\n\\nContext: CREATE TABLE hotels (hotel_id INT, hotel_name TEXT, country TEXT, rating FLOAT, ai_adoption BOOLEAN); INSERT INTO hotels (hotel_id, hotel_name, country, rating, ai_adoption) VALUES (1, 'The Grand', 'USA', 4.5, true), (2, 'The Modern', 'USA', 4.2, false);<end_of_turn>\\n<start_of_turn>model\\nSELECT AVG(rating) FROM hotels WHERE ai_adoption = true AND country = 'USA';\\n\\nExplanation: This query calculates the average rating of hotels in the USA that have adopted AI technology. It does so by filtering the hotels table for rows where the country is 'USA' and ai_adoption is true, and then calculating the average of the rating column for those rows.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nFind the most common artifact type in 'Site E'?\\n\\nContext: CREATE TABLE Site_E (Artifact_ID INT, Artifact_Type VARCHAR(255)); INSERT INTO Site_E (Artifact_ID, Artifact_Type) VALUES (1, 'Pottery'), (2, 'Stone'), (3, 'Pottery');<end_of_turn>\\n<start_of_turn>model\\nSELECT Artifact_Type, COUNT(*) FROM Site_E GROUP BY Artifact_Type ORDER BY COUNT(*) DESC LIMIT 1;\\n\\nExplanation: The SQL query uses the COUNT and GROUP BY functions to count the number of rows in the 'Artifact_Type' column for each unique value. Then it orders the results in descending order and selects the top row using the LIMIT clause.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the number of HIV diagnoses for each race in the hiv_diagnoses table?\\n\\nContext: CREATE TABLE hiv_diagnoses (race TEXT, num_diagnoses INT); INSERT INTO hiv_diagnoses (race, num_diagnoses) VALUES ('White', 5000), ('Black', 8000), ('Hispanic', 6000), ('Asian', 3000), ('Other', 2000);<end_of_turn>\\n<start_of_turn>model\\nSELECT race, num_diagnoses FROM hiv_diagnoses;\\n\\nExplanation: This query returns the number of HIV diagnoses for each race in the hiv_diagnoses table. It selects the race and num_diagnoses columns from the hiv_diagnoses table and returns the number of diagnoses for each race.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the maximum number of professional development workshops attended by a teacher in the 'Mathematics' department?\\n\\nContext: CREATE TABLE professional_development (id INT, department TEXT, num_workshops INT); INSERT INTO professional_development (id, department, num_workshops) VALUES (1, 'Mathematics', 2), (2, 'Mathematics', 4), (3, 'Mathematics', 6);<end_of_turn>\\n<start_of_turn>model\\nSELECT MAX(num_workshops) FROM professional_development WHERE department = 'Mathematics';\\n\\nExplanation: This query calculates the maximum number of professional development workshops attended by a teacher in the 'Mathematics' department. It uses the MAX() function to find the maximum number of workshops attended and the WHERE clause to filter the results to only include teachers in the 'Mathematics' department.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nDelete all records in the 'FireDepartments' table where the 'DepartmentName' is 'Westside Fire Department'\\n\\nContext: CREATE TABLE FireDepartments (DepartmentID INT PRIMARY KEY, DepartmentName VARCHAR(50), EstablishedYear INT);<end_of_turn>\\n<start_of_turn>model\\nDELETE FROM FireDepartments WHERE DepartmentName = 'Westside Fire Department';\\n\\nExplanation: This query deletes all records in the 'FireDepartments' table where the 'DepartmentName' is 'Westside Fire Department'. It uses the DELETE statement, followed by the FROM keyword and the table name. The WHERE clause filters the records based on the specified condition.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nHow many crime incidents were reported in each city in March 2021?\\n\\nContext: CREATE TABLE crime_incidents (id INT, city_id INT, incident_time TIMESTAMP); INSERT INTO crime_incidents (id, city_id, incident_time) VALUES (1, 1, '2021-03-01 01:00:00'), (2, 1, '2021-03-02 02:00:00'), (3, 2, '2021-03-03 23:00:00'), (4, 2, '2021-03-04 04:00:00'), (5, 3, '2021-03-05 05:00:00'), (6, 3, '2021-03-06 06:00:00'), (7, 4, '2021-03-07 07:00:00'), (8, 4, '2021-03-08 08:00:00'), (9, 5, '2021-03-09 09:00:00'), (10, 5, '2021-03-10 10:00:00'), (11, 1, '2021-03-11 11:00:00'), (12, 1, '2021-03-12 12:00:00');<end_of_turn>\\n<start_of_turn>model\\nSELECT c.name, COUNT(ci.id) FROM city c JOIN crime_incidents ci ON c.id = ci.city_id WHERE EXTRACT(MONTH FROM ci.incident_time) = 3 GROUP BY c.id;\\n\\nExplanation: First, we join the city table with the crime_incidents table on the city_id column. Then, we filter the resulting table using the WHERE clause to only include rows where the month of the incident_time column is equal to 3 (March). Then, we group the results by the name column of the city table, and finally, we count the number of incidents for each city using the COUNT function.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the total cost of sustainable building materials for each project in the 'GreenBuildings' table?\\n\\nContext: CREATE TABLE GreenBuildings (projectID INT, sustainableMaterialCost DECIMAL(10,2));<end_of_turn>\\n<start_of_turn>model\\nSELECT projectID, SUM(sustainableMaterialCost) FROM GreenBuildings GROUP BY projectID;\\n\\nExplanation: The SQL query calculates the total cost of sustainable building materials for each project by grouping the records based on the projectID and summing up the sustainableMaterialCost values.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nDetermine the number of marine species in each ocean, grouped by conservation status.\\n\\nContext: CREATE TABLE species (id INT, name VARCHAR(50), habitat_ocean VARCHAR(50)); CREATE TABLE conservation_status (id INT, species_id INT, status VARCHAR(50));<end_of_turn>\\n<start_of_turn>model\\nSELECT habitat_ocean, status, COUNT(*) FROM species INNER JOIN conservation_status ON species.id = conservation_status.species_id GROUP BY habitat_ocean, status;\\n\\nExplanation: This query performs an inner join between the species and conservation_status tables, on the species_id column, groups the result by the habitat_ocean and status columns, and calculates the count of records in each group, resulting in the number of marine species in each ocean, grouped by conservation status.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nHow many wells are there in the 'antarctic' region in 2025?\\n\\nContext: CREATE TABLE wells (well_id INT, well_name VARCHAR(50), region VARCHAR(20)); INSERT INTO wells (well_id, well_name, region) VALUES (1, 'Well A', 'onshore'); INSERT INTO wells (well_id, well_name, region) VALUES (2, 'Well B', 'offshore'); INSERT INTO wells (well_id, well_name, region) VALUES (3, 'Well C', 'antarctic');<end_of_turn>\\n<start_of_turn>model\\nSELECT COUNT(*) FROM wells WHERE region = 'antarctic';\\n\\nExplanation: The SQL query counts the number of wells located in the 'antarctic' region by using the COUNT function and filtering the rows by the 'region' column with the value 'antarctic'.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nHow many employees work in the 'Engineering' department in the 'human_resources' table?\\n\\nContext: CREATE TABLE human_resources (id INT, name VARCHAR(50), role VARCHAR(50), department VARCHAR(50)); INSERT INTO human_resources (id, name, role, department) VALUES (1, 'John Doe', 'Manager', 'Human Resources'), (2, 'Jane Smith', 'Employee', 'Human Resources'), (3, 'Bob Johnson', 'Engineer', 'Engineering'), (4, 'Alice Williams', 'Engineer', 'Engineering');<end_of_turn>\\n<start_of_turn>model\\nSELECT COUNT(*) FROM human_resources WHERE department = 'Engineering';\\n\\nExplanation: This query counts the number of rows in the 'human_resources' table where the 'department' is 'Engineering', returning the number of employees in that department.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the total production volume in South America?\\n\\nContext: CREATE TABLE production (id INT, location VARCHAR(20), volume INT); INSERT INTO production (id, location, volume) VALUES (1, 'South America', 75000); INSERT INTO production (id, location, volume) VALUES (2, 'South America', 85000); INSERT INTO production (id, location, volume) VALUES (3, 'North America', 60000);<end_of_turn>\\n<start_of_turn>model\\nSELECT SUM(volume) FROM production WHERE location = 'South America';\\n\\nExplanation: This query calculates the total production volume in South America. It selects the sum of the 'volume' column for rows with 'location' equal to 'South America'.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nHow many fans attended each team's games by age group?\\n\\nContext: CREATE TABLE FansByAge (FanID INT, Age INT, TeamID INT); INSERT INTO FansByAge (FanID, Age, TeamID) VALUES (1, 22, 1), (2, 30, 1), (3, 38, 2), (4, 25, 2); CREATE TABLE GameAttendanceByAge (GameID INT, FanID INT); INSERT INTO GameAttendanceByAge (GameID, FanID) VALUES (1, 1), (1, 2), (2, 3), (2, 4);<end_of_turn>\\n<start_of_turn>model\\nSELECT t.TeamName, f.AgeGroup, COUNT(*) as Total_Attendance FROM (SELECT FanID, CASE WHEN Age < 18 THEN 'Under 18' WHEN Age < 30 THEN '18-30' WHEN Age < 50 THEN '31-50' ELSE '50+' END as AgeGroup FROM FansByAge) f JOIN GameAttendanceByAge ga ON f.FanID = ga.FanID JOIN Teams t ON f.TeamID = t.TeamID GROUP BY t.TeamName, f.AgeGroup;\\n\\nExplanation: Join FansByAge, GameAttendanceByAge, and Teams tables, then group by TeamName and AgeGroup to count the number of fans attending each team's games by age group, using a CASE statement to categorize ages.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nHow many albums were released by male Hip-Hop artists in the 2000s?\\n\\nContext: CREATE TABLE artists (id INT, name VARCHAR, gender VARCHAR, genre VARCHAR);   CREATE TABLE albums (id INT, artist_id INT, title VARCHAR, release_year INT);  INSERT INTO artists VALUES (1, 'Jay-Z', 'Male', 'Hip-Hop');   INSERT INTO albums VALUES (1, 1, 'The Blueprint', 2001);   INSERT INTO albums VALUES (2, 1, 'The Black Album', 2003);<end_of_turn>\\n<start_of_turn>model\\nSELECT COUNT(albums.id)   FROM albums   JOIN artists ON albums.artist_id = artists.id   WHERE artists.gender = 'Male' AND artists.genre = 'Hip-Hop' AND albums.release_year BETWEEN 2000 AND 2009;\\n\\nExplanation: This query calculates the number of albums released by male Hip-Hop artists in the 2000s. It first joins the albums and artists tables on the artist_id and id columns, respectively. Then, it filters the data for male Hip-Hop artists and albums released in the 2000s, and finally counts the number of albums for the filtered data.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the total amount donated by individual donors from the USA in the last 3 years?\\n\\nContext: CREATE TABLE donors (id INT, name TEXT, country TEXT, donation_amount DECIMAL(10,2), donation_date DATE); INSERT INTO donors (id, name, country, donation_amount, donation_date) VALUES (1, 'John Doe', 'USA', 500.00, '2020-01-01'); INSERT INTO donors (id, name, country, donation_amount, donation_date) VALUES (2, 'Jane Smith', 'USA', 300.00, '2019-05-15');<end_of_turn>\\n<start_of_turn>model\\nSELECT SUM(donation_amount) FROM donors WHERE country = 'USA' AND donation_date >= DATE_SUB(CURRENT_DATE, INTERVAL 3 YEAR);\\n\\nExplanation: The SQL query calculates the total donation amount from donors in the USA for the last 3 years by using SUM function on donation_amount column and WHERE clause to filter records based on country and donation_date.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the total quantity of gold mined by mining operations located in Canada?\\n\\nContext: CREATE TABLE mining_operation (id INT, name VARCHAR(50), location VARCHAR(50), resource VARCHAR(50), quantity INT); INSERT INTO mining_operation (id, name, location, resource, quantity) VALUES (1, 'Operation A', 'Canada', 'Gold', 1000); INSERT INTO mining_operation (id, name, location, resource, quantity) VALUES (2, 'Operation B', 'USA', 'Silver', 2000); INSERT INTO mining_operation (id, name, location, resource, quantity) VALUES (3, 'Operation C', 'Canada', 'Gold', 1500);<end_of_turn>\\n<start_of_turn>model\\nSELECT SUM(quantity) FROM mining_operation WHERE location = 'Canada' AND resource = 'Gold';\\n\\nExplanation: The SQL query calculates the total quantity of gold mined by mining operations located in Canada by summing the quantity column for rows where the location is 'Canada' and the resource is 'Gold'.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nUpdate records in the 'explainability_scores' table where the 'algorithm_name' is 'ML Algo 1' and the 'explanation_score' is less than 70\\n\\nContext: CREATE TABLE explainability_scores (id INT PRIMARY KEY, algorithm_name VARCHAR(50), explanation_score INT, evaluation_date DATE);<end_of_turn>\\n<start_of_turn>model\\nUPDATE explainability_scores SET explanation_score = explanation_score + 10 WHERE algorithm_name = 'ML Algo 1' AND explanation_score < 70;\\n\\nExplanation: This SQL query updates records in the 'explainability_scores' table where the 'algorithm_name' is 'ML Algo 1' and the 'explanation_score' is less than 70. It increments the explanation score by 10 for those records that meet the specified conditions.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nShow the total revenue of vendors located in countries with more than 50 million inhabitants.\\n\\nContext: CREATE TABLE Vendors (VendorID INT, VendorName TEXT, Country TEXT);CREATE TABLE Countries (Country TEXT, Population INT); INSERT INTO Vendors VALUES (1, 'VendorK', 'India'), (2, 'VendorL', 'Canada'), (3, 'VendorM', 'Brazil'); INSERT INTO Countries VALUES ('India', 1380004383), ('Canada', 38005238), ('Brazil', 212559417);<end_of_turn>\\n<start_of_turn>model\\nSELECT SUM(Price) FROM Vendors v JOIN (SELECT Country FROM Countries WHERE Population > 50000000) c ON v.Country = c.Country;\\n\\nExplanation: This query calculates the total revenue of vendors located in countries with more than 50 million inhabitants by joining the Vendors table with a subquery that filters the Countries table for populations greater than 50 million. It then sums the Price column using the SUM function.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nHow many train delays occurred in NYC during rush hours in Q1 2022?\\n\\nContext: CREATE TABLE TrainSchedules (id INT, station VARCHAR(255), delay INT, schedule_time TIME); CREATE TABLE Stations (id INT, city VARCHAR(255));<end_of_turn>\\n<start_of_turn>model\\nSELECT COUNT(*) FROM TrainSchedules TS INNER JOIN Stations S ON TS.station = S.id WHERE S.city = 'NYC' AND HOUR(schedule_time) BETWEEN 6 AND 10 AND delay > 0 AND QUARTER(schedule_time) = 1 AND YEAR(schedule_time) = 2022;\\n\\nExplanation: This query counts the number of train delays in NYC during rush hours in Q1 2022 by performing an inner join between the TrainSchedules and Stations tables. It then filters the data based on specified conditions and counts the number of rows.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nFind the number of virtual tours in Japan with a duration over 30 minutes.\\n\\nContext: CREATE TABLE tours (id INT, country VARCHAR(20), duration INT); INSERT INTO tours (id, country, duration) VALUES (1, 'Japan', 60), (2, 'Japan', 20), (3, 'Italy', 30);<end_of_turn>\\n<start_of_turn>model\\nSELECT COUNT(*) FROM tours WHERE country = 'Japan' AND duration > 30;\\n\\nExplanation: This query counts the number of virtual tours in Japan with a duration over 30 minutes. It filters for tours in Japan and with a duration greater than 30 minutes, and then counts the number of rows using the COUNT function.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nHow many workers are employed in each factory?\\n\\nContext: CREATE TABLE factories (id INT, name VARCHAR(255)); CREATE TABLE workers (id INT, factory_id INT, department VARCHAR(255)); INSERT INTO factories (id, name) VALUES (1, 'Factory A'), (2, 'Factory B'), (3, 'Factory C'); INSERT INTO workers (id, factory_id, department) VALUES (1, 1, 'Production'), (2, 1, 'Engineering'), (3, 2, 'Production'), (4, 2, 'Management'), (5, 3, 'Production');<end_of_turn>\\n<start_of_turn>model\\nSELECT f.name, COUNT(w.id) FROM factories f INNER JOIN workers w ON f.id = w.factory_id GROUP BY f.name;\\n\\nExplanation: This query joins the factories and workers tables on the factory_id column, and then calculates the number of workers employed in each factory.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the total revenue for each mobile plan in the past year?\\n\\nContext: CREATE TABLE mobile_plans (id INT, name VARCHAR(255), price DECIMAL(10,2), data_limit INT); INSERT INTO mobile_plans (id, name, price, data_limit) VALUES (1, 'Basic', 30.00, 2048), (2, 'Premium', 50.00, 10000); CREATE TABLE revenue (plan_id INT, timestamp DATETIME, amount DECIMAL(10,2));<end_of_turn>\\n<start_of_turn>model\\nSELECT m.name, SUM(r.amount) as total_revenue FROM mobile_plans m INNER JOIN revenue r ON m.id = r.plan_id WHERE r.timestamp >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR) GROUP BY m.name;\\n\\nExplanation: This query joins the mobile_plans table with the revenue table on the plan_id column. It then filters the records to only include revenue from the past year and calculates the total revenue for each mobile plan.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the sum of energy consumption for buildings in the 'green_buildings' schema, grouped by city, and only for buildings with consumption > 2000?\\n\\nContext: CREATE TABLE green_buildings.building_energy_consumption (city VARCHAR(50), consumption FLOAT); INSERT INTO green_buildings.building_energy_consumption (city, consumption) VALUES ('London', 5000.0), ('Tokyo', 6000.0), ('Sydney', 7000.0), ('Paris', 8000.0), ('Berlin', 1500.0), ('Rome', 2500.0);<end_of_turn>\\n<start_of_turn>model\\nSELECT city, SUM(consumption) AS total_consumption FROM green_buildings.building_energy_consumption WHERE consumption > 2000 GROUP BY city;\\n\\nExplanation: The SQL query calculates the sum of energy consumption for each city in the 'green_buildings' schema's 'building_energy_consumption' table, but only for buildings with a consumption greater than 2000. It does this by using the SUM function on the 'consumption' column, grouped by the 'city' column, and using a WHERE clause to filter the results.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nList all the fields, including the ones without production, with their corresponding production rate\\n\\nContext: CREATE TABLE fields_production (field_id INT, production_rate FLOAT); INSERT INTO fields_production (field_id, production_rate) VALUES (1, 1000.0), (2, 2000.0), (3, NULL);<end_of_turn>\\n<start_of_turn>model\\nSELECT f.field_id, f.field_name, fp.production_rate FROM fields f LEFT JOIN fields_production fp ON f.field_id = fp.field_id;\\n\\nExplanation: The SQL query performs a left join between the fields and fields_production tables, retrieving all records from the fields table and the corresponding production rate for each field from the fields_production table.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nGet the details of military operations in the 'Middle East' for the 'MilitaryOperations' schema.\\n\\nContext: CREATE SCHEMA IF NOT EXISTS MilitaryOperations; CREATE TABLE IF NOT EXISTS MilitaryOperations.Operations (operation_id INT, operation_name VARCHAR(255), location VARCHAR(255), start_date DATE, end_date DATE); INSERT INTO MilitaryOperations.Operations (operation_id, operation_name, location, start_date, end_date) VALUES (1, 'Operation Enduring Freedom', 'Afghanistan', '2001-10-07', '2014-12-28'), (2, 'Operation Iraqi Freedom', 'Iraq', '2003-03-19', '2011-12-15');<end_of_turn>\\n<start_of_turn>model\\nSELECT * FROM MilitaryOperations.Operations WHERE location = 'Middle East';\\n\\nExplanation: The SQL query filters records in the 'Operations' table based on the location field, looking for records that have the value 'Middle East'.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat are the names and the corresponding safety protocol IDs of all safety protocols in the safety_protocols table, ordered by the safety protocol ID in ascending order?\\n\\nContext: CREATE TABLE safety_protocols (protocol_id INT, safety_measure TEXT); INSERT INTO safety_protocols (protocol_id, safety_measure) VALUES (1, 'Use personal protective equipment'), (2, 'Regular equipment maintenance'), (3, 'Emergency drills');<end_of_turn>\\n<start_of_turn>model\\nSELECT safety_measure AS name, protocol_id FROM safety_protocols ORDER BY protocol_id ASC;\\n\\nExplanation: The SQL query retrieves all records from the safety_protocols table, orders them by the protocol_id column in ascending order, and returns the safety measure names and their corresponding protocol IDs.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nAdd new record to landfill_capacity table with location 'Florida', capacity 600000, date '2021-01-01'\\n\\nContext: CREATE TABLE landfill_capacity (id INT PRIMARY KEY, location VARCHAR(255), capacity INT, date DATE);<end_of_turn>\\n<start_of_turn>model\\nINSERT INTO landfill_capacity (location, capacity, date) VALUES ('Florida', 600000, '2021-01-01');\\n\\nExplanation: * This query adds a new record to the landfill_capacity table* It does so by specifying the INSERT INTO command* Then, it specifies the landfill_capacity table* Following that, it includes a VALUES clause to specify the new record's values* The new record has the following values: location 'Florida', capacity 600000, and date '2021-01-01'<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nList all unique countries from the 'Wells' table\\n\\nContext: CREATE TABLE Wells (WellName VARCHAR(20), Country VARCHAR(20));<end_of_turn>\\n<start_of_turn>model\\nSELECT DISTINCT Country FROM Wells;\\n\\nExplanation: This query selects all unique Country values from the Wells table.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nList all building permits issued for sustainable projects in the state of Washington.\\n\\nContext: CREATE TABLE building_permits (id INT, project_name VARCHAR(50), project_type VARCHAR(20), state VARCHAR(20)); INSERT INTO building_permits (id, project_name, project_type, state) VALUES (1, 'Green Building', 'Sustainable', 'Washington'); INSERT INTO building_permits (id, project_name, project_type, state) VALUES (2, 'Solar Farm', 'Sustainable', 'Washington');<end_of_turn>\\n<start_of_turn>model\\nSELECT * FROM building_permits WHERE project_type = 'Sustainable' AND state = 'Washington';\\n\\nExplanation: This query lists all building permits issued for sustainable projects in the state of Washington by selecting all columns from the 'building_permits' table where 'project_type' is 'Sustainable' and 'state' is 'Washington'.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the percentage of female workers in the mining industry per state?\\n\\nContext: CREATE TABLE gender_distribution (site VARCHAR(20), state VARCHAR(20), gender VARCHAR(10), num_employees INT); INSERT INTO gender_distribution (site, state, gender, num_employees) VALUES ('SiteA', 'QLD', 'Male', 30), ('SiteA', 'QLD', 'Female', 20), ('SiteB', 'NSW', 'Male', 40), ('SiteB', 'NSW', 'Female', 20);<end_of_turn>\\n<start_of_turn>model\\nSELECT state, (SUM(CASE WHEN gender = 'Female' THEN num_employees ELSE 0 END)\/SUM(num_employees))*100 AS pct_female FROM gender_distribution GROUP BY state;\\n\\nExplanation: Calculate the percentage of female workers in the mining industry per state by grouping the gender_distribution table by state, summing the num_employees column for each gender, and then dividing the sum of female num_employees by the total sum of num_employees for each state, multiplying by 100 to obtain a percentage.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat are the names and birthplaces of all artists who created Post-Impressionist artworks?\\n\\nContext: CREATE TABLE Artists(id INT, name VARCHAR(255), birthplace VARCHAR(255)); CREATE TABLE Artworks(id INT, title VARCHAR(255), artist_id INT, art_style VARCHAR(255)); INSERT INTO Artists(id, name, birthplace) VALUES (1, 'Vincent van Gogh', 'Zundert, Netherlands'); INSERT INTO Artists(id, name, birthplace) VALUES (2, 'Paul Gauguin', 'Paris, France'); INSERT INTO Artworks(id, title, artist_id, art_style) VALUES (1, 'Starry Night', 1, 'Post-Impressionism'); INSERT INTO Artworks(id, title, artist_id, art_style) VALUES (2, 'The Yellow Christ', 2, 'Post-Impressionism');<end_of_turn>\\n<start_of_turn>model\\nSELECT Artists.name, Artists.birthplace FROM Artists INNER JOIN Artworks ON Artists.id = Artworks.artist_id WHERE Artworks.art_style = 'Post-Impressionism';\\n\\nExplanation: This query first performs an inner join between the Artists and Artworks tables based on their id and artist_id columns, respectively. It then filters for the rows where the art_style column is 'Post-Impressionism'. Finally, it retrieves the names and birthplaces of the artists who created Post-Impressionist artworks.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the maximum distance between two subway stations in New York City?\\n\\nContext: CREATE TABLE subway_stations (station_id INT, station_name VARCHAR(255), city VARCHAR(255), distance_to_next_station INT);<end_of_turn>\\n<start_of_turn>model\\nSELECT MAX(distance_to_next_station) FROM subway_stations WHERE city = 'New York City';\\n\\nExplanation: This query calculates the maximum distance between two subway stations in New York City by using the MAX() function on the distance_to_next_station column of the subway_stations table, filtering for rows where the city is 'New York City'.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nFind the number of unique donors from each country in the last quarter of 2022?\\n\\nContext: CREATE TABLE DonorCountry (DonorID INT, DonorName TEXT, DonationAmount DECIMAL(10,2), Country TEXT, DonationDate DATE); INSERT INTO DonorCountry (DonorID, DonorName, DonationAmount, Country, DonationDate) VALUES (1, 'Marie Curie', 120.00, 'France', '2022-10-15');<end_of_turn>\\n<start_of_turn>model\\nSELECT Country, COUNT(DISTINCT DonorID) FROM DonorCountry WHERE DonationDate BETWEEN '2022-10-01' AND '2022-12-31' GROUP BY Country;\\n\\nExplanation: The SQL query finds the number of unique donors from each country in the last quarter of 2022 by selecting the Country and count of distinct DonorID from the DonorCountry table, grouped by Country. It then filters the donation dates between October 1, 2022 and December 31, 2022.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nHow many employees work in mining companies with operations in South America?\\n\\nContext: CREATE TABLE MiningFirms (Company VARCHAR(50), Employees INT); INSERT INTO MiningFirms (Company, Employees) VALUES ('JKL Inc', 400), ('MNO Group', 500), ('PQR Ltd', 600); CREATE TABLE SouthAmericanMines (Company VARCHAR(50), Location VARCHAR(10)); INSERT INTO SouthAmericanMines (Company, Location) VALUES ('STU Co', 'South America'), ('VWX Resources', 'South America');<end_of_turn>\\n<start_of_turn>model\\nSELECT SUM(Employees) FROM MiningFirms WHERE Company IN (SELECT Company FROM SouthAmericanMines)\\n\\nExplanation: This query uses a subquery to first select the companies operating in South America from the SouthAmericanMines table, and then calculates the sum of employees in those companies using the WHERE clause and the SUM() function.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nFind the total number of animals in African and North American regions\\n\\nContext: CREATE TABLE regions (id INT, region_name VARCHAR(255)); INSERT INTO regions (id, region_name) VALUES (1, 'Asia'), (2, 'Africa'), (3, 'North America'); CREATE TABLE animal_location (id INT, animal_id INT, region_id INT); INSERT INTO animal_location (id, animal_id, region_id) VALUES (1, 1, 1), (2, 2, 2), (3, 3, 3); CREATE TABLE animals (id INT, animal_name VARCHAR(255), region_id INT); INSERT INTO animals (id, animal_name, region_id) VALUES (1, 'Tiger', 1), (2, 'Elephant', 2), (3, 'Crane', 3);<end_of_turn>\\n<start_of_turn>model\\nSELECT r.region_name, COUNT(a.id) as animal_count FROM regions r INNER JOIN animal_location al ON r.id = al.region_id INNER JOIN animals a ON al.animal_id = a.id WHERE r.region_name IN ('Africa', 'North America') GROUP BY r.region_name;\\n\\nExplanation: The SQL query joins the 'regions', 'animal_location', and 'animals' tables on the appropriate columns. It then filters the results to only include rows for African and North American regions and calculates the count of animals for each region.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the total value of military equipment sales by 'Airbus' to the French government in 2022?\\n\\nContext: CREATE TABLE military_sales (supplier VARCHAR(255), country VARCHAR(255), sale_value INT, sale_year INT); INSERT INTO military_sales (supplier, country, sale_value, sale_year) VALUES ('Airbus', 'France', 150000000, 2022), ('Airbus', 'France', 130000000, 2021), ('Boeing', 'India', 90000000, 2021);<end_of_turn>\\n<start_of_turn>model\\nSELECT SUM(sale_value) FROM military_sales WHERE supplier = 'Airbus' AND country = 'France' AND sale_year = 2022;\\n\\nExplanation: This query calculates the total value of military equipment sales made by 'Airbus' to the French government in 2022 by summing the sale_value column where supplier is Airbus, country is France, and sale_year is 2022.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nUpdate the sustainability_score of the supplier with supplier_id 2 to 4.5\\n\\nContext: UPDATE suppliers SET sustainability_score = 4.5 WHERE supplier_id = 2;<end_of_turn>\\n<start_of_turn>model\\nUPDATE suppliers SET sustainability_score = 4.5 WHERE supplier_id = 2;\\n\\nExplanation: 1. Update sustainability_score in suppliers table 2. Filter rows by supplier_id = 2 3. Set sustainability_score to 4.5<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the distribution of open pedagogy projects by discipline and project type?\\n\\nContext: CREATE TABLE projects (project_id INT, project_name VARCHAR(50), discipline VARCHAR(20), project_type VARCHAR(20), open_pedagogy BOOLEAN); INSERT INTO projects (project_id, project_name, discipline, project_type, open_pedagogy) VALUES (1, 'Project A', 'Math', 'Individual', TRUE), (2, 'Project B', 'English', 'Group', FALSE), (3, 'Project C', 'Science', 'Individual', TRUE);<end_of_turn>\\n<start_of_turn>model\\nSELECT discipline, project_type, COUNT(*) FROM projects WHERE open_pedagogy = TRUE GROUP BY discipline, project_type;\\n\\nExplanation: The SQL query calculates the number of open pedagogy projects by discipline and project type by using the COUNT function and grouping by the discipline and project_type columns, while filtering for projects with open_pedagogy set to TRUE.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the daily fare collection for route 3C in the past week?\\n\\nContext: CREATE TABLE routes (route_id INT, route_name VARCHAR(255)); INSERT INTO routes (route_id, route_name) VALUES (3, '3C'); CREATE TABLE fares (fare_id INT, route_id INT, fare_amount DECIMAL(5,2), transaction_date DATE); INSERT INTO fares (fare_id, route_id, fare_amount, transaction_date) VALUES (4, 3, 2.00, '2022-04-01'), (5, 3, 2.00, '2022-04-03');<end_of_turn>\\n<start_of_turn>model\\nSELECT DATE(transaction_date) AS transaction_date, SUM(fare_amount) AS daily_fare_collection FROM fares WHERE route_id = 3 AND transaction_date >= DATE_SUB(CURRENT_DATE, INTERVAL 7 DAY) GROUP BY transaction_date;\\n\\nExplanation: Calculates the daily fare collection for route 3C in the past week by summarizing fare_amount grouped by transaction_date.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat are the biosensor development stages for sensors using genes with an expression level above 4.0?\\n\\nContext: CREATE TABLE biosensor_development (sensor_id INT, gene_id INT, development_stage VARCHAR(255)); INSERT INTO biosensor_development (sensor_id, gene_id, development_stage) VALUES (1, 1, 'Research'), (2, 2, 'Development'), (3, 3, 'Testing'); CREATE TABLE gene_expression (gene_id INT, expression FLOAT); INSERT INTO gene_expression (gene_id, expression) VALUES (1, 3.5), (2, 2.8), (3, 4.2);<end_of_turn>\\n<start_of_turn>model\\nSELECT sensor_id, development_stage FROM biosensor_development WHERE gene_id IN (SELECT gene_id FROM gene_expression WHERE expression > 4.0);\\n\\nExplanation: This query first selects sensor_id and development_stage from the biosensor_development table where gene_id is in the subquery that selects gene_id from the gene_expression table where expression is greater than 4.0. It returns the sensor_id and development_stage that use genes with an expression level above 4.0.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nHow many exhibitions were held in New York?\\n\\nContext: CREATE TABLE ExhibitionDetails (exhibition_id INT, city VARCHAR(50), num_visits INT); INSERT INTO ExhibitionDetails (exhibition_id, city, num_visits) VALUES (1, 'Paris', 1500), (2, 'London', 2000), (3, 'New York', 2500);<end_of_turn>\\n<start_of_turn>model\\nSELECT COUNT(*) FROM ExhibitionDetails WHERE city = 'New York';\\n\\nExplanation: This SQL query calculates the number of exhibitions held in New York by using the COUNT function and filtering the data for New York using the WHERE clause.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nHow many mobile devices were sold in each region, for the year 2021, broken down by month?\\n\\nContext: CREATE TABLE sales (sale_id INT, sale_date DATE, quantity INT, region VARCHAR(50));<end_of_turn>\\n<start_of_turn>model\\nSELECT EXTRACT(MONTH FROM sale_date) AS month, region, SUM(quantity) AS total_sales FROM sales WHERE YEAR(sale_date) = 2021 GROUP BY month, region;\\n\\nExplanation: This SQL query calculates the number of mobile devices sold in each region, for the year 2021, broken down by month. It extracts the month from the sale_date column, and groups the results by month and region. It then calculates the sum of quantities for each group, representing the total number of mobile devices sold.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nCalculate the total amount of coal mined in the United States in 2019\\n\\nContext: CREATE TABLE mining_operations (id INT, mine_name TEXT, location TEXT, material TEXT, quantity INT, date DATE); INSERT INTO mining_operations (id, mine_name, location, material, quantity, date) VALUES (6, 'Coal Haven', 'United States', 'coal', 7000, '2019-01-01');<end_of_turn>\\n<start_of_turn>model\\nSELECT SUM(quantity) FROM mining_operations WHERE material = 'coal' AND location = 'United States' AND date = '2019-01-01';\\n\\nExplanation: This query calculates the total amount of coal mined in the United States in 2019 by summing the 'quantity' column for rows with 'material' = 'coal', 'location' = 'United States', and 'date' = '2019-01-01'.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nHow many garments of each color were sold?\\n\\nContext: CREATE TABLE sales (id INT, garment_type VARCHAR(20), color VARCHAR(20), price DECIMAL(10, 2), quantity INT);<end_of_turn>\\n<start_of_turn>model\\nSELECT color, SUM(quantity) AS total_sold FROM sales GROUP BY color;\\n\\nExplanation: The query calculates the total quantity of garments sold for each color. It groups the records by the 'color' column and calculates the total quantity sold.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the minimum number of workers employed on a single project in the 'project_employment' table, grouped by project type?\\n\\nContext: CREATE TABLE project_employment (project_name VARCHAR(255), project_type VARCHAR(255), num_workers INT);<end_of_turn>\\n<start_of_turn>model\\nselect project_type, min(num_workers) as min_workers from project_employment group by project_type;\\n\\nExplanation: This SQL query determines the minimum number of workers employed on a single project in the 'project_employment' table, grouped by project type. It uses the MIN function to find the lowest 'num_workers' value in the table for each unique 'project_type' value.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the total carbon offset of geothermal plants in New Zealand?\\n\\nContext: CREATE TABLE geothermal_plants (id INT, name TEXT, country TEXT, carbon_offsets INT); INSERT INTO geothermal_plants (id, name, country, carbon_offsets) VALUES (1, 'Nga Awa Purua', 'New Zealand', 300000), (2, 'Wairakei', 'New Zealand', 450000);<end_of_turn>\\n<start_of_turn>model\\nSELECT SUM(carbon_offsets) FROM geothermal_plants WHERE country = 'New Zealand';\\n\\nExplanation: The SQL query calculates the total carbon offset of geothermal plants in New Zealand by using the SUM function on the carbon_offsets column, filtering the data for New Zealand.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the total number of rural healthcare facilities and their respective budgets, grouped by state?\\n\\nContext: CREATE TABLE healthcare_facilities (healthcare_id INT, name TEXT, type TEXT, rural BOOLEAN, state_code TEXT, budget INT); INSERT INTO healthcare_facilities (healthcare_id, name, type, rural, state_code, budget) VALUES (1, 'Rural General Hospital', 'Hospital', TRUE, 'CA', 5000000), (2, 'Rural Clinic', 'Clinic', TRUE, 'TX', 1000000);<end_of_turn>\\n<start_of_turn>model\\nSELECT healthcare_facilities.state_code, SUM(healthcare_facilities.budget) as total_budget, COUNT(DISTINCT healthcare_facilities.healthcare_id) as total_facilities FROM healthcare_facilities WHERE healthcare_facilities.rural = TRUE GROUP BY healthcare_facilities.state_code;\\n\\nExplanation: 1. Filter the records to only include rural healthcare facilities.   2. Group the results by the state_code field.   3. Calculate the sum of the budget field and count the number of distinct healthcare_id values.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the total revenue for a specific cuisine type?\\n\\nContext: CREATE TABLE restaurant_revenue (restaurant_id INT, cuisine VARCHAR(255), revenue FLOAT); INSERT INTO restaurant_revenue (restaurant_id, cuisine, revenue) VALUES (1, 'Italian', 5000.00), (2, 'Mexican', 6000.00), (3, 'Italian', 4000.00);<end_of_turn>\\n<start_of_turn>model\\nSELECT cuisine, SUM(revenue) as total_revenue FROM restaurant_revenue GROUP BY cuisine;\\n\\nExplanation: This SQL query calculates the total revenue for a specific cuisine type. It uses the GROUP BY clause to group the records by cuisine type and the SUM function to calculate the total revenue for each group.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the total number of patients that have ever been treated by therapists with the first name \"Alex\" or \"Zoe\"?\\n\\nContext: CREATE TABLE therapists (therapist_id INT, first_name TEXT); INSERT INTO therapists (therapist_id, first_name) VALUES (1, 'Alex'), (2, 'Zoe'), (3, 'James'), (4, 'Michelle'); CREATE TABLE therapist_patients (therapist_id INT, patient_id INT); INSERT INTO therapist_patients (therapist_id, patient_id) VALUES (1, 1), (1, 2), (2, 3), (3, 4), (3, 5), (4, 6);<end_of_turn>\\n<start_of_turn>model\\nSELECT COUNT(DISTINCT patient_id) AS total_patients FROM therapist_patients JOIN therapists ON therapist_patients.therapist_id = therapists.therapist_id WHERE therapists.first_name IN ('Alex', 'Zoe');\\n\\nExplanation: Joins the therapists and therapist_patients tables on the therapist_id foreign key. Filters for therapists with the first name \"Alex\" or \"Zoe\" and counts the total number of distinct patients treated by those therapists.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the average budget allocated for assistive technology per country, ordered by the highest average budget?\\n\\nContext: CREATE TABLE Assistive_Technology (Country VARCHAR(50), Budget NUMERIC(10,2)); INSERT INTO Assistive_Technology VALUES ('USA', 500000), ('Canada', 450000), ('Mexico', 350000), ('Brazil', 600000), ('UK', 400000);<end_of_turn>\\n<start_of_turn>model\\nSELECT Country, AVG(Budget) as Avg_Budget FROM Assistive_Technology GROUP BY Country ORDER BY Avg_Budget DESC;\\n\\nExplanation: The SQL query calculates the average budget for assistive technology for each country by grouping by the Country column and applying the AVG function to the Budget column. It then orders the results in descending order based on the average budget.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the total number of employees who were hired in 2020 and identify as female or non-binary?\\n\\nContext: CREATE TABLE Employees (EmployeeID INT, GenderIdentity VARCHAR(20), HireYear INT); INSERT INTO Employees (EmployeeID, GenderIdentity, HireYear) VALUES (1, 'Male', 2019), (2, 'Female', 2020), (3, 'Non-binary', 2020), (4, 'Genderqueer', 2019), (5, 'Female', 2018);<end_of_turn>\\n<start_of_turn>model\\nSELECT COUNT(*) FROM Employees WHERE HireYear = 2020 AND GenderIdentity IN ('Female', 'Non-binary');\\n\\nExplanation: This query calculates the total number of employees who were hired in 2020 and identify as female or non-binary by filtering the Employees table based on the HireYear and GenderIdentity columns using the IN operator, and then counting the number of rows using the COUNT function.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nInsert a new record for a 'renewable energy' department in a factory with factory_id 4.\\n\\nContext: CREATE TABLE factories (factory_id INT, department VARCHAR(20)); INSERT INTO factories VALUES (1, 'textile'), (2, 'metal'), (3, 'textile'), (4, NULL);<end_of_turn>\\n<start_of_turn>model\\nINSERT INTO factories (factory_id, department) VALUES (4, 'renewable energy');\\n\\nExplanation: The SQL query inserts a new record into the 'factories' table with a 'factory_id' of 4 and a department of 'renewable energy'.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the total assets of the top 2 Shariah-compliant banks?\\n\\nContext: CREATE TABLE ShariahBanks (id INT, bank_name VARCHAR(50), country VARCHAR(50), total_assets FLOAT); INSERT INTO ShariahBanks (id, bank_name, country, total_assets) VALUES (1, 'Al Iman Bank', 'Bahrain', 7000000), (2, 'Dubai Islamic Bank', 'United Arab Emirates', 9000000), (3, 'Maybank Islamic', 'Malaysia', 11000000), (4, 'Bank Islam', 'Brunei', 13000000), (5, 'CIMB Islamic', 'Malaysia', 15000000);<end_of_turn>\\n<start_of_turn>model\\nSELECT bank_name, SUM(total_assets) as total_assets FROM ShariahBanks ORDER BY total_assets DESC LIMIT 2;\\n\\nExplanation: This SQL query calculates the total assets of the top 2 Shariah-compliant banks by ordering the records based on the 'total_assets' column in descending order and selecting the top 2 records. The query calculates the sum of 'total_assets' for each of the top 2 records.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nAdd a new \"carbon_prices\" table with records for Germany (EU) in 2017 and 2018\\n\\nContext: CREATE TABLE carbon_prices (region VARCHAR(255), year INT, price FLOAT);<end_of_turn>\\n<start_of_turn>model\\nINSERT INTO carbon_prices (region, year, price) VALUES ('Germany', 2017, 7.81), ('Germany', 2018, 9.03);\\n\\nExplanation: {1. The INSERT INTO statement is used to add new records into the \"carbon_prices\" table. 2. The VALUES clause provides the data for the new records, which includes the region (Germany), year (2017 and 2018), and price (carbon price for those years).}<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nFind the number of artifacts excavated in 2020 from each excavation site.\\n\\nContext: CREATE TABLE excavation_sites (id INT, name VARCHAR(255)); CREATE TABLE artifacts (id INT, excavation_site_id INT, year INT, type VARCHAR(255));<end_of_turn>\\n<start_of_turn>model\\nSELECT es.name, COUNT(a.id) as artifact_count FROM excavation_sites es JOIN artifacts a ON es.id = a.excavation_site_id WHERE a.year = 2020 GROUP BY es.name;\\n\\nExplanation: The SQL query joins the excavation_sites and artifacts tables on the excavation_site_id column. It then filters for artifacts excavated in 2020 and groups by the name of the excavation site. Finally, it counts the number of artifacts in each group.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat was the maximum donation amount made in 'California' in the year 2021?\\n\\nContext: CREATE TABLE Donations (donation_id INT, region VARCHAR(20), amount DECIMAL(10,2), donation_year INT); INSERT INTO Donations (donation_id, region, amount, donation_year) VALUES (1, 'California', 5000.00, 2021), (2, 'California', 6000.00, 2021);<end_of_turn>\\n<start_of_turn>model\\nSELECT MAX(amount) FROM Donations WHERE region = 'California' AND donation_year = 2021;\\n\\nExplanation: This SQL query calculates the maximum donation amount made in 'California' in the year 2021 by selecting the maximum 'amount' where the 'region' is 'California' and 'donation_year' is 2021.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWho is the user with the most followers in Africa in the last week?\\n\\nContext: CREATE TABLE user_followers(username VARCHAR(30), region VARCHAR(20), followers INT, follow_date DATE); INSERT INTO user_followers(username, region, followers, follow_date) VALUES('Obi', 'Africa', 1000, '2021-10-01'), ('Pat', 'Africa', 1200, '2021-10-02'), ('Quin', 'Africa', 1400, '2021-10-03'), ('Ria', 'Africa', 1600, '2021-10-04');<end_of_turn>\\n<start_of_turn>model\\nSELECT username, MAX(followers) as max_followers FROM (SELECT username, followers, ROW_NUMBER() OVER (PARTITION BY username ORDER BY follow_date DESC) as rn FROM user_followers WHERE region = 'Africa' AND follow_date >= DATEADD(week, -1, CURRENT_DATE)) t GROUP BY username\\n\\nExplanation: Calculate the maximum number of followers for each user in Africa in the last week, then select the user with the most followers.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nCreate a table named 'client_demographics'\\n\\nContext: CREATE TABLE client_demographics (client_id INT PRIMARY KEY, gender VARCHAR(10), income DECIMAL(10,2));<end_of_turn>\\n<start_of_turn>model\\nCREATE TABLE client_demographics (client_id INT PRIMARY KEY, gender VARCHAR(10), income DECIMAL(10,2));\\n\\nExplanation: This SQL statement creates a new table called 'client_demographics' with a primary key 'client_id' and three columns: client_id, gender, and income.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the average cost of dam projects in the 'water_infrastructure' table?\\n\\nContext: CREATE TABLE water_infrastructure (id INT, project_name VARCHAR(50), location VARCHAR(50), cost FLOAT, project_type VARCHAR(50)); INSERT INTO water_infrastructure (id, project_name, location, cost, project_type) VALUES (1, 'Water Treatment Plant', 'San Francisco', 5000000, 'Water Treatment'); INSERT INTO water_infrastructure (id, project_name, location, cost, project_type) VALUES (2, 'Dam', 'New York', 8000000, 'Dam'); INSERT INTO water_infrastructure (id, project_name, location, cost, project_type) VALUES (3, 'Reservoir', 'Los Angeles', 9000000, 'Reservoir');<end_of_turn>\\n<start_of_turn>model\\nSELECT AVG(cost) FROM water_infrastructure WHERE project_type = 'Dam';\\n\\nExplanation: This SQL query calculates the average cost of dam projects in the 'water_infrastructure' table by finding the mean of the 'cost' column where the 'project_type' equals 'Dam'.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat was the total sales revenue for 'DrugA' in Q1 2020?\\n\\nContext: CREATE TABLE sales (drug_name TEXT, quarter INTEGER, year INTEGER, revenue INTEGER); INSERT INTO sales (drug_name, quarter, year, revenue) VALUES ('DrugA', 1, 2020, 500000);<end_of_turn>\\n<start_of_turn>model\\nSELECT revenue FROM sales WHERE drug_name = 'DrugA' AND quarter = 1 AND year = 2020;\\n\\nExplanation: This query filters the sales table to find the revenue generated by DrugA in Q1 of 2020.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nFind the average number of hours volunteered per month for each gender in 2022.\\n\\nContext: CREATE TABLE volunteers (id INT PRIMARY KEY, gender VARCHAR(10), hours_volunteered INT, signup_date DATE); INSERT INTO volunteers (id, gender, hours_volunteered, signup_date) VALUES (1, 'male', 5, '2022-03-15');<end_of_turn>\\n<start_of_turn>model\\nSELECT gender, EXTRACT(MONTH FROM signup_date) AS month, AVG(hours_volunteered) FROM volunteers WHERE signup_date BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY gender, month;\\n\\nExplanation: This query calculates the average number of hours volunteered per month for each gender in 2022. It groups the records by gender and month of signup_date and calculates the average hours_volunteered for each group.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nAdd a new game genre 'Simulation'\\n\\nContext: CREATE TABLE GameGenres (GenreID int, Genre varchar(50)); INSERT INTO GameGenres (GenreID, Genre) VALUES (1, 'Action'), (2, 'Adventure'), (3, 'Strategy');<end_of_turn>\\n<start_of_turn>model\\nINSERT INTO GameGenres (GenreID, Genre) VALUES (4, 'Simulation');\\n\\nExplanation: This query inserts a new record into the GameGenres table with a GenreID of 4 and a Genre of 'Simulation'.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the average age of teachers who have completed professional development in 'Open Pedagogy'?\\n\\nContext: CREATE TABLE teachers (id INT, name TEXT, age INT, profession TEXT); INSERT INTO teachers (id, name, age, profession) VALUES (1, 'John Doe', 45, 'Teacher'); INSERT INTO teachers (id, name, age, profession) VALUES (2, 'Jane Smith', 35, 'Teacher'); CREATE TABLE professional_development (id INT, teacher_id INT, topic TEXT, completed_date DATE); INSERT INTO professional_development (id, teacher_id, topic, completed_date) VALUES (1, 1, 'Open Pedagogy', '2021-08-01'); INSERT INTO professional_development (id, teacher_id, topic, completed_date) VALUES (2, 2, 'Instructional Design', '2021-07-15');<end_of_turn>\\n<start_of_turn>model\\nSELECT AVG(teachers.age) FROM teachers INNER JOIN professional_development ON teachers.id = professional_development.teacher_id WHERE professional_development.topic = 'Open Pedagogy';\\n\\nExplanation: First, we join the teachers table and professional_development table on the teacher_id column. Then, we filter the records where the topic is 'Open Pedagogy'. Finally, we calculate the average age of the teachers in the resulting dataset.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nHow many biosensor technology development projects were completed in Africa in 2019?\\n\\nContext: CREATE TABLE biosensor_projects (id INT, project_name VARCHAR(50), completion_year INT, region VARCHAR(50)); INSERT INTO biosensor_projects (id, project_name, completion_year, region) VALUES (1, 'Glucose Monitor', 2018, 'Europe'); INSERT INTO biosensor_projects (id, project_name, completion_year, region) VALUES (2, 'Heart Rate Sensor', 2019, 'Africa'); INSERT INTO biosensor_projects (id, project_name, completion_year, region) VALUES (3, 'Temperature Sensor', 2020, 'Asia');<end_of_turn>\\n<start_of_turn>model\\nSELECT COUNT(*) FROM biosensor_projects WHERE completion_year = 2019 AND region = 'Africa';\\n\\nExplanation: We count the number of biosensor technology development projects completed in Africa in 2019 by selecting all records and applying the COUNT() function, filtering by the completion year 2019 and region 'Africa'.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nHow many workers are employed by fair trade factories?\\n\\nContext: CREATE TABLE factories (id INT, name VARCHAR(255), location VARCHAR(255), type VARCHAR(255), PRIMARY KEY(id)); INSERT INTO factories (id, name, location, type) VALUES (3, 'Fair Trade Factories', 'Global', 'Factory'); CREATE TABLE workers (id INT, name VARCHAR(255), position VARCHAR(255), factory_id INT, PRIMARY KEY(id), FOREIGN KEY (factory_id) REFERENCES factories(id)); INSERT INTO workers (id, name, position, factory_id) VALUES (4, 'Jane Doe', 'Seamstress', 3), (5, 'John Smith', 'Quality Control', 3);<end_of_turn>\\n<start_of_turn>model\\nSELECT COUNT(*) FROM workers WHERE factory_id = (SELECT id FROM factories WHERE name = 'Fair Trade Factories' AND type = 'Factory');\\n\\nExplanation: The SQL query first selects the count of workers from the workers table, filtering by factory ID. It then joins the factories table to find the ID of 'Fair Trade Factories' to filter the workers table accordingly.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhich brands have used 'vegan leather' in their products?\\n\\nContext: CREATE TABLE brands(brand_id INT, brand_name TEXT); INSERT INTO brands(brand_id, brand_name) VALUES (1, 'BrandA'), (2, 'BrandB'), (3, 'BrandC'), (4, 'BrandD'); CREATE TABLE products(product_id INT, brand_id INT, material TEXT); INSERT INTO products(product_id, brand_id, material) VALUES (1, 1, 'vegan leather'), (2, 2, 'leather'), (3, 3, 'vegan leather'), (4, 4, 'vegan leather');<end_of_turn>\\n<start_of_turn>model\\nSELECT brand_id, brand_name FROM brands b JOIN products p ON b.brand_id = p.brand_id WHERE material = 'vegan leather';\\n\\nExplanation: Find the brands that have used 'vegan leather' by joining brands and products tables and filtering by material.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nHow many IoT devices are present in total?\\n\\nContext: CREATE TABLE IoTDevices (device_id INT, device_type VARCHAR(20), region VARCHAR(10)); INSERT INTO IoTDevices (device_id, device_type, region) VALUES (1, 'Soil Moisture Sensor', 'West'); INSERT INTO IoTDevices (device_id, device_type, region) VALUES (2, 'Light Sensor', 'East'); INSERT INTO IoTDevices (device_id, device_type, region) VALUES (3, 'Temperature Sensor', 'North');<end_of_turn>\\n<start_of_turn>model\\nSELECT COUNT(*) FROM IoTDevices;\\n\\nExplanation: This query counts the total number of IoT devices by selecting all records and counting the number of records.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the total number of volunteers and total volunteer hours for each country in Q3 2022?\\n\\nContext: CREATE TABLE volunteer_hours (hour_id INT, volunteer_id INT, hours_spent FLOAT, hour_date DATE, volunteer_country TEXT); INSERT INTO volunteer_hours (hour_id, volunteer_id, hours_spent, hour_date, volunteer_country) VALUES (1, 1, 3, '2022-07-01', 'USA'); INSERT INTO volunteer_hours (hour_id, volunteer_id, hours_spent, hour_date, volunteer_country) VALUES (2, 2, 5, '2022-08-03', 'Canada');<end_of_turn>\\n<start_of_turn>model\\nSELECT vh.volunteer_country, COUNT(DISTINCT vh.volunteer_id) AS total_volunteers, SUM(vh.hours_spent) AS total_hours FROM volunteer_hours vh WHERE EXTRACT(MONTH FROM vh.hour_date) BETWEEN 7 AND 9 GROUP BY vh.volunteer_country;\\n\\nExplanation: This query calculates the total number of volunteers and total volunteer hours for each country in Q3 2022. It groups the data by volunteer_country and calculates the required metrics.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nHow many onshore wells were drilled in Canada in each year since 2015?\\n\\nContext: CREATE TABLE OnshoreWells (WellName TEXT, Location TEXT, DrillDate DATE); INSERT INTO OnshoreWells (WellName, Location, DrillDate) VALUES ('Well1', 'Canada', '2015-05-01'), ('Well2', 'Canada', '2016-07-15'), ('Well3', 'Canada', '2017-03-28');<end_of_turn>\\n<start_of_turn>model\\nSELECT COUNT(*) AS WellCount, EXTRACT(YEAR FROM DrillDate) AS Year  FROM OnshoreWells WHERE Location = 'Canada' GROUP BY Year;\\n\\nExplanation: This query calculates the number of onshore wells drilled in Canada for each year since 2015 by filtering the records with the specified location and counting the number of records for each year using the EXTRACT function.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nRank artists by their total revenue in 2020, assigning a rank of 1 to the artist with the highest revenue.\\n\\nContext: CREATE TABLE artists (artist_id INT, artist_name VARCHAR(100), revenue INT, year INT); INSERT INTO artists (artist_id, artist_name, revenue, year) VALUES (1, 'Taylor Swift', 1200000, 2020); INSERT INTO artists (artist_id, artist_name, revenue, year) VALUES (2, 'BTS', 1000000, 2020); INSERT INTO artists (artist_id, artist_name, revenue, year) VALUES (3, 'Dua Lipa', 1100000, 2020);<end_of_turn>\\n<start_of_turn>model\\nSELECT artist_name, RANK() OVER (ORDER BY revenue DESC) as artist_rank FROM artists WHERE year = 2020;\\n\\nExplanation: This query ranks artists by their total revenue in 2020, assigning a rank of 1 to the artist with the highest revenue. It does this by using the RANK function and ordering the results by revenue in descending order.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the maximum transaction amount for a single client?\\n\\nContext: CREATE TABLE transactions (transaction_id INT, client_id INT, amount DECIMAL(10,2)); INSERT INTO transactions (transaction_id, client_id, amount) VALUES (1, 1, 500.00), (2, 1, 1000.00), (3, 2, 250.00), (4, 3, 10000.00), (5, 3, 500.00);<end_of_turn>\\n<start_of_turn>model\\nSELECT MAX(amount) FROM transactions GROUP BY client_id;\\n\\nExplanation: This query calculates the maximum transaction amount for a single client. It does this by grouping the transactions table by client_id and calculating the maximum of the amount field for each group.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nHow many articles were published per day in the month of June 2022?\\n\\nContext: CREATE TABLE articles (id INT, title VARCHAR(50), publish_date DATE); INSERT INTO articles (id, title, publish_date) VALUES (1, 'Article1', '2022-06-01'), (2, 'Article2', '2022-06-15'), (3, 'Article3', '2022-05-30');<end_of_turn>\\n<start_of_turn>model\\nSELECT DATE_FORMAT(publish_date, '%Y-%m-%d') as publish_date, COUNT(*) as articles_per_day FROM articles WHERE publish_date >= '2022-06-01' AND publish_date < '2022-07-01' GROUP BY publish_date\\n\\nExplanation: This query counts the number of articles that were published per day in the month of June 2022. It first filters the 'articles' table to only include rows where the publish date is in June 2022. Then, it uses the GROUP BY clause to group the results by day. Finally, it uses the COUNT function to count the number of articles that were published on each day.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the average number of students in each 'school_district'?\\n\\nContext: CREATE TABLE schools (school_id INT, school_name VARCHAR(25), school_district VARCHAR(25)); INSERT INTO schools (school_id, school_name, school_district) VALUES (1, 'Oak Grove High School', 'Central Riverland'), (2, 'Pine Tree Elementary School', 'Eastern Shorelines'), (3, 'Riverbend Middle School', 'Central Riverland'), (4, 'Willow Creek High School', 'Western Hills');<end_of_turn>\\n<start_of_turn>model\\nSELECT school_district, AVG(COUNT(*)) FROM schools GROUP BY school_district;\\n\\nExplanation: This SQL query calculates the average number of schools in each school district by first performing a COUNT(*) on the 'schools' table grouped by 'school_district', then finding the average of those counts.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the total word count of articles in 'reputable_news' table and 'investigative_reports' table for each author?\\n\\nContext: CREATE TABLE reputable_news (article_id INT, author_name VARCHAR(50), author_age INT, word_count INT, publication_date DATE);CREATE TABLE investigative_reports (article_id INT, author_name VARCHAR(50), investigation_length INT, word_count INT, publication_date DATE);<end_of_turn>\\n<start_of_turn>model\\nSELECT author_name, SUM(word_count) FROM reputable_news GROUP BY author_name;SELECT author_name, SUM(word_count) FROM investigative_reports GROUP BY author_name;\\n\\nExplanation: These two queries calculate the total word count for each author in 'reputable_news' and 'investigative_reports' tables separately by summing up the word count for each author.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nUpdate the investment amount for a specific investment.\\n\\nContext: CREATE TABLE Investments (id INT, company_id INT, investment_amount INT, investment_date DATE); INSERT INTO Investments (id, company_id, investment_amount, investment_date) VALUES (1, 1, 1000000, '2022-01-01'); INSERT INTO Investments (id, company_id, investment_amount, investment_date) VALUES (2, 2, 2000000, '2022-02-01');<end_of_turn>\\n<start_of_turn>model\\nUPDATE Investments SET investment_amount = 4000000 WHERE id = 1;\\n\\nExplanation: This query updates the investment amount for the investment with id 1 in the Investments table, changing it from 1000000 to 4000000.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nDrop the \"vessels_summary\" view.\\n\\nContext: CREATE TABLE vessels (vessel_id INT, name VARCHAR(50), type VARCHAR(50), year_built INT); CREATE VIEW vessels_summary AS SELECT type, AVG(year_built) AS avg_year_built FROM vessels GROUP BY type;<end_of_turn>\\n<start_of_turn>model\\nDROP VIEW vessels_summary;\\n\\nExplanation: 1. This statement drops the \"vessels_summary\" view.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nInsert a new mining incident in the 'incidents' table for 'Brazil' on '2023-03-15' with incident type 'Water Pollution'.\\n\\nContext: CREATE TABLE incidents(id INT, incident_date DATE, location VARCHAR(255), incident_type VARCHAR(255));<end_of_turn>\\n<start_of_turn>model\\nINSERT INTO incidents(id, incident_date, location, incident_type) VALUES (NULL, '2023-03-15', 'Brazil', 'Water Pollution');\\n\\nExplanation: This query inserts a new mining incident into the 'incidents' table with a NULL id, an 'incident_date' of '2023-03-15', a 'location' of 'Brazil', and an 'incident_type' of 'Water Pollution'. The database will automatically generate a unique 'id' for the new record.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nFind the total biomass of fish species in Indian aquaculture farms for the year 2020.\\n\\nContext: CREATE TABLE Indian_Aquaculture_Farms (id INT, biomass FLOAT, year INT, species VARCHAR(20)); INSERT INTO Indian_Aquaculture_Farms (id, biomass, year, species) VALUES (1, 150.2, 2020, 'Catla'); INSERT INTO Indian_Aquaculture_Farms (id, biomass, year, species) VALUES (2, 120.5, 2020, 'Rohu');<end_of_turn>\\n<start_of_turn>model\\nSELECT SUM(biomass) FROM Indian_Aquaculture_Farms WHERE year = 2020 AND species IN ('Catla', 'Rohu');\\n\\nExplanation: Joining the Indian_Aquaculture_Farms table, we filter for the year 2020 and specific fish species, then calculate the total biomass.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the maximum, minimum, and average number of transactions per day for each smart contract in the 'smart_contracts_transactions' table?\\n\\nContext: CREATE TABLE smart_contracts_transactions (contract_id INT, transaction_date DATE, transactions INT); INSERT INTO smart_contracts_transactions (contract_id, transaction_date, transactions) VALUES (1, '2021-01-01', 10), (1, '2021-01-02', 15), (1, '2021-01-03', 20), (2, '2021-01-01', 5), (2, '2021-01-02', 8), (2, '2021-01-03', 12), (3, '2021-01-01', 25), (3, '2021-01-02', 30), (3, '2021-01-03', 35);<end_of_turn>\\n<start_of_turn>model\\nSELECT contract_id, AVG(transactions) AS AverageTransactions, MIN(transactions) AS MinTransactions, MAX(transactions) AS MaxTransactions FROM smart_contracts_transactions GROUP BY contract_id;\\n\\nExplanation: This query calculates the average, minimum, and maximum number of transactions per day for each smart contract, by adding up the transactions field for each contract_id and grouping the results by contract_id.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nAlter the \"cultural_events\" table by adding a new column named \"event_website\" with data type VARCHAR(50).\\n\\nContext: CREATE TABLE cultural_events (event_id INT, event_name VARCHAR(50), start_date DATE, end_date DATE, location VARCHAR(50), tickets_sold INT);<end_of_turn>\\n<start_of_turn>model\\nALTER TABLE cultural_events ADD event_website VARCHAR(50);\\n\\nExplanation: The query alters the \"cultural_events\" table by adding a new column named \"event_website\" with the data type VARCHAR(50).<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nFind the traditional art with the greatest increase in popularity in Southeast Asia between 2015 and 2020.\\n\\nContext: CREATE TABLE Arts (ArtID INT, ArtName VARCHAR(255), Country VARCHAR(255), Popularity INT, Year INT);<end_of_turn>\\n<start_of_turn>model\\nSELECT ArtName, MAX(Popularity) - MIN(Popularity) AS PopularityIncrease FROM Arts WHERE Country = 'Southeast Asia' AND Year BETWEEN 2015 AND 2020 GROUP BY ArtName ORDER BY PopularityIncrease DESC LIMIT 1;\\n\\nExplanation: This SQL query identifies the traditional art with the greatest increase in popularity in Southeast Asia between 2015 and 2020. It creates a table named Arts with columns ArtID, ArtName, Country, Popularity, and Year. The query then groups the results by art name and calculates the increase in popularity using the MAX() and MIN() functions. Finally, the query orders the results in descending order and limits the results to the top increase in popularity.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the average energy efficiency (in kWh\/sq.m) of commercial buildings in the 'Asia Pacific' region?\\n\\nContext: CREATE TABLE commercial_buildings (building_id INT, country VARCHAR(100), energy_efficiency FLOAT); INSERT INTO commercial_buildings (building_id, country, energy_efficiency) VALUES (1, 'Japan', 80.0), (2, 'Australia', 60.0), (3, 'South Korea', 70.0), (4, 'Singapore', 50.0);<end_of_turn>\\n<start_of_turn>model\\nSELECT AVG(energy_efficiency) FROM commercial_buildings WHERE country IN (SELECT country FROM regions WHERE region = 'Asia Pacific');\\n\\nExplanation: This SQL query calculates the average energy efficiency (in kWh\/sq.m) of commercial buildings in the 'Asia Pacific' region. It uses a subquery to first select the countries in the 'Asia Pacific' region from the regions table, and then calculates the average energy efficiency for the rows in the commercial_buildings table where the country is in the subquery. The AVG function is used to calculate the average energy efficiency.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nAdd a new record for a program 'Cultural Arts' with a start date of Sep 1, 2023 and an end date of Aug 31, 2024 in the 'Programs' table\\n\\nContext: CREATE TABLE Programs (ProgramID INT, ProgramName VARCHAR(50), StartDate DATE, EndDate DATE);<end_of_turn>\\n<start_of_turn>model\\nINSERT INTO Programs (ProgramID, ProgramName, StartDate, EndDate) VALUES (3, 'Cultural Arts', '2023-09-01', '2024-08-31');\\n\\nExplanation: This query inserts a new record into the 'Programs' table for a 'Cultural Arts' program, with a start date of Sep 1, 2023 and an end date of Aug 31, 2024.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nInsert a new sustainable fashion item 'Jacket' into the 'fashion_trend_data' table.\\n\\nContext: CREATE TABLE fashion_trend_data (id INT, product_name VARCHAR(30), is_sustainable BOOLEAN); INSERT INTO fashion_trend_data (id, product_name, is_sustainable) VALUES (1, 'T-shirt', true), (2, 'Jeans', false);<end_of_turn>\\n<start_of_turn>model\\nINSERT INTO fashion_trend_data (product_name, is_sustainable) VALUES ('Jacket', true);\\n\\nExplanation: This SQL query inserts a new row into the fashion_trend_data table with a product_name value of 'Jacket' and an is_sustainable value of true. The id column is auto-generated by the database.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nShow the total capacity for each energy source in the \"energy_sources\" table, sorted by the total capacity in descending order\\n\\nContext: CREATE TABLE energy_sources (id INT, source VARCHAR(50), capacity FLOAT);<end_of_turn>\\n<start_of_turn>model\\nSELECT source, SUM(capacity) as total_capacity FROM energy_sources GROUP BY source ORDER BY total_capacity DESC;\\n\\nExplanation: This query retrieves the total capacity for each energy source in the \"energy_sources\" table, grouped by the \"source\" column and sorted by the total capacity in descending order.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the minimum size (in square kilometers) of a habitat for reptiles in the 'habitats' table?\\n\\nContext: CREATE TABLE habitats (id INT, animal_type VARCHAR(50), size_km FLOAT); INSERT INTO habitats (id, animal_type, size_km) VALUES (1, 'Reptile', 25.1);<end_of_turn>\\n<start_of_turn>model\\nSELECT MIN(size_km) FROM habitats WHERE animal_type = 'Reptile';\\n\\nExplanation: This query calculates the minimum size (in square kilometers) of a habitat for reptiles in the 'habitats' table.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the total weight of packages shipped to Australia from any country in Oceania in the last month?\\n\\nContext: CREATE TABLE package_destinations (id INT, package_weight FLOAT, shipped_from VARCHAR(20), shipped_to VARCHAR(20), shipped_date DATE); INSERT INTO package_destinations (id, package_weight, shipped_from, shipped_to, shipped_date) VALUES (1, 2.3, 'New Zealand', 'Australia', '2022-01-15');<end_of_turn>\\n<start_of_turn>model\\nSELECT SUM(package_weight) FROM package_destinations WHERE shipped_to = 'Australia' AND shipped_from LIKE 'Oceania%' AND shipped_date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH);\\n\\nExplanation: The SQL query calculates the total weight of packages shipped to Australia from any country in Oceania in the last month using the SUM function and the WHERE clause to filter the packages based on the shipped_to, shipped_from and shipped_date.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nNumber of high-ESG-rated sustainable infrastructure in the US\\n\\nContext: CREATE TABLE infrastructure_esg(infrastructure_id INT, esg_rating INT, country VARCHAR(10));<end_of_turn>\\n<start_of_turn>model\\nSELECT COUNT(*) FROM infrastructure_esg WHERE esg_rating >= 4 AND country = 'United States';\\n\\nExplanation: Counts the number of records in the infrastructure_esg table with an esg_rating of 4 or higher and 'country' of 'United States'.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the total revenue and player count for each game genre?\\n\\nContext: CREATE TABLE games (game_id INT, genre VARCHAR(50), player_count INT, revenue DECIMAL(10, 2)); INSERT INTO games VALUES (1, 'Action', 10000, 50000.00), (2, 'Adventure', 8000, 45000.00), (3, 'Simulation', 12000, 60000.00);<end_of_turn>\\n<start_of_turn>model\\nSELECT genre, SUM(player_count) as total_players, SUM(revenue) as total_revenue FROM games GROUP BY genre;\\n\\nExplanation: The SQL query calculates the total revenue and player count for each game genre. It groups the records by genre and calculates the sum of player_count and revenue for each group.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the total investment in climate communication initiatives in Central America in 2019 and 2020?\\n\\nContext: CREATE TABLE climate_communication_projects (project_id INT, location VARCHAR(50), investment_amount FLOAT, investment_year INT); INSERT INTO climate_communication_projects (project_id, location, investment_amount, investment_year) VALUES (1, 'Guatemala', 1000000, 2019), (2, 'Nicaragua', 1200000, 2019), (3, 'Honduras', 1500000, 2019), (4, 'Costa Rica', 900000, 2019), (5, 'El Salvador', 800000, 2019), (6, 'Belize', 1100000, 2020), (7, 'Guatemala', 1300000, 2020), (8, 'Nicaragua', 1400000, 2020), (9, 'Honduras', 1700000, 2020), (10, 'Costa Rica', 1200000, 2020), (11, 'El Salvador', 1000000, 2020);<end_of_turn>\\n<start_of_turn>model\\nSELECT SUM(investment_amount) FROM climate_communication_projects WHERE location LIKE 'Central America' AND investment_year IN (2019, 2020);\\n\\nExplanation: This SQL query calculates the total investment in climate communication initiatives in Central America in 2019 and 2020 by using the SUM() aggregation function on the investment_amount column, filtering the data by the location column containing the string 'Central America' and the investment_year column being either 2019 or 2020.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat are the names of the forests with the least sustainable management methods?\\n\\nContext: CREATE TABLE Forests ( ForestID INT PRIMARY KEY, Name VARCHAR(50), Country VARCHAR(50), Hectares FLOAT ); CREATE TABLE Management ( ManagementID INT PRIMARY KEY, Method VARCHAR(50), ForestID INT, FOREIGN KEY (ForestID) REFERENCES Forests(ForestID)); CREATE TABLE Sustainability ( SustainabilityID INT PRIMARY KEY, Certified BOOLEAN, ManagementID INT, FOREIGN KEY (ManagementID) REFERENCES Management(ManagementID)); CREATE VIEW LeastSustainable AS SELECT ForestID FROM Sustainability WHERE Certified = FALSE LIMIT 5;<end_of_turn>\\n<start_of_turn>model\\nSELECT Forests.Name FROM Forests INNER JOIN Management ON Forests.ForestID = Management.ForestID INNER JOIN LeastSustainable ON Management.ManagementID = LeastSustainable.ForestID;\\n\\nExplanation: This query joins the Forests, Management, and LeastSustainable tables using inner joins based on the ForestID and ManagementID foreign keys. It retrieves the names of the forests with the least sustainable management methods by joining with the LeastSustainable view.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the average energy consumption of buildings in the 'smart_cities' schema, grouped by city, and only for buildings with consumption > 2000?\\n\\nContext: CREATE TABLE smart_cities.building_energy_consumption (city VARCHAR(50), consumption FLOAT); INSERT INTO smart_cities.building_energy_consumption (city, consumption) VALUES ('San Francisco', 1234.5), ('Seattle', 2345.6), ('New York', 3456.7), ('Los Angeles', 1500.0), ('Chicago', 2500.0);<end_of_turn>\\n<start_of_turn>model\\nSELECT city, AVG(consumption) FROM smart_cities.building_energy_consumption WHERE consumption > 2000 GROUP BY city;\\n\\nExplanation: The SQL query calculates the average energy consumption for each city in the 'smart_cities' schema's 'building_energy_consumption' table, but only for buildings with a consumption greater than 2000. It does this by using the AVG function on the 'consumption' column, grouped by the 'city' column, and using a WHERE clause to filter the results.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the minimum age of patients with Yellow Fever in Kenya?\\n\\nContext: CREATE TABLE Patients (ID INT, Gender VARCHAR(10), Age INT, Disease VARCHAR(20), Country VARCHAR(30), Diagnosis_Date DATE); INSERT INTO Patients (ID, Gender, Age, Disease, Country, Diagnosis_Date) VALUES (1, 'Female', 28, 'Yellow Fever', 'Kenya', '2021-02-01');<end_of_turn>\\n<start_of_turn>model\\nSELECT MIN(Age) FROM Patients WHERE Disease = 'Yellow Fever' AND Country = 'Kenya';\\n\\nExplanation: Find the minimum age of patients with Yellow Fever in Kenya.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nHow many marine species have been impacted by ocean acidification, and what are their names?\\n\\nContext: CREATE TABLE ocean_acidification_impact (species_name TEXT, impact_level INTEGER);<end_of_turn>\\n<start_of_turn>model\\nSELECT COUNT(species_name), species_name FROM ocean_acidification_impact GROUP BY species_name;\\n\\nExplanation: This query calculates the number of marine species impacted by ocean acidification, and lists their names. It does so by selecting the COUNT and species_name columns from the ocean_acidification_impact table, grouped by the species_name column.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nList all players who have participated in ESports events for a single platform, along with their demographic information.\\n\\nContext: CREATE TABLE Players (PlayerID INT, Age INT, Gender VARCHAR(10));CREATE VIEW ESportsEventsView (PlayerID, EventCount, Platform) AS SELECT PlayerID, COUNT(*), GamePlatform FROM ESportsEvents JOIN Games ON ESportsEvents.GameID = Games.GameID GROUP BY PlayerID, GamePlatform;<end_of_turn>\\n<start_of_turn>model\\nSELECT p.PlayerID, p.Age, p.Gender FROM Players p INNER JOIN ESportsEventsView ev ON p.PlayerID = ev.PlayerID GROUP BY p.PlayerID HAVING COUNT(DISTINCT ev.Platform) = 1;\\n\\nExplanation: By using a INNER JOIN between the Players table and ESportsEventsView, this query identifies all players who have participated in ESports events for a single platform, and returns their demographic information.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the average age of athletes by position?\\n\\nContext: CREATE TABLE athlete_data (athlete_id INT, position VARCHAR(50), team_id INT, age INT);<end_of_turn>\\n<start_of_turn>model\\nSELECT position, AVG(age) as avg_age FROM athlete_data GROUP BY position;\\n\\nExplanation: The SQL query calculates the average age of athletes by position. It groups the athlete_data table by position and calculates the average age for each position using the AVG() function.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhich regulatory frameworks have been updated in the 'polygon' network since 2020?\\n\\nContext: CREATE TABLE regulatory_frameworks (framework_id INT, name VARCHAR(255), network VARCHAR(255), last_updated DATE); INSERT INTO regulatory_frameworks (framework_id, name, network, last_updated) VALUES (1, 'Framework1', 'polygon', '2022-01-01'), (2, 'Framework2', 'ethereum', '2021-12-31');<end_of_turn>\\n<start_of_turn>model\\nSELECT * FROM regulatory_frameworks WHERE network = 'polygon' AND last_updated >= '2020-01-01';\\n\\nExplanation: The SQL query selects all records from the 'regulatory_frameworks' table where the 'network' is 'polygon' and the 'last_updated' date is on or after 2020.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the sum of all impact investments in the 'technology' sector?\\n\\nContext: CREATE TABLE company_impact_investments (company_id INT, region VARCHAR(20), investment_amount FLOAT); INSERT INTO company_impact_investments (company_id, region, investment_amount) VALUES (1, 'technology', 150000), (2, 'finance', 120000), (1, 'technology', 180000); CREATE TABLE companies (id INT, sector VARCHAR(20)); INSERT INTO companies (id, sector) VALUES (1, 'technology'), (2, 'finance');<end_of_turn>\\n<start_of_turn>model\\nSELECT SUM(company_impact_investments.investment_amount) FROM company_impact_investments INNER JOIN companies ON company_impact_investments.company_id = companies.id WHERE companies.sector = 'technology';\\n\\nExplanation: This SQL query calculates the sum of all impact investments in the 'technology' sector. It does this by using the SUM function on the investment_amount column, filtering the rows with a WHERE clause to only consider those in the 'technology' sector. It performs an INNER JOIN between the company_impact_investments table and the companies table to join the investment data with the company sector data.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nIdentify the number of times each material has been reused in the circular economy.\\n\\nContext: CREATE TABLE material_reuse (id INT, material VARCHAR(255), reuse_count INT);<end_of_turn>\\n<start_of_turn>model\\nSELECT material, COUNT(*) as reuse_count FROM material_reuse GROUP BY material;\\n\\nExplanation: Count the number of times each material has been reused by grouping the material_reuse table by the material column and calculating the count for each group.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nInsert data into 'artists' table from a CSV file\\n\\nContext: CREATE TABLE artists (name VARCHAR(255), birth_year INT, death_year INT);<end_of_turn>\\n<start_of_turn>model\\nINSERT INTO artists (name, birth_year, death_year) SELECT * FROM csv_file('artists.csv') AS t(name VARCHAR(255), birth_year INT, death_year INT);\\n\\nExplanation: Inserting data from a CSV file 'artists.csv' into the 'artists' table. The CSV file contains columns 'name', 'birth_year', and 'death_year' that match the table's columns.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nIdentify the menu item with the highest price from the \"menu_items\" table.\\n\\nContext: CREATE TABLE menu_items (id INT, restaurant_id INT, name VARCHAR(255), category VARCHAR(255), price DECIMAL(5,2)); INSERT INTO menu_items (id, restaurant_id, name, category, price) VALUES (1, 1, 'Quinoa Salad', 'Salads', 15.99), (2, 1, 'Grilled Chicken Sandwich', 'Sandwiches', 12.49), (3, 2, 'Cheeseburger', 'Burgers', 8.99), (4, 2, 'Veggie Wrap', 'Wraps', 9.99), (5, 3, 'Spaghetti Bolognese', 'Pastas', 16.99);<end_of_turn>\\n<start_of_turn>model\\nSELECT name, MAX(price) FROM menu_items;\\n\\nExplanation: This query selects the name and price of the menu item with the highest price from the \"menu_items\" table.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nHow many animals from endangered species are in the 'North America' habitat?\\n\\nContext: CREATE TABLE Animals (AnimalID INT, Species VARCHAR(20), Habitat VARCHAR(20)); INSERT INTO Animals (AnimalID, Species, Habitat) VALUES (1, 'Grizzly Bear', 'North America'); INSERT INTO Animals (AnimalID, Species, Habitat) VALUES (2, 'Whooping Crane', 'North America'); INSERT INTO Animals (AnimalID, Species, Habitat) VALUES (3, 'Amur Leopard', 'Asia');<end_of_turn>\\n<start_of_turn>model\\nSELECT COUNT(*) FROM Animals WHERE Species IN (SELECT Species FROM Endangered_Species WHERE Habitat = 'North America');\\n\\nExplanation: This query counts the number of animals from endangered species in the 'North America' habitat by using a subquery to select endangered species in that habitat.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the total quantity of supplies for each location in the disaster preparedness table, and what is the percentage of the total quantity for each location?\\n\\nContext: CREATE TABLE disaster_preparedness(id INT, location VARCHAR(255), supplies VARCHAR(255), quantity INT);<end_of_turn>\\n<start_of_turn>model\\nSELECT location, supplies, SUM(quantity) as total_quantity, total_quantity * 100.0 \/ SUM(SUM(quantity)) OVER (PARTITION BY supplies) as percentage FROM disaster_preparedness GROUP BY location, supplies;\\n\\nExplanation: This query calculates the total quantity of supplies for each location in the disaster preparedness table and calculates the percentage of the total quantity for each location using a window function. The PARTITION BY clause is used to reset the percentage for each supply type.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the total revenue generated from esports events in the last 3 months?\\n\\nContext: CREATE TABLE EsportsEvents (EventID INT, EventDate DATE, Revenue INT); INSERT INTO EsportsEvents (EventID, EventDate, Revenue) VALUES (1, '2022-01-01', 500000), (2, '2022-02-01', 700000), (3, '2022-03-01', 600000), (4, '2022-04-01', 800000);<end_of_turn>\\n<start_of_turn>model\\nSELECT SUM(Revenue) FROM EsportsEvents WHERE EventDate >= DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH);\\n\\nExplanation: This query calculates the total revenue generated from esports events in the last 3 months. It does this by filtering the EsportsEvents table for rows where the EventDate is within the last 3 months and then calculating the sum of the Revenue column for those rows.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nCount the number of threat intelligence alerts raised in the Middle East in 2021\\n\\nContext: CREATE TABLE threat_intelligence (alert_id INT, region VARCHAR(50), date DATE, threat_level VARCHAR(50)); INSERT INTO threat_intelligence (alert_id, region, date, threat_level) VALUES (2, 'Middle East', '2021-02-15', 'Medium');<end_of_turn>\\n<start_of_turn>model\\nSELECT COUNT(*) FROM threat_intelligence WHERE region = 'Middle East' AND YEAR(date) = 2021;\\n\\nExplanation: This query counts the number of threat intelligence alerts raised in the Middle East in 2021 by counting all records from the 'threat_intelligence' table where the 'region' is 'Middle East' and the year of 'date' is 2021.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nFind the number of eco-certified accommodations in each country and the average eco-rating.\\n\\nContext: CREATE TABLE countries (id INT, country VARCHAR(50), num_eco_accommodations INT, total_eco_rating INT); INSERT INTO countries (id, country, num_eco_accommodations, total_eco_rating) VALUES (1, 'Costa Rica', 500, 4500), (2, 'New Zealand', 300, 2700), (3, 'Norway', 450, 3600); CREATE TABLE eco_accommodations (id INT, country VARCHAR(50), eco_rating INT); INSERT INTO eco_accommodations (id, country, eco_rating) VALUES (1, 'Costa Rica', 9), (2, 'Costa Rica', 8), (3, 'New Zealand', 8), (4, 'New Zealand', 9), (5, 'Norway', 7), (6, 'Norway', 8);<end_of_turn>\\n<start_of_turn>model\\nSELECT c.country, AVG(e.eco_rating) AS avg_eco_rating FROM countries c JOIN eco_accommodations e ON c.country = e.country GROUP BY c.country;\\n\\nExplanation: Join the countries and eco_accommodations tables on the country column, calculate the average eco-rating, and group by country.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the total number of public participation events in the justice sector for the last 3 years?\\n\\nContext: CREATE TABLE public_participation_events (id INT, sector VARCHAR(20), year INT); INSERT INTO public_participation_events (id, sector, year) VALUES (1, 'justice', 2018), (2, 'justice', 2019), (3, 'justice', 2020), (4, 'justice', 2018), (5, 'justice', 2019), (6, 'justice', 2020);<end_of_turn>\\n<start_of_turn>model\\nSELECT COUNT(DISTINCT year) FROM public_participation_events WHERE sector = 'justice' AND year BETWEEN (SELECT MAX(year) - 2 FROM public_participation_events) AND MAX(year);\\n\\nExplanation: The SQL query finds the total number of distinct years for public participation events in the justice sector for the last 3 years. It uses a subquery to find the maximum year and then filters the events based on this.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nFind the total waste produced by each chemical in the Chemical_Waste table\\n\\nContext: CREATE TABLE Chemical_Waste (chemical_id INT, chemical_name VARCHAR(50), waste_amount DECIMAL(5,2));<end_of_turn>\\n<start_of_turn>model\\nSELECT chemical_name, SUM(waste_amount) as total_waste FROM Chemical_Waste GROUP BY chemical_name;\\n\\nExplanation: The SQL query calculates the total waste amount for each chemical by grouping the Chemical_Waste table by the chemical_name column and using the SUM aggregate function on the waste_amount column.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the average weight of packages shipped from each warehouse in the state of Washington in the second half of 2022?\\n\\nContext: CREATE TABLE packages (id INT, warehouse_id INT, weight INT, shipped_date DATE); CREATE TABLE warehouses (id INT, city VARCHAR(255), state VARCHAR(255)); INSERT INTO packages (id, warehouse_id, weight, shipped_date) VALUES (1, 1, 50, '2022-07-01'), (2, 1, 30, '2022-08-01'), (3, 2, 40, '2022-12-01'), (4, 2, 20, '2022-11-01'), (5, 3, 10, '2022-10-01'); INSERT INTO warehouses (id, city, state) VALUES (1, 'Seattle', 'Washington'), (2, 'Spokane', 'Washington'), (3, 'Tacoma', 'Washington');<end_of_turn>\\n<start_of_turn>model\\nSELECT warehouses.city, AVG(weight) FROM packages JOIN warehouses ON packages.warehouse_id = warehouses.id WHERE warehouses.state = 'Washington' AND MONTH(packages.shipped_date) > 6 AND YEAR(packages.shipped_date) = 2022 GROUP BY warehouses.city;\\n\\nExplanation: The SQL query joins the 'packages' and 'warehouses' tables on the 'warehouse_id' column. It then filters the results for rows where the 'state' column in the 'warehouses' table is 'Washington' and the month of the 'shipped_date' column in the 'packages' table is greater than 6 and the year is 2022. Next, it groups the results by the 'city' column in the 'warehouses' table. Finally, it calculates the average of the 'weight' column for each group to get the average weight of packages shipped from each warehouse in the state of Washington in the second half of 2022.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the minimum landfill capacity in the state of California in 2020?\\n\\nContext: CREATE TABLE landfill_capacity (state VARCHAR(255), year INT, capacity INT); INSERT INTO landfill_capacity (state, year, capacity) VALUES ('California', 2020, 70000), ('California', 2020, 80000), ('California', 2020, 60000);<end_of_turn>\\n<start_of_turn>model\\nSELECT MIN(capacity) FROM landfill_capacity WHERE state = 'California' AND year = 2020;\\n\\nExplanation: The SQL query calculates the minimum landfill capacity in the state of California in 2020. It uses the MIN function to find the lowest capacity and filters the results for the state of California and the year 2020.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the total revenue generated from sustainable haircare products sold in Canada in 2020?\\n\\nContext: CREATE TABLE HaircareProducts(productId INT, productName VARCHAR(100), isSustainable BOOLEAN, saleYear INT, country VARCHAR(50), price DECIMAL(5,2)); INSERT INTO HaircareProducts(productId, productName, isSustainable, saleYear, country, price) VALUES (1, 'Shampoo Bar', true, 2020, 'Canada', 14.99), (2, 'Conditioner', false, 2019, 'Canada', 12.99);<end_of_turn>\\n<start_of_turn>model\\nSELECT SUM(price) FROM HaircareProducts WHERE isSustainable = true AND saleYear = 2020 AND country = 'Canada';\\n\\nExplanation: This SQL query calculates the total revenue generated from sustainable haircare products sold in Canada in 2020 by filtering the HaircareProducts table based on the isSustainable, saleYear, and country columns and then applying the SUM function to the price column.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nInsert a new rural development project 'AGRI-INNOVATE 3.0' in Rwanda for 2023 with a budget of 5000000.\\n\\nContext: CREATE TABLE rural_development (project VARCHAR(255), country VARCHAR(255), year INT, budget FLOAT);<end_of_turn>\\n<start_of_turn>model\\nINSERT INTO rural_development (project, country, year, budget) VALUES ('AGRI-INNOVATE 3.0', 'Rwanda', 2023, 5000000);\\n\\nExplanation: An insert query is used to add a new record for the 'AGRI-INNOVATE 3.0' project in Rwanda for 2023 with a budget of 5000000.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhich games have more than 20,000 players and were released before 2023, along with the number of potential players in Canada?\\n\\nContext: CREATE TABLE VirtualReality (VRID INT, Game VARCHAR(50), Platform VARCHAR(50), ReleaseDate DATE, Players INT); INSERT INTO VirtualReality (VRID, Game, Platform, ReleaseDate, Players) VALUES (1, 'Echo VR', 'Oculus', '2022-08-01', 50000);<end_of_turn>\\n<start_of_turn>model\\nSELECT Game, Platform, ReleaseDate, (SELECT COUNT(*) FROM Players WHERE Players.Country = 'Canada') AS PotentialPlayers FROM VirtualReality WHERE ReleaseDate < '2023-01-01' AND Players > 20000;\\n\\nExplanation: This query selects the game, platform, and release date of VR games that have more than 20,000 players and were released before 2023, using a subquery to count the number of potential players in Canada.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nHow many community development initiatives were completed in India in 2020?\\n\\nContext: CREATE TABLE community_development (id INT, country VARCHAR(50), year INT, initiative VARCHAR(50), completed BOOLEAN); INSERT INTO community_development (id, country, year, initiative, completed) VALUES (1, 'India', 2020, 'Clean Water', TRUE);<end_of_turn>\\n<start_of_turn>model\\nSELECT COUNT(*) FROM community_development WHERE country = 'India' AND year = 2020 AND completed = TRUE;\\n\\nExplanation: The SQL query counts the number of completed community development initiatives in India in 2020 by selecting all records in the 'community_development' table where the 'country' is 'India', the 'year' is 2020, and the 'completed' status is TRUE, and then counting the number of records.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the total number of containers with hazardous materials that were transported by vessels owned by the ACME Shipping Company in Q3 2020?\\n\\nContext: CREATE TABLE Hazardous_Containers (container_id INTEGER, hazardous_material BOOLEAN, vessel_name TEXT, handling_date DATE); INSERT INTO Hazardous_Containers (container_id, hazardous_material, vessel_name, handling_date) VALUES (1, true, 'ACME Vessel 1', '2020-07-01'), (2, false, 'ACME Vessel 1', '2020-07-02'), (3, true, 'ACME Vessel 2', '2020-08-01'), (4, false, 'ACME Vessel 3', '2020-09-01');<end_of_turn>\\n<start_of_turn>model\\nSELECT COUNT(*) FROM Hazardous_Containers WHERE hazardous_material = true AND vessel_name LIKE 'ACME%' AND handling_date >= '2020-07-01' AND handling_date <= '2020-09-30';\\n\\nExplanation: The query filters for containers owned by ACME Shipping Company that have hazardous materials, and then filters for the Q3 2020 date range. It then counts the total number of containers that meet these criteria.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nInsert a new record into the \"Vessels\" table\\n\\nContext: CREATE TABLE Vessels (Id INT PRIMARY KEY, Name VARCHAR(100), Type VARCHAR(50), Year INT);<end_of_turn>\\n<start_of_turn>model\\nINSERT INTO Vessels (Id, Name, Type, Year) VALUES (123, 'Manta Ray', 'Research Vessel', 2015);\\n\\nExplanation: * A new record is inserted into the \"Vessels\" table with an Id of 123, name \"Manta Ray\", type \"Research Vessel\", and year 2015.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nUpdate the location of farm_id 111\\n\\nContext: CREATE TABLE farms (id INT, name VARCHAR(255), location VARCHAR(255));<end_of_turn>\\n<start_of_turn>model\\nUPDATE farms SET location = 'Denver, CO' WHERE id = 111;\\n\\nExplanation: This query updates the location of the farm with the given id in the farms table.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nIdentify the number of cases and total billing amount for cases with outcomes 'Settled' or 'Dismissed' in the 'North' region.\\n\\nContext: CREATE TABLE Cases (case_id INT, case_outcome VARCHAR(10), region VARCHAR(10), billing_amount DECIMAL(10,2)); INSERT INTO Cases (case_id, case_outcome, region, billing_amount) VALUES (1, 'Settled', 'North', 5000.00), (2, 'Dismissed', 'North', 7000.00), (3, 'Won', 'North', 8000.00);<end_of_turn>\\n<start_of_turn>model\\nSELECT COUNT(*), SUM(billing_amount) FROM Cases WHERE case_outcome IN ('Settled', 'Dismissed') AND region = 'North';\\n\\nExplanation: We are counting the number of cases and summing the billing amount for cases with outcomes 'Settled' or 'Dismissed' in the 'North' region. The IN clause allows us to filter for cases with either of these two outcomes. The COUNT and SUM functions are used to calculate the desired values.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the average listing price for properties in the city of Austin that are either accessible or co-owned?\\n\\nContext: CREATE TABLE properties (id INT, city VARCHAR(20), listing_price FLOAT, accessible BOOLEAN, co_owned BOOLEAN); INSERT INTO properties (id, city, listing_price, accessible, co_owned) VALUES (1, 'Austin', 350000, true, false), (2, 'Austin', 450000, false, true), (3, 'Austin', 550000, false, false);<end_of_turn>\\n<start_of_turn>model\\nSELECT AVG(listing_price) FROM properties WHERE city = 'Austin' AND (accessible = true OR co_owned = true);\\n\\nExplanation: This SQL query calculates the average listing price for properties in the city of Austin that are either accessible or co-owned. It does so by filtering the properties table for records where the city is Austin and the property is either accessible or co-owned, then calculating the average of the listing_price column.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the total budget allocated for infrastructure development in 2019 and 2020?\\n\\nContext: CREATE TABLE InfrastructureBudget (Year INTEGER, Budget INTEGER); INSERT INTO InfrastructureBudget (Year, Budget) VALUES (2019, 12000000), (2020, 15000000);<end_of_turn>\\n<start_of_turn>model\\nSELECT SUM(Budget) FROM InfrastructureBudget WHERE Year IN (2019, 2020);\\n\\nExplanation: This query calculates the total budget allocated for infrastructure development in 2019 and 2020 by summing the budget values where the year is either 2019 or 2020.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the percentage of visitors to New York City from each country?\\n\\nContext: CREATE TABLE if not exists VisitorsByCity (City VARCHAR(50), Country VARCHAR(50), Visitors INT); INSERT INTO VisitorsByCity (City, Country, Visitors) VALUES ('New York City', 'Canada', 12000), ('New York City', 'Mexico', 15000), ('New York City', 'Brazil', 10000), ('New York City', 'United Kingdom', 18000), ('New York City', 'Germany', 14000);<end_of_turn>\\n<start_of_turn>model\\nSELECT a.Country, (a.Visitors::FLOAT \/ SUM(a.Visitors) OVER (PARTITION BY a.City) * 100) AS Percentage FROM VisitorsByCity a WHERE a.City = 'New York City';\\n\\nExplanation: This query calculates the percentage of visitors to New York City from each country by dividing the number of visitors for each country by the total number of visitors to New York City, multiplying the result by 100, and using the window function SUM OVER to partition the data by city.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the total amount of funding received by each project in Haiti in 2019?\\n\\nContext: CREATE TABLE projects (id INT, name VARCHAR(255), location VARCHAR(255)); CREATE TABLE funding (id INT, project_id INT, amount DECIMAL(10, 2), funding_date DATE);<end_of_turn>\\n<start_of_turn>model\\nSELECT projects.name, SUM(funding.amount) FROM funding JOIN projects ON funding.project_id = projects.id WHERE projects.location = 'Haiti' AND funding.funding_date BETWEEN '2019-01-01' AND '2019-12-31' GROUP BY projects.id;\\n\\nExplanation: The SQL query joins the 'projects' and 'funding' tables using the project_id foreign key and filters the 'funding' table for records from the year 2019. It then groups the results by project_id, which corresponds to the project name in the 'projects' table, and calculates the total amount of funding for each project in Haiti.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhich cities in the 'infrastructure' department budget table have a budget over 500000?\\n\\nContext: CREATE TABLE infrastructure_dept_budget (city VARCHAR(50), budget INT); INSERT INTO infrastructure_dept_budget (city, budget) VALUES ('CityA', 600000), ('CityB', 400000), ('CityC', 700000);<end_of_turn>\\n<start_of_turn>model\\nSELECT city FROM infrastructure_dept_budget WHERE budget > 500000;\\n\\nExplanation: The SQL query selects the 'city' column from the 'infrastructure_dept_budget' table where the 'budget' is greater than 500000.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nHow many crops have been grown in the 'indigenous' farming systems in total?\\n\\nContext: CREATE TABLE crops (id INT, name VARCHAR(20), farming_system VARCHAR(20));<end_of_turn>\\n<start_of_turn>model\\nSELECT COUNT(*) FROM crops WHERE farming_system = 'indigenous';\\n\\nExplanation: This query counts the number of crops grown in the 'indigenous' farming systems in total from the 'crops' table. It filters the results based on the 'farming_system' column.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhich farmers are younger than 40 and own plots smaller than 0.5 acre?\\n\\nContext: CREATE TABLE Farmers (id INT PRIMARY KEY, name VARCHAR(100), age INT, location VARCHAR(100)); INSERT INTO Farmers (id, name, age, location) VALUES (1, 'Olga Ivanova', 35, 'Russia'); INSERT INTO Farmers (id, name, age, location) VALUES (2, 'Ahmed Hussein', 42, 'Egypt'); CREATE TABLE Plots (id INT PRIMARY KEY, farmer_id INT, size FLOAT, crop VARCHAR(50)); INSERT INTO Plots (id, farmer_id, size, crop) VALUES (1, 1, 0.4, 'Potatoes'); INSERT INTO Plots (id, farmer_id, size, crop) VALUES (2, 2, 0.6, 'Corn'); CREATE TABLE Currencies (id INT PRIMARY KEY, country VARCHAR(50), currency VARCHAR(50)); INSERT INTO Currencies (id, country, currency) VALUES (1, 'Russia', 'Ruble'); INSERT INTO Currencies (id, country, currency) VALUES (2, 'Egypt', 'Pound');<end_of_turn>\\n<start_of_turn>model\\nSELECT f.name FROM Farmers f INNER JOIN Plots p ON f.id = p.farmer_id INNER JOIN Currencies c ON f.location = c.country WHERE f.age < 40 AND p.size < 0.5;\\n\\nExplanation: Join Farmers, Plots, and Currencies tables based on the farmer's location and country. Filter records where the age is younger than 40 and plot size is smaller than 0.5 acre and return the farmer's name.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat was the average waste generation in kg per capita for each city in 2021?\\n\\nContext: CREATE TABLE city_population(city VARCHAR(50), year INT, population INT); INSERT INTO city_population(city, year, population) VALUES('CityA', 2021, 100000), ('CityA', 2020, 95000), ('CityB', 2021, 120000), ('CityB', 2020, 115000);<end_of_turn>\\n<start_of_turn>model\\nSELECT w.city, AVG(w.amount\/c.population) FROM waste_generation w JOIN city_population c ON w.city = c.city WHERE w.year = 2021 GROUP BY w.city;\\n\\nExplanation: This query joins the waste_generation table with the city_population table based on city name and filters for the year 2021. It then calculates the average waste generation per capita for each city and groups the result by city.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nDisplay all work types and their average permit cost\\n\\nContext: CREATE TABLE Work_Type (id INT, type VARCHAR(20)); CREATE TABLE Permit (id INT, work_type_id INT, cost INT);<end_of_turn>\\n<start_of_turn>model\\nSELECT Work_Type.type, AVG(Permit.cost) AS avg_cost FROM Work_Type INNER JOIN Permit ON Work_Type.id = Permit.work_type_id GROUP BY Work_Type.type;\\n\\nExplanation: This query displays all work types and their average permit cost. It uses an INNER JOIN to combine the Work_Type and Permit tables, then groups the results by work type and calculates the average of the cost column for each group.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nList the players who have scored the most 3-point field goals in the 2021 season, along with their total 3-point field goals scored.\\n\\nContext: CREATE TABLE nba_players (player_id INT, player_name VARCHAR(255)); INSERT INTO nba_players (player_id, player_name) VALUES (1, 'Player1'), (2, 'Player2'), (3, 'Player3'), (4, 'Player4'); CREATE TABLE nba_3_point_field_goals (game_id INT, player_id INT, three_point_field_goals INT);<end_of_turn>\\n<start_of_turn>model\\nSELECT player_name, SUM(three_point_field_goals) AS total_three_point_field_goals FROM nba_3_point_field_goals JOIN nba_players ON nba_3_point_field_goals.player_id = nba_players.player_id WHERE game_id >= (SELECT MIN(game_id) FROM nba_games WHERE game_date >= '2021-01-01' AND game_date < '2022-01-01') GROUP BY player_name ORDER BY total_three_point_field_goals DESC LIMIT 3;\\n\\nExplanation: This query uses the JOIN operator to combine the nba_3_point_field_goals and nba_players tables. It then filters the data to only include games played in the 2021 season. The query then uses the GROUP BY operator to group the results by player_name and uses the SUM function to sum the three_point_field_goals column. Finally, the query orders the results by the total_three_point_field_goals column in descending order and limits the output to the top 3 rows. The result is a list of players who have scored the most 3-point field goals in the 2021 season, along with their total 3-point field goals scored.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nInsert a new record into the \"hotels\" table for 'Hotel Ritz' in 'Spain' with 5 stars\\n\\nContext: CREATE TABLE hotels (id INT PRIMARY KEY, name TEXT, country TEXT, stars INT);<end_of_turn>\\n<start_of_turn>model\\nINSERT INTO hotels (id, name, country, stars) VALUES (3, 'Hotel Ritz', 'Spain', 5);\\n\\nExplanation: This query inserts a new record into the \"hotels\" table for 'Hotel Ritz' in 'Spain' with 5 stars. It provides values for all columns: id, name, country, and stars.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat was the total number of criminal and civil cases heard in each court last year?\\n\\nContext: CREATE TABLE court_cases_2 (court_type VARCHAR(20), year INT, case_type VARCHAR(10), num_cases INT); INSERT INTO court_cases_2 (court_type, year, case_type, num_cases) VALUES ('Supreme Court', 2021, 'Criminal', 800), ('Supreme Court', 2021, 'Civil', 400), ('District Court', 2021, 'Criminal', 2500), ('District Court', 2021, 'Civil', 1500);<end_of_turn>\\n<start_of_turn>model\\nSELECT court_type, SUM(num_cases) as total_cases FROM court_cases_2 WHERE year = 2021 GROUP BY court_type;\\n\\nExplanation: This query sums the number of criminal and civil cases for each court type in the year 2021 and groups them by court_type.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the total amount of funding that has been allocated to community development initiatives in the 'rural_development' database, and how many initiatives have been funded?\\n\\nContext: CREATE TABLE community_development_initiatives (initiative_id INT, initiative_name VARCHAR(50), budget INT, region VARCHAR(50)); INSERT INTO community_development_initiatives (initiative_id, initiative_name, budget, region) VALUES (1, 'Youth Program', 20000, 'Midwest'), (2, 'Senior Center', 30000, 'Southeast');<end_of_turn>\\n<start_of_turn>model\\nSELECT SUM(budget), COUNT(initiative_id) FROM community_development_initiatives;\\n\\nExplanation: This SQL query calculates the total amount of funding allocated to community development initiatives by using the SUM function on the 'budget' column. The number of initiatives that have been funded is calculated by using the COUNT function on the 'initiative_id' column.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the average number of endangered languages in Southeast Asian countries?\\n\\nContext: CREATE TABLE Countries (id INT, name VARCHAR(50), region VARCHAR(50)); INSERT INTO Countries (id, name, region) VALUES (1, 'Indonesia', 'Southeast Asia'), (2, 'Philippines', 'Southeast Asia'), (3, 'Malaysia', 'Southeast Asia'), (4, 'Myanmar', 'Southeast Asia'), (5, 'Thailand', 'Southeast Asia'); CREATE TABLE EndangeredLanguages (id INT, country_id INT, name VARCHAR(50)); INSERT INTO EndangeredLanguages (id, country_id, name) VALUES (1, 1, 'Sundanese'), (2, 1, 'Javanese'), (3, 2, 'Tagalog'), (4, 2, 'Cebuano'), (5, 3, 'Malay'), (6, 3, 'Iban'), (7, 4, 'Burmese'), (8, 4, 'Shan'), (9, 5, 'Thai'), (10, 5, 'Mon');<end_of_turn>\\n<start_of_turn>model\\nSELECT AVG(e.count) as avg_endangered_languages FROM (SELECT COUNT(*) as count FROM EndangeredLanguages WHERE country_id = Countries.id GROUP BY country_id) e JOIN Countries ON e.country_id = Countries.id WHERE Countries.region = 'Southeast Asia';\\n\\nExplanation: This SQL query creates a subquery that counts the number of endangered languages for each country in Southeast Asia. It then joins the subquery with the Countries table on the country_id column. The query calculates the average number of endangered languages for Southeast Asian countries, and returns the result.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nDisplay the names of companies that have received funding from both venture capital and angel investors\\n\\nContext: CREATE TABLE funds (company_id INT, funding_amount DECIMAL(10, 2), funding_type VARCHAR(20), investor_type VARCHAR(20)); INSERT INTO funds VALUES (1, 500000, 10000, 'Venture Capital'); INSERT INTO funds VALUES (2, 300000, 20000, 'Angel Investor');<end_of_turn>\\n<start_of_turn>model\\nSELECT company_name FROM companies INNER JOIN (SELECT company_id FROM funds WHERE investor_type IN ('Venture Capital', 'Angel Investor') GROUP BY company_id HAVING COUNT(DISTINCT investor_type) = 2) as subquery ON companies.company_id = subquery.company_id;\\n\\nExplanation: This SQL query first filters for companies that have received funding from either venture capital or angel investors, then performs a subquery to find the company_ids that have both types of investors. It then joins the subquery with the 'companies' table and selects the company_names.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the total revenue generated from events in each continent?\\n\\nContext: CREATE TABLE events (id INT, continent VARCHAR(20), price DECIMAL(5,2)); INSERT INTO events (id, continent, price) VALUES (1, 'Asia', 20.99), (2, 'Australia', 18.50), (3, 'Africa', 15.50), (4, 'Europe', 30.99);<end_of_turn>\\n<start_of_turn>model\\nSELECT continent, SUM(price) AS total_revenue FROM events GROUP BY continent;\\n\\nExplanation: The SQL query groups the events table by continent and calculates the total revenue for each continent.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the average length of a tunnel in the 'tunnels' table?\\n\\nContext: CREATE TABLE tunnels (tunnel_id INT, tunnel_name VARCHAR(50), location VARCHAR(50), length DECIMAL(10,2));<end_of_turn>\\n<start_of_turn>model\\nSELECT AVG(length) FROM tunnels;\\n\\nExplanation: This query calculates the average length of a tunnel in the 'tunnels' table. It does this by using the AVG() function to find the mean value in the 'length' column.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the average account balance for customers with a primary residence in California?\\n\\nContext: CREATE TABLE customers (customer_id INT, name VARCHAR(50), address VARCHAR(100), account_balance DECIMAL(10, 2)); INSERT INTO customers (customer_id, name, address, account_balance) VALUES (1, 'John Doe', '123 Main St, Los Angeles, CA', 15000.00), (2, 'Jane Smith', '456 Elm St, San Francisco, CA', 20000.00), (3, 'Bob Johnson', '789 Oak St, New York, NY', 10000.00);<end_of_turn>\\n<start_of_turn>model\\nSELECT AVG(account_balance) FROM customers WHERE address LIKE '%CA%';\\n\\nExplanation: The SQL query filters for customers with an address containing 'CA' (indicating a primary residence in California) and calculates the average account balance for those customers.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nNational security budget changes from 2018 to 2020\\n\\nContext: CREATE TABLE national_budget (year INT, budget FLOAT);<end_of_turn>\\n<start_of_turn>model\\nSELECT year, budget - LAG(budget) OVER (ORDER BY year) AS budget_change FROM national_budget WHERE year BETWEEN 2018 AND 2020;\\n\\nExplanation: This query calculates the budget changes for national security from 2018 to 2020 by using the LAG function to subtract the previous year's budget from the current year's budget for the national_budget table.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the maximum funding received by a biotech startup in Canada?\\n\\nContext: CREATE SCHEMA if not exists biotech;CREATE TABLE if not exists biotech.startups (id INT PRIMARY KEY, name VARCHAR(100), country VARCHAR(50), funding DECIMAL(10, 2)); INSERT INTO biotech.startups (id, name, country, funding) VALUES (1, 'StartupA', 'USA', 1500000.00), (2, 'StartupB', 'USA', 2000000.00), (3, 'StartupC', 'Canada', 1200000.00);<end_of_turn>\\n<start_of_turn>model\\nSELECT MAX(funding) FROM biotech.startups WHERE country = 'Canada';\\n\\nExplanation: This query calculates the maximum funding received by a biotech startup located in Canada.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat are the names of hotels in Mexico that have not yet provided virtual tour access?\\n\\nContext: CREATE TABLE Hotels (HotelID int, HotelName varchar(50), VirtualTourURL varchar(100)); INSERT INTO Hotels (HotelID, HotelName, VirtualTourURL) VALUES (1, 'Hotel Playa', 'https:\/\/www.hotelplayavirtualtour.com'); INSERT INTO Hotels (HotelID, HotelName, VirtualTourURL) VALUES (2, 'Hotel Cancun', NULL);<end_of_turn>\\n<start_of_turn>model\\nSELECT HotelName FROM Hotels WHERE VirtualTourURL IS NULL AND Country = 'Mexico'\\n\\nExplanation: This SQL query retrieves the names of hotels in Mexico that have not yet provided virtual tour access by selecting the HotelName column from the Hotels table, filtering the rows with VirtualTourURL being NULL and Country equal to 'Mexico'.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nHow many ethical fashion brands are located in each country?\\n\\nContext: CREATE TABLE Brands (BrandID INT, Country VARCHAR(50)); INSERT INTO Brands (BrandID, Country) VALUES (1, 'USA'), (2, 'India'), (3, 'Bangladesh'), (4, 'USA'), (5, 'France');<end_of_turn>\\n<start_of_turn>model\\nSELECT Country, COUNT(*) AS NumBrands FROM Brands GROUP BY Country;\\n\\nExplanation: The SQL query calculates the number of ethical fashion brands located in each country by grouping the Brands table by Country and applying the COUNT function.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nAlter the table 'waste_generation' and add a column 'source'\\n\\nContext: CREATE TABLE waste_generation ( id INT PRIMARY KEY, region VARCHAR(50), year INT, metric DECIMAL(5,2));<end_of_turn>\\n<start_of_turn>model\\nALTER TABLE waste_generation ADD source VARCHAR(50);\\n\\nExplanation: This SQL statement alters the 'waste_generation' table and adds a new column named 'source' of data type VARCHAR(50). It does this using the ALTER TABLE statement and the ADD clause.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nList all financial institutions that offer both Shariah-compliant and conventional loans.\\n\\nContext: CREATE TABLE financial_institutions (id INT, name VARCHAR(255), type VARCHAR(255), location VARCHAR(255)); INSERT INTO financial_institutions (id, name, type, location) VALUES (1, 'ABC Bank', 'Islamic', 'India'); INSERT INTO financial_institutions (id, name, type, location) VALUES (2, 'Islamic Bank', 'Conventional', 'UAE'); INSERT INTO financial_institutions (id, name, type, location) VALUES (3, 'XYZ Bank', 'Islamic', 'Saudi Arabia'); CREATE TABLE loans (id INT, institution_id INT, type VARCHAR(255), amount DECIMAL(10,2), date DATE); INSERT INTO loans (id, institution_id, type, amount, date) VALUES (1, 1, 'Islamic', 5000.00, '2022-01-01'); INSERT INTO loans (id, institution_id, type, amount, date) VALUES (2, 1, 'Conventional', 6000.00, '2022-01-02'); INSERT INTO loans (id, institution_id, type, amount, date) VALUES (3, 2, 'Conventional', 7000.00, '2022-01-03'); INSERT INTO loans (id, institution_id, type, amount, date) VALUES (4, 3, 'Islamic', 8000.00, '2022-01-04');<end_of_turn>\\n<start_of_turn>model\\nSELECT name FROM financial_institutions WHERE id IN (SELECT institution_id FROM loans WHERE type = 'Islamic') AND id IN (SELECT institution_id FROM loans WHERE type = 'Conventional');\\n\\nExplanation: This query returns the name column from the financial_institutions table where the id exists in the list of institution_id's from the loans table where the type is either 'Islamic' or 'Conventional'.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nList the number of IoT sensors in coffee plantations and tea gardens in Japan.\\n\\nContext: CREATE TABLE IoT_Sensors (farm_type VARCHAR(30), country VARCHAR(20), num_sensors INTEGER); INSERT INTO IoT_Sensors (farm_type, country, num_sensors) VALUES ('Coffee Plantation', 'Japan', 200), ('Coffee Plantation', 'Japan', 220), ('Tea Garden', 'Japan', 250), ('Tea Garden', 'Japan', 280), ('Tea Garden', 'Japan', 300);<end_of_turn>\\n<start_of_turn>model\\nSELECT farm_type, SUM(num_sensors) FROM IoT_Sensors WHERE country = 'Japan' AND farm_type IN ('Coffee Plantation', 'Tea Garden') GROUP BY farm_type;\\n\\nExplanation: This SQL query lists the number of IoT sensors in coffee plantations and tea gardens in Japan using SUM function on the 'num_sensors' column and filtering the rows with WHERE operator for the given country and farm types. The GROUP BY operator is used to group the result by farm types.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nHow many security incidents were reported in each region in the past year?\\n\\nContext: CREATE TABLE security_incidents (id INT, region VARCHAR, date DATE); INSERT INTO security_incidents (id, region, date) VALUES (1, 'North America', '2021-01-01'), (2, 'Europe', '2021-02-01'), (3, 'Asia', '2021-03-01'), (4, 'South America', '2021-04-01'), (5, 'Africa', '2021-05-01');<end_of_turn>\\n<start_of_turn>model\\nSELECT region, COUNT(*) FROM security_incidents WHERE date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR) GROUP BY region;\\n\\nExplanation: The SQL query selects the region column and the count of all records from the security_incidents table where the date is within the past year. The query then groups the results by region, which will return the number of security incidents reported in each region in the past year.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the average number of crimes committed in each city?\\n\\nContext: CREATE TABLE City (id INT, name VARCHAR(50), population INT, founded DATE); CREATE TABLE Crime (id INT, city_id INT, type VARCHAR(50), year INT, count INT); INSERT INTO City (id, name, population, founded) VALUES (1, 'New York', 8500000, '1624-09-17'); INSERT INTO City (id, name, population, founded) VALUES (2, 'Los Angeles', 4000000, '1781-09-04'); INSERT INTO Crime (id, city_id, type, year, count) VALUES (100, 1, 'Murder', 2019, 300); INSERT INTO Crime (id, city_id, type, year, count) VALUES (101, 1, 'Robbery', 2019, 2000);<end_of_turn>\\n<start_of_turn>model\\nSELECT City.name, AVG(Crime.count) AS avg_crime_count FROM City INNER JOIN Crime ON City.id = Crime.city_id GROUP BY City.name;\\n\\nExplanation: This SQL query joins the City and Crime tables using the id column in the City table and the city_id column in the Crime table. The resulting table is then grouped by the name column from the City table, and the average of the count column from the Crime table is calculated for each group. The query also selects the name column from the City table and the average of the count column from the Crime table (renamed to avg_crime_count).<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nUpdate the last_updated values in the soil_conditions table by adding 1 day for all records\\n\\nContext: CREATE TABLE soil_conditions (location VARCHAR(255), soil_moisture INT, last_updated DATETIME);<end_of_turn>\\n<start_of_turn>model\\nUPDATE soil_conditions SET last_updated = last_updated + INTERVAL '1 day';\\n\\nExplanation: This query updates the last_updated values in the soil_conditions table by adding 1 day for all records.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the total number of military vehicles manufactured in Germany and Japan?\\n\\nContext: CREATE TABLE MilitaryVehicles(id INT PRIMARY KEY, country VARCHAR(50), quantity INT);INSERT INTO MilitaryVehicles(id, country, quantity) VALUES (1, 'Germany', 300), (2, 'Japan', 250);<end_of_turn>\\n<start_of_turn>model\\nSELECT SUM(quantity) FROM MilitaryVehicles WHERE country IN ('Germany', 'Japan');\\n\\nExplanation: This query calculates the sum of the quantity column in the MilitaryVehicles table where the country is either Germany or Japan.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the total CO2 emissions by region in the 'suppliers' table?\\n\\nContext: CREATE TABLE suppliers (id INT, region VARCHAR(20), co2_emissions INT); INSERT INTO suppliers (id, region, co2_emissions) VALUES (1, 'North', 500), (2, 'South', 800), (3, 'East', 300);<end_of_turn>\\n<start_of_turn>model\\nSELECT region, SUM(co2_emissions) FROM suppliers GROUP BY region;\\n\\nExplanation: The SQL query calculates the total CO2 emissions by region in the 'suppliers' table by selecting the region and co2_emissions columns from the 'suppliers' table, grouping the results by the region column, and then summing the values using the SUM() function.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nFind stores with sales below the overall average for stores in the 'East' and 'West' regions.\\n\\nContext: CREATE TABLE REGIONAL_STORES (store_id INT, region VARCHAR(20), sales FLOAT); INSERT INTO REGIONAL_STORES VALUES (1, 'East', 5000), (2, 'East', 7000), (3, 'East', 8000), (4, 'West', 6000), (5, 'West', 9000), (6, 'West', 4000);<end_of_turn>\\n<start_of_turn>model\\nSELECT store_id FROM REGIONAL_STORES WHERE region IN ('East', 'West') AND sales < (SELECT AVG(sales) FROM REGIONAL_STORES);\\n\\nExplanation: This query retrieves store IDs for stores in the 'East' and 'West' regions with sales below the overall average sales.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nIdentify the top 3 most common types of public services requested by citizens in California in 2021.\\n\\nContext: CREATE TABLE PublicServiceRequests (state VARCHAR(20), year INT, service_type VARCHAR(30), requests INT); INSERT INTO PublicServiceRequests (state, year, service_type, requests) VALUES ('California', 2021, 'Parks and Recreation', 1200), ('California', 2021, 'Waste Management', 2000), ('California', 2021, 'Transportation', 1800), ('California', 2021, 'Education', 2500), ('California', 2021, 'Healthcare', 3000);<end_of_turn>\\n<start_of_turn>model\\nSELECT service_type, requests FROM (SELECT service_type, requests, ROW_NUMBER() OVER (ORDER BY requests DESC) AS rank FROM PublicServiceRequests WHERE state = 'California' AND year = 2021) AS subquery WHERE rank <= 3;\\n\\nExplanation: This query identifies the top 3 most common types of public services requested by citizens in California for the year 2021 by using a subquery to order the service_type and requests columns in descending order, assigning a row number to each row based on the order of requests, and selecting only the rows with a row number less than or equal to 3.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the total budget allocation for the education sector in the state of New York and California?\\n\\nContext: CREATE TABLE state_budget (state VARCHAR(20), sector VARCHAR(20), allocation INT); INSERT INTO state_budget (state, sector, allocation) VALUES ('New York', 'Education', 12000), ('New York', 'Healthcare', 15000), ('California', 'Education', 10000), ('California', 'Healthcare', 18000);<end_of_turn>\\n<start_of_turn>model\\nSELECT SUM(allocation) FROM state_budget WHERE state IN ('New York', 'California') AND sector = 'Education';\\n\\nExplanation: This query calculates the total budget allocation for the education sector in the states of New York and California.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the average price of lip balms with organic ingredients?\\n\\nContext: CREATE TABLE Cosmetics (product_id INT, name VARCHAR(50), price DECIMAL(5,2), has_organic_ingredients BOOLEAN, type VARCHAR(50));<end_of_turn>\\n<start_of_turn>model\\nSELECT AVG(price) FROM Cosmetics WHERE type = 'Lip Balm' AND has_organic_ingredients = TRUE;\\n\\nExplanation: We select the average price of lip balms (type = 'Lip Balm') with organic ingredients (has_organic_ingredients = TRUE).<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the total amount of copper produced in 'Mexico' in 2019?'\\n\\nContext: CREATE TABLE mines (id INT, name TEXT, location TEXT, production_volume INT, product TEXT, year INT); INSERT INTO mines (id, name, location, production_volume, product, year) VALUES (1, 'La Coppera Mine', 'Mexico', 10000, 'Copper', 2019); INSERT INTO mines (id, name, location, production_volume, product, year) VALUES (2, 'El Cobre Mine', 'Mexico', 12000, 'Copper', 2019);<end_of_turn>\\n<start_of_turn>model\\nSELECT SUM(production_volume) FROM mines WHERE location = 'Mexico' AND product = 'Copper' AND year = 2019;\\n\\nExplanation: This query calculates the total amount of copper produced in Mexico in 2019 by filtering the mines table based on location, product, and year and then summing the production volume.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nHow many volunteers signed up for each program in Q1 of 2021?\\n\\nContext: CREATE TABLE volunteers (id INT, volunteer_name TEXT, program TEXT, signup_date DATE); INSERT INTO volunteers (id, volunteer_name, program, signup_date) VALUES (1, 'Alice', 'Feeding the Hungry', '2021-01-05'); INSERT INTO volunteers (id, volunteer_name, program, signup_date) VALUES (2, 'Bob', 'Tree Planting', '2021-03-10');<end_of_turn>\\n<start_of_turn>model\\nSELECT program, COUNT(volunteer_name) as num_volunteers FROM volunteers WHERE signup_date >= '2021-01-01' AND signup_date < '2021-04-01' GROUP BY program;\\n\\nExplanation: The SQL query calculates the number of volunteers for each program in Q1 of 2021 by using the COUNT() function to count the number of unique volunteer_name values in the volunteers table, grouped by the program column. The WHERE clause filters the records to only include signups made in Q1 of 2021.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the average salary for workers in each department at factory 2?\\n\\nContext: CREATE TABLE factories (factory_id INT, department VARCHAR(20));CREATE TABLE workers (worker_id INT, factory_id INT, salary DECIMAL(5,2), department VARCHAR(20)); INSERT INTO factories (factory_id, department) VALUES (1, 'textile'), (2, 'metal'), (3, 'electronics'); INSERT INTO workers (worker_id, factory_id, salary, department) VALUES (1, 1, 35000, 'textile'), (2, 1, 36000, 'textile'), (3, 2, 45000, 'metal'), (4, 2, 46000, 'metal'), (5, 3, 55000, 'electronics');<end_of_turn>\\n<start_of_turn>model\\nSELECT f.department, AVG(w.salary) FROM workers w JOIN factories f ON w.factory_id = f.factory_id WHERE f.factory_id = 2 GROUP BY f.department;\\n\\nExplanation: The SQL query joins the 'workers' and 'factories' tables on the 'factory_id' column. It then filters for rows where the factory_id is 2. It groups the rows by department and calculates the average salary for those rows.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the maximum number of satellites launched by a country in a year?\\n\\nContext:  CREATE TABLE country_satellite_launches (country_id INT, launch_year INT, number_of_satellites INT); CREATE TABLE countries (id INT, name VARCHAR(50));<end_of_turn>\\n<start_of_turn>model\\nSELECT c.name, MAX(cs.number_of_satellites) FROM countries c JOIN country_satellite_launches cs ON c.id = cs.country_id GROUP BY c.name;\\n\\nExplanation: This query lists the maximum number of satellites launched by a country in a year by joining the countries and country_satellite_launches tables on the country_id column. It then groups the results by country name and calculates the maximum number of satellites launched for each country.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the total budget for rural infrastructure projects in Nigeria in 2020?\\n\\nContext: CREATE TABLE RuralInfrastructure (id INT, country VARCHAR(50), project VARCHAR(50), budget FLOAT, year INT); INSERT INTO RuralInfrastructure (id, country, project, budget, year) VALUES (1, 'Nigeria', 'Road Construction', 800000, 2020), (2, 'Nigeria', 'Bridge Building', 500000, 2019), (3, 'Kenya', 'Electricity Grid Expansion', 1000000, 2020);<end_of_turn>\\n<start_of_turn>model\\nSELECT SUM(budget) FROM RuralInfrastructure WHERE country = 'Nigeria' AND year = 2020;\\n\\nExplanation: This SQL query calculates the total budget for rural infrastructure projects in Nigeria in 2020 by summing the budget column where country is 'Nigeria' and year is 2020.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nDelete a sustainable material from the \"materials\" table\\n\\nContext: CREATE TABLE materials (material_id INT, name VARCHAR(255), source VARCHAR(255), recyclable BOOLEAN);<end_of_turn>\\n<start_of_turn>model\\nDELETE FROM materials WHERE material_id = 3001;\\n\\nExplanation: This query deletes the sustainable material with material_id 3001 from the \"materials\" table.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the maximum size of a protected habitat for each animal type?\\n\\nContext: CREATE TABLE Protected_Habitats (id INT, animal_type VARCHAR(50), size INT);<end_of_turn>\\n<start_of_turn>model\\nSELECT animal_type, MAX(size) FROM Protected_Habitats GROUP BY animal_type;\\n\\nExplanation: This query calculates the maximum size of a protected habitat for each animal type. It groups the records by animal_type and then computes the maximum size for each group.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nHow many unique consumers have purchased sustainable materials, by region?\\n\\nContext: CREATE SCHEMA ethical_fashion; CREATE TABLE purchases (purchase_id INT, consumer_id INT, material VARCHAR(255), region VARCHAR(255)); INSERT INTO purchases VALUES (1,1,'cotton','North'),(2,2,'polyester','South'),(3,3,'cotton','East'),(4,4,'wool','West'),(5,5,'cotton','North'),(6,6,'polyester','South');<end_of_turn>\\n<start_of_turn>model\\nSELECT region, COUNT(DISTINCT consumer_id) FROM ethical_fashion.purchases WHERE material IN ('cotton', 'polyester', 'wool') GROUP BY region;\\n\\nExplanation: The SQL query calculates the number of unique consumers who have purchased sustainable materials (cotton, polyester, and wool) in each region. It uses the COUNT function with DISTINCT clause to count the number of unique consumers and the GROUP BY clause to group the results by region.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nHow many 'productA' items were sold in 'regionB'?\\n\\nContext: CREATE TABLE IF NOT EXISTS sales (id INT, product VARCHAR(50), region VARCHAR(50), quantity INT); INSERT INTO sales (id, product, region, quantity) VALUES (1, 'productA', 'regionB', 100), (2, 'productB', 'regionC', 50);<end_of_turn>\\n<start_of_turn>model\\nSELECT SUM(quantity) FROM sales WHERE product = 'productA' AND region = 'regionB';\\n\\nExplanation: This SQL query calculates the total quantity of 'productA' sold in 'regionB' by using the SUM function on the 'quantity' column, and filtering for rows where the 'product' column is equal to 'productA' and the 'region' column is equal to 'regionB'.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the earliest start date for a patient's therapy in Australia?\\n\\nContext: CREATE TABLE therapy (id INT, patient_id INT, start_date DATE); INSERT INTO therapy (id, patient_id, start_date) VALUES (1, 1, '2022-01-01'), (2, 2, '2021-12-31');<end_of_turn>\\n<start_of_turn>model\\nSELECT MIN(start_date) FROM therapy WHERE patient_id IN (SELECT id FROM patients WHERE country = 'Australia');\\n\\nExplanation: This query finds the earliest start date for a patient's therapy in Australia. It first selects the ids of patients in Australia, then filters the therapy table for patients whose id is in the set of Australian patient ids. Finally, it selects the minimum start date from the filtered therapy table.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the most popular appetizer in the 'Organic' category?\\n\\nContext: CREATE TABLE appetizers (appetizer_name TEXT, category TEXT, quantity_sold INTEGER); INSERT INTO appetizers (appetizer_name, category, quantity_sold) VALUES ('Bruschetta', 'Organic', 25); INSERT INTO appetizers (appetizer_name, category, quantity_sold) VALUES ('Hummus Plate', 'Organic', 30);<end_of_turn>\\n<start_of_turn>model\\nSELECT appetizer_name, MAX(quantity_sold) FROM appetizers WHERE category = 'Organic' GROUP BY appetizer_name ORDER BY quantity_sold DESC LIMIT 1;\\n\\nExplanation: This query selects the appetizer_name and the maximum quantity_sold for items in the 'Organic' category, then orders the results in descending order by quantity_sold and limits the result to 1 row.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the difference in median length between male and female whale species?\\n\\nContext: CREATE TABLE whale_species (id INT, species VARCHAR(255), gender VARCHAR(255), median_length FLOAT); INSERT INTO whale_species (id, species, gender, median_length) VALUES (1, 'Blue Whale', 'Male', 25), (2, 'Blue Whale', 'Female', 27);<end_of_turn>\\n<start_of_turn>model\\nSELECT s.species, s.median_length - f.median_length FROM whale_species s JOIN whale_species f ON s.species = f.species WHERE s.gender = 'Male' AND f.gender = 'Female'\\n\\nExplanation: This query calculates the difference in median_length between male and female whale species using subtraction.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nUpdate the country to \"Mexico\" for records in the \"warehouses\" table where the country is \"USA\" and the capacity is greater than 4000\\n\\nContext: CREATE TABLE warehouses (id INT, warehouse_name VARCHAR(50), country VARCHAR(50), capacity INT, current_inventory INT); INSERT INTO warehouses (id, warehouse_name, country, capacity, current_inventory) VALUES (1, 'Houston Warehouse', 'USA', 4500, 3000); INSERT INTO warehouses (id, warehouse_name, country, capacity, current_inventory) VALUES (2, 'Los Angeles Warehouse', 'USA', 5000, 3500); INSERT INTO warehouses (id, warehouse_name, country, capacity, current_inventory) VALUES (3, 'Chicago Warehouse', 'USA', 3500, 2500);<end_of_turn>\\n<start_of_turn>model\\nUPDATE warehouses SET country = 'Mexico' WHERE country = 'USA' AND capacity > 4000;\\n\\nExplanation: This query updates the country to \"Mexico\" for records in the \"warehouses\" table where the country is \"USA\" and the capacity is greater than 4000.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nHow many marine research stations are in the Pacific Ocean?\\n\\nContext: CREATE TABLE research_stations (station_name VARCHAR(50), ocean VARCHAR(20)); INSERT INTO research_stations (station_name, ocean) VALUES ('Hawaii Ocean Observing System', 'Pacific'), ('Monterey Bay Aquarium Research Institute', 'Pacific');<end_of_turn>\\n<start_of_turn>model\\nSELECT COUNT(*) FROM research_stations WHERE ocean = 'Pacific';\\n\\nExplanation: Count the number of records in the 'research_stations' table where the 'ocean' column value is 'Pacific'.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the average age of players who play 'Racing' games?\\n\\nContext: CREATE TABLE Players (player_id INT, name VARCHAR(255), age INT, game_genre VARCHAR(255)); INSERT INTO Players (player_id, name, age, game_genre) VALUES (1, 'John', 27, 'FPS'), (2, 'Sarah', 30, 'RPG'), (3, 'Alex', 22, 'FPS'), (4, 'Max', 25, 'Strategy'), (5, 'Zoe', 28, 'Racing'), (6, 'Ella', 24, 'Racing');<end_of_turn>\\n<start_of_turn>model\\nSELECT AVG(age) FROM Players WHERE game_genre = 'Racing';\\n\\nExplanation: This query returns the average age of players who play Racing games by using the AVG function on the age column and filtering the data by game_genre using the WHERE clause.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nNumber of music albums released by year?\\n\\nContext: CREATE TABLE MusicAlbums (AlbumID INT, Title VARCHAR(100), ReleaseYear INT, Genre VARCHAR(50));<end_of_turn>\\n<start_of_turn>model\\nSELECT ReleaseYear, COUNT(*) as Num_Albums FROM MusicAlbums GROUP BY ReleaseYear;\\n\\nExplanation: This query counts the number of music albums released by year.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the number of infectious disease cases for each state in the US?\\n\\nContext: CREATE TABLE infectious_disease (id INT, state VARCHAR(2), disease VARCHAR(50), cases INT); INSERT INTO infectious_disease (id, state, disease, cases) VALUES (1, 'NY', 'Flu', 5000), (2, 'CA', 'Flu', 7000), (3, 'TX', 'Flu', 6000), (4, 'FL', 'Flu', 4000), (5, 'NY', 'Measles', 200), (6, 'CA', 'Measles', 300), (7, 'TX', 'Measles', 100), (8, 'FL', 'Measles', 400);<end_of_turn>\\n<start_of_turn>model\\nSELECT state, SUM(cases) as total_cases FROM infectious_disease GROUP BY state;\\n\\nExplanation: This query calculates the total number of infectious disease cases for each state in the US. It does this by grouping the data by state and summing up the cases column.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhich wells in the 'ArabianGulf' have a production quantity higher than the average production quantity for wells in the 'ArabianSea'?\\n\\nContext: CREATE TABLE WellProduction (well_id INT, well_name TEXT, region TEXT, production_qty REAL); INSERT INTO WellProduction (well_id, well_name, region, production_qty) VALUES (1, 'Delta', 'ArabianGulf', 1200), (2, 'Echo', 'ArabianSea', 1000), (3, 'Foxtrot', 'ArabianSea', 1100);<end_of_turn>\\n<start_of_turn>model\\nSELECT well_name FROM WellProduction WHERE region = 'ArabianGulf' AND production_qty > (SELECT AVG(production_qty) FROM WellProduction WHERE region = 'ArabianSea')\\n\\nExplanation: This query finds the names of wells in the 'ArabianGulf' with a production quantity higher than the average production quantity for wells in the 'ArabianSea'.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nIdentify customers who have had an increasing balance for the past three consecutive transactions, for all accounts.\\n\\nContext: CREATE TABLE accounts (customer_id INT, account_type VARCHAR(20), balance DECIMAL(10, 2), transaction_date DATE);<end_of_turn>\\n<start_of_turn>model\\nSELECT customer_id, account_type, balance FROM (SELECT customer_id, account_type, balance, transaction_date, LAG(balance, 2) OVER (PARTITION BY customer_id ORDER BY transaction_date) AS lag_balance_2 FROM accounts) AS lagged_accounts WHERE balance > lag_balance_2;\\n\\nExplanation: Calculate the balance two transactions ago for each customer using the LAG function and partitioning the data by customer_id and ordering by transaction_date. Then, filter the results to only include customers where the balance is greater than the balance two transactions ago for at least three consecutive transactions.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nCalculate the total number of refills for antibiotics prescribed in Q1 2022.\\n\\nContext: CREATE TABLE medications (id INT, patient_id INT, medication VARCHAR(30), prescription_date DATE, refills INT); INSERT INTO medications (id, patient_id, medication, prescription_date, refills) VALUES (1, 3, 'Amoxicillin', '2022-02-01', 2), (2, 4, 'Ciprofloxacin', '2022-03-15', 1);<end_of_turn>\\n<start_of_turn>model\\nSELECT SUM(refills) FROM medications WHERE medication LIKE '%antibiotic%' AND prescription_date BETWEEN '2022-01-01' AND '2022-03-31';\\n\\nExplanation: Calculate the total number of refills for antibiotics prescribed in Q1 2022.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the total amount spent on supplies by each organization in 2021?\\n\\nContext: CREATE TABLE Supplies (org_name TEXT, supply_cost INTEGER, supply_date DATE); INSERT INTO Supplies (org_name, supply_cost, supply_date) VALUES ('Organization A', 3000, '2021-01-05'); INSERT INTO Supplies (org_name, supply_cost, supply_date) VALUES ('Organization B', 4000, '2021-06-12');<end_of_turn>\\n<start_of_turn>model\\nSELECT org_name, SUM(supply_cost) FROM Supplies WHERE supply_date BETWEEN '2021-01-01' AND '2021-12-31' GROUP BY org_name;\\n\\nExplanation: The SQL query selects the organization name and sum of supply costs for each organization from the Supplies table, filtering for records between January 1, 2021 and December 31, 2021. It then groups the result by organization name to provide a total amount spent on supplies by each organization in 2021.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhich of our suppliers in Asia have not supplied any products to us in the last year?\\n\\nContext: CREATE TABLE Suppliers (SupplierID INT, CompanyName VARCHAR(50), Country VARCHAR(20)); INSERT INTO Suppliers VALUES (1, 'Supplier1', 'Asia'); INSERT INTO Suppliers VALUES (2, 'Supplier2', 'USA'); CREATE TABLE SupplierOrders (OrderID INT, SupplierID INT, OrderDate DATE); INSERT INTO SupplierOrders VALUES (1, 1); INSERT INTO SupplierOrders VALUES (2, 2);<end_of_turn>\\n<start_of_turn>model\\nSELECT Suppliers.CompanyName FROM Suppliers LEFT JOIN SupplierOrders ON Suppliers.SupplierID = SupplierOrders.SupplierID WHERE Suppliers.Country = 'Asia' AND SupplierOrders.OrderDate < DATEADD(YEAR, -1, GETDATE()) AND SupplierOrders.OrderID IS NULL;\\n\\nExplanation: This query finds which of our suppliers in Asia have not supplied any products to us in the last year by performing a left join between the Suppliers and SupplierOrders tables on the SupplierID field. It then filters for suppliers from Asia and orders within the last year and selects suppliers who do not have any orders within that time frame.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the total investment in the 'Equity' fund type for customers in the 'Europe' region?\\n\\nContext: CREATE TABLE investments (id INT, customer_id INT, fund_type VARCHAR(50), investment_amount DECIMAL(10,2)); INSERT INTO investments (id, customer_id, fund_type, investment_amount) VALUES (1, 1, 'Bond', 10000.00); INSERT INTO investments (id, customer_id, fund_type, investment_amount) VALUES (2, 2, 'Equity', 15000.00); INSERT INTO investments (id, customer_id, fund_type, investment_amount) VALUES (3, 3, 'Bond', 20000.00); INSERT INTO investments (id, customer_id, fund_type, investment_amount) VALUES (4, 4, 'Equity', 25000.00);<end_of_turn>\\n<start_of_turn>model\\nSELECT SUM(investment_amount) FROM investments WHERE fund_type = 'Equity' AND customer_id IN (SELECT id FROM customers WHERE region = 'Europe');\\n\\nExplanation: This SQL query calculates the total investment in the 'Equity' fund type for customers in the 'Europe' region. It does this by using the SUM function on the investment_amount column, while filtering for the 'Equity' fund type and customers in the 'Europe' region using the WHERE clause and a subquery. The subquery selects the id column from the customers table, where the region is 'Europe'.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the average age of female patients diagnosed with diabetes in Texas?\\n\\nContext: CREATE TABLE patients (id INT, gender TEXT, age INT, diagnosis TEXT, state TEXT);<end_of_turn>\\n<start_of_turn>model\\nSELECT AVG(age) FROM patients WHERE gender = 'female' AND diagnosis = 'diabetes' AND state = 'Texas';\\n\\nExplanation: This query calculates the average age of female patients diagnosed with diabetes in Texas. It uses the AVG function to find the average age from the patients table where gender is 'female', diagnosis is 'diabetes' and state is 'Texas'.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nList dispensaries that have sold more than 100 units of a specific strain, 'Blue Dream', in the last month.\\n\\nContext: CREATE TABLE Dispensaries (DispensaryID INT, DispensaryName VARCHAR(50)); CREATE TABLE Strains (StrainID INT, StrainName VARCHAR(50)); CREATE TABLE Sales (SaleID INT, DispensaryID INT, StrainID INT, QuantitySold INT, SaleDate DATE);<end_of_turn>\\n<start_of_turn>model\\nSELECT D.DispensaryID, D.DispensaryName FROM Dispensaries D JOIN Sales S ON D.DispensaryID = S.DispensaryID JOIN Strains ST ON S.StrainID = ST.StrainID WHERE StrainName = 'Blue Dream' AND S.SaleDate >= DATEADD(month, -1, GETDATE()) GROUP BY D.DispensaryID, D.DispensaryName HAVING SUM(QuantitySold) > 100;\\n\\nExplanation: Identify dispensaries that have sold more than 100 units of the specific strain, 'Blue Dream', in the last month.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhich natural heritage sites are located in Africa and are considered endangered?\\n\\nContext: CREATE TABLE HeritageSites (SiteID INT PRIMARY KEY, Name VARCHAR(100), Category VARCHAR(50), Status VARCHAR(20), Region VARCHAR(50)); INSERT INTO HeritageSites (SiteID, Name, Category, Status, Region) VALUES (1, 'Victoria Falls', 'Natural', 'Vulnerable', 'Africa'), (2, 'Grand Canyon', 'Natural', 'Not Endangered', 'North America');<end_of_turn>\\n<start_of_turn>model\\nSELECT Name FROM HeritageSites WHERE Category = 'Natural' AND Status = 'Vulnerable' AND Region = 'Africa';\\n\\nExplanation: Select the names of natural heritage sites from the HeritageSites table where the status is vulnerable and the region is Africa.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhich factories have not implemented any Industry 4.0 technologies and are located in Europe?\\n\\nContext: CREATE TABLE factories (name TEXT, region TEXT, industry_4_0 BOOLEAN); INSERT INTO factories (name, region, industry_4_0) VALUES ('Xi Manufacturing', 'Europe', FALSE), ('Omicron Robotics', 'Asia-Pacific', TRUE);<end_of_turn>\\n<start_of_turn>model\\nSELECT name FROM factories WHERE region = 'Europe' AND industry_4_0 = FALSE;\\n\\nExplanation: This query selects the name column from the factories table where the region is Europe and industry_4_0 is FALSE.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the total cost of all dam maintenance activities in 2021?\\n\\nContext: CREATE TABLE DamMaintenance (MaintenanceID int, Year int, Cost decimal(10,2)); INSERT INTO DamMaintenance (MaintenanceID, Year, Cost) VALUES (1, 2021, 15000), (2, 2022, 20000), (3, 2021, 12000);<end_of_turn>\\n<start_of_turn>model\\nSELECT SUM(Cost) FROM DamMaintenance WHERE Year = 2021;\\n\\nExplanation: This query calculates the total cost of all dam maintenance activities in 2021 by summing the 'Cost' column where the 'Year' column equals 2021.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nUpdate the fare for the Tokyo metro to 1.80\\n\\nContext: CREATE TABLE if not exists metro_fares (id INT, city VARCHAR(20), fare DECIMAL(3,2)); INSERT INTO metro_fares (id, city, fare) VALUES (1, 'Tokyo', 1.70), (2, 'Berlin', 2.40);<end_of_turn>\\n<start_of_turn>model\\nUPDATE metro_fares SET fare = 1.80 WHERE city = 'Tokyo';\\n\\nExplanation: This query updates the fare for the Tokyo metro to 1.80 by updating the fare column in the metro_fares table where the city is 'Tokyo'.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nHow many manned space missions have been flown by the Russian space agency?\\n\\nContext: CREATE TABLE Space_Agencies (ID INT, Agency VARCHAR(50), Country VARCHAR(50), Total_Manned_Missions INT); INSERT INTO Space_Agencies (ID, Agency, Country, Total_Manned_Missions) VALUES (1, 'European Space Agency', 'Europe', 5), (2, 'National Aeronautics and Space Administration', 'USA', 15), (3, 'Roscosmos', 'Russia', 12), (4, 'China National Space Administration', 'China', 4), (5, 'Indian Space Research Organisation', 'India', 1);<end_of_turn>\\n<start_of_turn>model\\nSELECT Total_Manned_Missions FROM Space_Agencies WHERE Agency = 'Roscosmos';\\n\\nExplanation: This query calculates the number of manned space missions flown by the Russian space agency by selecting the 'Total_Manned_Missions' column value where the 'Agency' is 'Roscosmos'.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWho is the goalkeeper with the most saves in the 'saves' table for ice hockey?\\n\\nContext: CREATE TABLE saves (save_id INT, player_id INT, match_id INT, team_id INT, saves INT); INSERT INTO saves (save_id, player_id, match_id, team_id, saves) VALUES (1, 11, 12, 311, 15);<end_of_turn>\\n<start_of_turn>model\\nSELECT player_id, MAX(saves) FROM saves WHERE position = 'Goalkeeper';\\n\\nExplanation: This query selects the 'player_id' and maximum value of the 'saves' column from the 'saves' table where the 'position' is equal to 'Goalkeeper'.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nHow many employees were hired in '2021' in the 'Employees' table?\\n\\nContext: CREATE TABLE Employees (id INT, hire_date DATE); INSERT INTO Employees (id, hire_date) VALUES (1, '2021-02-14'), (2, '2020-09-01'), (3, '2022-03-25'), (4, '2021-11-15');<end_of_turn>\\n<start_of_turn>model\\nSELECT COUNT(*) FROM Employees WHERE hire_date BETWEEN '2021-01-01' AND '2021-12-31';\\n\\nExplanation: This query counts the number of employees hired in '2021' in the 'Employees' table. It counts rows where the 'hire_date' is between '2021-01-01' and '2021-12-31'.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the minimum and maximum temperature for the Arctic Ocean?\\n\\nContext: CREATE TABLE Temperature_Data (location TEXT, temperature NUMERIC); INSERT INTO Temperature_Data (location, temperature) VALUES ('Arctic Ocean Surface', -1.8), ('Arctic Ocean Deep', -1.5), ('North Pole Surface', -1.8), ('North Pole Deep', -1.3);<end_of_turn>\\n<start_of_turn>model\\nSELECT MIN(temperature), MAX(temperature) FROM Temperature_Data WHERE location LIKE '%Arctic%';\\n\\nExplanation: Filter for 'Arctic' locations, then find minimum and maximum temperatures.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the average number of followers for users in Indonesia?\\n\\nContext: CREATE TABLE users (id INT, name VARCHAR(50), followers INT, country VARCHAR(50)); INSERT INTO users (id, name, followers, country) VALUES (1, 'Ayu Saputra', 1000, 'Indonesia'), (2, 'Budi Prasetyo', 2000, 'Indonesia'), (3, 'Dewi Santoso', 3000, 'Indonesia');<end_of_turn>\\n<start_of_turn>model\\nSELECT AVG(followers) FROM users WHERE country = 'Indonesia';\\n\\nExplanation: This query calculates the average number of followers for users in Indonesia. It selects the average of the followers column from the users table, where the country column is equal to 'Indonesia'.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the count of unique users from India who posted more than twice in the last week?\\n\\nContext: CREATE TABLE users (id INT, name TEXT, country TEXT); INSERT INTO users (id, name, country) VALUES (1, 'Ravi', 'India'), (2, 'Priya', 'India'), (3, 'Rajesh', 'India'), (4, 'Neha', 'India'), (5, 'Rakesh', 'India'); CREATE TABLE posts (id INT, user_id INT, timestamp DATETIME); INSERT INTO posts (id, user_id, timestamp) VALUES (1, 1, '2022-05-01 12:00:00'), (2, 1, '2022-05-05 13:00:00'), (3, 1, '2022-05-07 11:00:00'), (4, 2, '2022-05-04 14:00:00'), (5, 3, '2022-05-04 15:00:00'), (6, 4, '2022-05-06 16:00:00'), (7, 5, '2022-05-05 10:00:00'), (8, 5, '2022-05-07 12:00:00');<end_of_turn>\\n<start_of_turn>model\\nSELECT COUNT(DISTINCT users.id) FROM posts JOIN users ON posts.user_id = users.id WHERE users.country = 'India' AND posts.timestamp >= DATE_SUB(NOW(), INTERVAL 1 WEEK) GROUP BY users.id HAVING COUNT(posts.id) > 2;\\n\\nExplanation: 1. Joins the posts and users tables on the user_id and id columns respectively.   2. Filters the data for users from India who posted in the last week.   3. Groups the results by user ID.   4. Filters the results for users who posted more than twice.   5. Counts the number of unique users.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nAdd a new traditional art record for 'Dance of the Eagle' in 'Tribe Z' to the 'traditional_arts' table\\n\\nContext: CREATE TABLE traditional_arts (id INT, name VARCHAR(50), tribe VARCHAR(50), description TEXT);<end_of_turn>\\n<start_of_turn>model\\nINSERT INTO traditional_arts (id, name, tribe, description) VALUES (4, 'Dance of the Eagle', 'Tribe Z', 'A sacred dance performed during ceremonial events.');\\n\\nExplanation: The SQL query adds a new record to the 'traditional_arts' table, representing the 'Dance of the Eagle' in 'Tribe Z' with a description.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the average number of safety violations per year for non-union companies in the 'Transportation' industry?\\n\\nContext: CREATE TABLE SafetyViolations (id INT, CompanyType TEXT, Industry TEXT, Year INT, Violations INT);<end_of_turn>\\n<start_of_turn>model\\nSELECT AVG(Violations) FROM SafetyViolations WHERE CompanyType != 'Union' AND Industry = 'Transportation' GROUP BY Industry, Year;\\n\\nExplanation: The SQL query calculates the average number of safety violations per year for non-union companies in the Transportation industry by filtering the SafetyViolations table based on CompanyType and Industry columns and then applying the AVG() function to the Violations column and grouping the results by Industry and Year columns.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the average budget allocated for public safety in the cities of Atlanta, Boston, and Denver for the years 2022 and 2023?\\n\\nContext: CREATE TABLE city_budgets (city varchar(50), year int, service varchar(50), budget int); INSERT INTO city_budgets (city, year, service, budget) VALUES ('Atlanta', 2022, 'Public Safety', 15000000), ('Atlanta', 2023, 'Public Safety', 16000000), ('Boston', 2022, 'Public Safety', 20000000), ('Boston', 2023, 'Public Safety', 21000000), ('Denver', 2022, 'Public Safety', 12000000), ('Denver', 2023, 'Public Safety', 13000000);<end_of_turn>\\n<start_of_turn>model\\nSELECT AVG(budget) FROM city_budgets WHERE (city = 'Atlanta' OR city = 'Boston' OR city = 'Denver') AND service = 'Public Safety' AND (year = 2022 OR year = 2023);\\n\\nExplanation: The SQL query calculates the average budget allocated for public safety in the cities of Atlanta, Boston, and Denver for the years 2022 and 2023 by calculating the average budget values in the city_budgets table where the city is either 'Atlanta', 'Boston', or 'Denver', the service is 'Public Safety', and the year is either 2022 or 2023.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat are the unique AI research topics with more than 3 papers published in 2023, excluding those that are not related to AI safety or explainable AI?\\n\\nContext: CREATE TABLE ai_topics (id INT, topic VARCHAR(100), papers INT, category VARCHAR(100));<end_of_turn>\\n<start_of_turn>model\\nSELECT topic FROM ai_topics WHERE papers > 3 AND year = 2023 AND category IN ('AI safety', 'Explainable AI');\\n\\nExplanation: This query selects unique AI research topics with more than 3 papers published in 2023 and excludes any topics that are not related to AI safety or explainable AI.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nList all community development initiatives in Bolivia with a budget less than 250,000 USD.\\n\\nContext: CREATE TABLE community_development (id INT, initiative TEXT, location TEXT, budget FLOAT); INSERT INTO community_development (id, initiative, location, budget) VALUES (1, 'Youth Skills Training', 'Bolivia', 150000.00), (2, 'Clean Water Access', 'Bolivia', 200000.00), (3, 'Women Empowerment', 'Peru', 300000.00);<end_of_turn>\\n<start_of_turn>model\\nSELECT initiative, location, budget FROM community_development WHERE location = 'Bolivia' AND budget < 250000;\\n\\nExplanation: The SQL query filters the community_development table to only include rows with a location of 'Bolivia' and a budget less than 250,000. It then selects the initiative, location, and budget columns from this filtered set.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the total quantity of 'Eco Friendly T-Shirts' sold in the 'Asia-Pacific' region for each quarter in 2022?\\n\\nContext: CREATE TABLE Sales (product VARCHAR(20), region VARCHAR(20), quarter INT, year INT, quantity INT); INSERT INTO Sales (product, region, quarter, year, quantity) VALUES ('Eco Friendly T-Shirts', 'Asia-Pacific', 1, 2022, 550), ('Eco Friendly T-Shirts', 'Asia-Pacific', 2, 2022, 600), ('Eco Friendly T-Shirts', 'Asia-Pacific', 3, 2022, 650), ('Eco Friendly T-Shirts', 'Asia-Pacific', 4, 2022, 700);<end_of_turn>\\n<start_of_turn>model\\nSELECT region, quarter, SUM(quantity) as total_quantity FROM Sales WHERE product = 'Eco Friendly T-Shirts' AND year = 2022 GROUP BY region, quarter;\\n\\nExplanation: The SQL query calculates the total quantity of 'Eco Friendly T-Shirts' sold in the 'Asia-Pacific' region for each quarter in 2022 by grouping the Sales table by the region and quarter columns, and then applying the SUM function to the quantity column.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nIdentify the idle wells in the Gulf of Mexico\\n\\nContext: CREATE TABLE wells (id INT, well_name VARCHAR(100), location VARCHAR(50), status VARCHAR(20)); INSERT INTO wells VALUES (1, 'Well A', 'North Sea', 'Producing'); INSERT INTO wells VALUES (2, 'Well B', 'Gulf of Mexico', 'Abandoned'); INSERT INTO wells VALUES (3, 'Well C', 'Gulf of Mexico', 'Producing'); INSERT INTO wells VALUES (4, 'Well D', 'North Sea', 'Producing'); INSERT INTO wells VALUES (5, 'Well E', 'North Sea', 'Idle'); INSERT INTO wells VALUES (6, 'Well F', 'Gulf of Mexico', 'Idle');<end_of_turn>\\n<start_of_turn>model\\nSELECT well_name FROM wells WHERE location = 'Gulf of Mexico' AND status = 'Idle';\\n\\nExplanation: This query selects the 'well_name' from the 'wells' table where the 'location' is 'Gulf of Mexico' and the 'status' is 'Idle'.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the average budget, in dollars, of rural infrastructure projects in Colombia that were initiated after 2017?\\n\\nContext: CREATE TABLE rural_infrastructure_projects (id INT, name TEXT, start_date DATE, budget FLOAT, country TEXT); INSERT INTO rural_infrastructure_projects (id, name, start_date, budget, country) VALUES (1, 'Project K', '2018-01-01', 65000.0, 'Colombia'); INSERT INTO rural_infrastructure_projects (id, name, start_date, budget, country) VALUES (2, 'Project L', '2017-05-15', 85000.0, 'Colombia');<end_of_turn>\\n<start_of_turn>model\\nSELECT AVG(budget) FROM rural_infrastructure_projects WHERE start_date > '2017-12-31' AND country = 'Colombia';\\n\\nExplanation: This query calculates the average budget of rural infrastructure projects initiated in Colombia after 2017. It does this by averaging the budget column values for all rows with start_date after 2017 and country 'Colombia'.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nFind the top 3 menu items contributing to daily revenue in 'fine_dining' restaurant\\n\\nContext: CREATE TABLE restaurant (id INT, name VARCHAR(255)); INSERT INTO restaurant (id, name) VALUES (1, 'fine_dining'); CREATE TABLE menu (id INT, item VARCHAR(255), price DECIMAL(5,2), daily_sales INT, restaurant_id INT);<end_of_turn>\\n<start_of_turn>model\\nSELECT i.item, SUM(m.price * m.daily_sales) as revenue FROM menu m JOIN restaurant r ON m.restaurant_id = r.id WHERE r.name = 'fine_dining' GROUP BY i.item ORDER BY revenue DESC LIMIT 3;\\n\\nExplanation: This query first joins the 'menu' and 'restaurant' tables based on the restaurant_id. It then filters for the 'fine_dining' restaurant. After that, it groups the menu items by item and calculates the revenue for each item. Finally, it orders the items by revenue in descending order and limits the results to the top 3.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nFind the total number of artworks created by female artists.\\n\\nContext: CREATE TABLE artworks (id INT, artist_name VARCHAR(255), gender VARCHAR(255)); INSERT INTO artworks (id, artist_name, gender) VALUES (1, 'Frida Kahlo', 'Female'), (2, 'Pablo Picasso', 'Male'), (3, 'Yayoi Kusama', 'Female');<end_of_turn>\\n<start_of_turn>model\\nSELECT COUNT(*) FROM artworks WHERE gender = 'Female';\\n\\nExplanation: This query selects the count of rows from the artworks table, and filters the gender to Female.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nList all the suppliers providing \"free-range eggs\", along with their certification date and expiration date.\\n\\nContext: CREATE TABLE suppliers(id INT PRIMARY KEY, name VARCHAR(50), certified_date DATE, certification_expiration_date DATE); INSERT INTO suppliers(id, name, certified_date, certification_expiration_date) VALUES (1, 'Supplier A', '2020-01-01', '2022-12-31'), (2, 'Supplier B', '2019-06-15', '2021-06-14'), (3, 'Supplier C', '2021-08-08', '2023-08-07'); CREATE TABLE products(id INT PRIMARY KEY, name VARCHAR(50), type VARCHAR(50)); INSERT INTO products(id, name, type) VALUES (1, 'free-range eggs', 'eggs'), (2, 'cage-free eggs', 'eggs'), (3, 'conventional eggs', 'eggs');<end_of_turn>\\n<start_of_turn>model\\nSELECT s.name, s.certified_date, s.certification_expiration_date FROM suppliers s JOIN products p ON s.id = p.id WHERE p.name = 'free-range eggs';\\n\\nExplanation: This SQL query joins the suppliers and products tables on the id field, filters for 'free-range eggs', and returns the name of the suppliers, certified date, and certification expiration date.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nIdentify the number of cases handled by attorneys who have passed the bar exam in California.\\n\\nContext: CREATE TABLE attorneys (attorney_id INT, name TEXT, passed_bar_exam_ca BOOLEAN); INSERT INTO attorneys (attorney_id, name, passed_bar_exam_ca) VALUES (1, 'Jane Doe', TRUE), (2, 'John Smith', FALSE), (3, 'Sara Connor', TRUE), (4, 'Tom Williams', FALSE); CREATE TABLE cases (case_id INT, attorney_id INT); INSERT INTO cases (case_id, attorney_id) VALUES (1, 1), (2, 2), (3, 3), (4, 3), (5, 4);<end_of_turn>\\n<start_of_turn>model\\nSELECT COUNT(*) FROM cases INNER JOIN attorneys ON cases.attorney_id = attorneys.attorney_id WHERE attorneys.passed_bar_exam_ca = TRUE;\\n\\nExplanation: This query identifies the number of cases handled by attorneys who have passed the bar exam in California. It performs an inner join on the 'attorneys' and 'cases' tables, matching the attorney_id in both tables. It then filters for rows where the 'passed_bar_exam_ca' column in the 'attorneys' table is TRUE and counts the number of rows.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nShow details of military satellites and their launch dates\\n\\nContext: CREATE TABLE military_satellites (id INT, satellite_name VARCHAR(50), type VARCHAR(50), country VARCHAR(50)); CREATE TABLE satellite_launches (id INT, satellite_id INT, launch_date DATE); INSERT INTO military_satellites (id, satellite_name, type, country) VALUES (1, 'Milstar-1', 'Communications', 'USA'), (2, 'GPS-IIR', 'Navigation', 'USA'), (3, 'Jianbing-6', 'Surveillance', 'China'); INSERT INTO satellite_launches (id, satellite_id, launch_date) VALUES (1, 1, '1994-02-01'), (2, 2, '1997-01-17'), (3, 3, '2015-09-19');<end_of_turn>\\n<start_of_turn>model\\nSELECT military_satellites.satellite_name, military_satellites.type, satellite_launches.launch_date FROM military_satellites INNER JOIN satellite_launches ON military_satellites.id = satellite_launches.satellite_id;\\n\\nExplanation: This SQL query retrieves details of military satellites and their launch dates using an INNER JOIN on the military_satellites and satellite_launches tables, joining them using the satellite_id.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the total number of research grants awarded to graduate students from the USA?\\n\\nContext: CREATE TABLE research_grants (id INT, student_id INT, country VARCHAR(50)); INSERT INTO research_grants (id, student_id, country) VALUES (1, 123, 'USA'), (2, 456, 'Canada');<end_of_turn>\\n<start_of_turn>model\\nSELECT COUNT(*) FROM research_grants WHERE country = 'USA';\\n\\nExplanation: This query counts the number of research grants awarded to graduate students from the USA by filtering the country column for 'USA' and then calculating the count of records.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nHow many more males than females attended film screenings and poetry readings?\\n\\nContext: CREATE TABLE film_screenings (attendee_id INT, gender TEXT); CREATE TABLE poetry_readings (attendee_id INT, gender TEXT);<end_of_turn>\\n<start_of_turn>model\\nSELECT 'Film Screenings' AS event_type, SUM(CASE WHEN gender = 'Male' THEN 1 ELSE -1 END) AS gender_difference FROM film_screenings GROUP BY gender UNION ALL SELECT 'Poetry Readings', SUM(CASE WHEN gender = 'Male' THEN 1 ELSE -1 END) FROM poetry_readings GROUP BY gender;\\n\\nExplanation: For film screenings and poetry readings, we calculate the difference in attendee count between males and females using the CASE statement and SUM() function, returning the difference for each event type.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the minimum weight of packages shipped to Asia in the last week?\\n\\nContext: CREATE TABLE packages (id INT, weight FLOAT, shipped_date DATE); INSERT INTO packages (id, weight, shipped_date) VALUES (1, 15.3, '2022-01-01'), (2, 22.1, '2022-01-15');<end_of_turn>\\n<start_of_turn>model\\nSELECT MIN(weight) FROM packages WHERE shipped_date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 WEEK) AND destination = 'Asia';\\n\\nExplanation: This query calculates the minimum weight of packages shipped to Asia in the last week. It does this by selecting the minimum value of the weight column for records where the shipped_date is within the last week and the destination is Asia.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nHow many art pieces were created by artists from underrepresented communities in the last decade?\\n\\nContext: CREATE TABLE art_pieces_identity (id INT, year INT, artist_name VARCHAR(50), art_type VARCHAR(50), underrepresented_community VARCHAR(50));<end_of_turn>\\n<start_of_turn>model\\nSELECT COUNT(*) as total_art_pieces FROM art_pieces_identity WHERE year >= 2012 AND underrepresented_community IS NOT NULL;\\n\\nExplanation: This query counts the number of art pieces created by artists from underrepresented communities in the last decade by selecting the count of records where the year is greater than or equal to 2012 and the underrepresented community field is not null.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the average production of teff in sustainable agriculture in Middle East in the last 4 years?\\n\\nContext: CREATE TABLE Sustainable_Agriculture (Farm_ID INT, Crop VARCHAR(20), Production INT, Year INT, Continent VARCHAR(20)); INSERT INTO Sustainable_Agriculture (Farm_ID, Crop, Production, Year, Continent) VALUES (1101, 'Teff', 400, 2018, 'Middle East'), (1102, 'Teff', 500, 2019, 'Middle East'), (1103, 'Teff', 600, 2020, 'Middle East'), (1104, 'Teff', 700, 2021, 'Middle East');<end_of_turn>\\n<start_of_turn>model\\nSELECT AVG(Production) FROM Sustainable_Agriculture WHERE Crop = 'Teff' AND Continent = 'Middle East' AND Year BETWEEN (SELECT MAX(Year) FROM Sustainable_Agriculture) - 4 AND (SELECT MAX(Year) FROM Sustainable_Agriculture);\\n\\nExplanation: This query calculates the average production of teff in sustainable agriculture in Middle East in the last 4 years by averaging the Production column where Crop is 'Teff', Continent is 'Middle East', and Year is between the maximum Year value minus 4 and the maximum Year value in the Sustainable_Agriculture table.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhich drug types have the highest and lowest average approval times in the 'approval_times' and 'drug_types' tables?\\n\\nContext: CREATE TABLE approval_times (drug_name TEXT, approval_time INT); CREATE TABLE drug_types (drug_name TEXT, drug_type TEXT); INSERT INTO approval_times (drug_name, approval_time) VALUES ('DrugX', 12), ('DrugY', 18), ('DrugZ', 24), ('DrugW', 30), ('DrugV', 36); INSERT INTO drug_types (drug_name, drug_type) VALUES ('DrugX', 'Biologic'), ('DrugY', 'Generic'), ('DrugZ', 'Brand'), ('DrugW', 'Biosimilar'), ('DrugV', 'Vaccine');<end_of_turn>\\n<start_of_turn>model\\nSELECT drug_type, AVG(approval_time) as average_approval_time FROM approval_times at JOIN drug_types dt ON at.drug_name = dt.drug_name GROUP BY drug_type ORDER BY average_approval_time ASC, drug_type;\\n\\nExplanation: The SQL query calculates the average approval times for each drug type by joining the 'approval_times' and 'drug_types' tables and grouping the results by the 'drug_type' column. The results are then ordered by average approval time and alphabetical order.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nFind the average calorie content of dishes that contain ingredients from a supplier in the South.\\n\\nContext: CREATE TABLE Suppliers (sid INT, name TEXT, location TEXT);CREATE TABLE Dishes (did INT, name TEXT, calorie_content INT);CREATE TABLE Ingredients (iid INT, dish_id INT, supplier_id INT);INSERT INTO Suppliers VALUES (1, 'SupplierA', 'South');INSERT INTO Dishes VALUES (1, 'DishA', 500);INSERT INTO Ingredients VALUES (1, 1, 1);<end_of_turn>\\n<start_of_turn>model\\nSELECT AVG(Dishes.calorie_content) FROM Dishes INNER JOIN Ingredients ON Dishes.did = Ingredients.dish_id INNER JOIN Suppliers ON Ingredients.supplier_id = Suppliers.sid WHERE Suppliers.location = 'South';\\n\\nExplanation: The SQL query first performs an inner join between the Dishes and Ingredients tables, and then another inner join between the Ingredients and Suppliers tables, creating a single dataset with information about dishes and their ingredients and suppliers. It then filters the results to only include dishes that contain ingredients from a supplier in the South. Finally, it calculates the average calorie content of these dishes.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the average CO2 emission of flights to India?\\n\\nContext: CREATE TABLE flight_emissions (id INT, flight_id INT, country TEXT, CO2_emission FLOAT); INSERT INTO flight_emissions (id, flight_id, country, CO2_emission) VALUES (1, 1, 'India', 120), (2, 2, 'India', 150), (3, 3, 'India', 130), (4, 4, 'China', 140);<end_of_turn>\\n<start_of_turn>model\\nSELECT AVG(CO2_emission) FROM flight_emissions WHERE country = 'India';\\n\\nExplanation: This SQL query calculates the average CO2 emission of flights to India. It filters the flight_emissions table to only include rows with country set to India, then calculates the average CO2_emission of the resulting set.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the total revenue generated from art sales at the \"Modern Art Museum\" in 2022?\\n\\nContext: CREATE TABLE ArtSales2 (MuseumName TEXT, SaleDate DATE, NumPieces INTEGER, PricePerPiece FLOAT); INSERT INTO ArtSales2 (MuseumName, SaleDate, NumPieces, PricePerPiece) VALUES ('Modern Art Museum', '2022-01-01', 10, 50.5), ('Modern Art Museum', '2022-02-15', 15, 55.0), ('Modern Art Museum', '2022-04-20', 20, 60.0);<end_of_turn>\\n<start_of_turn>model\\nSELECT SUM(NumPieces * PricePerPiece) FROM ArtSales2 WHERE MuseumName = 'Modern Art Museum' AND YEAR(SaleDate) = 2022;\\n\\nExplanation: This query calculates the product of the NumPieces and PricePerPiece columns, then sums the results for all rows where the MuseumName is 'Modern Art Museum' and the SaleDate's year is 2022.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nHow many accidents were reported for each mining operation in the past year?\\n\\nContext: CREATE TABLE operations (id INT, name TEXT); CREATE TABLE accidents (operation_id INT, year INT, reported BOOLEAN); INSERT INTO operations (id, name) VALUES (1, 'Operation A'), (2, 'Operation B'), (3, 'Operation C'); INSERT INTO accidents (operation_id, year, reported) VALUES (1, 2021, TRUE), (1, 2021, TRUE), (2, 2021, FALSE), (3, 2021, TRUE), (3, 2021, TRUE);<end_of_turn>\\n<start_of_turn>model\\nSELECT operations.name, COUNT(accidents.id) FROM operations LEFT JOIN accidents ON operations.id = accidents.operation_id AND accidents.year = 2021 GROUP BY operations.id;\\n\\nExplanation: This query counts the number of accidents reported for each mining operation in the past year by using a left join between the operations and accidents tables on the operation_id column and filtering the records based on the year. The query then groups the records based on the operation_id column and calculates the count of the accidents table.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the maximum number of virtual tour views in 'Dubai'?\\n\\nContext: CREATE TABLE virtual_tours (tour_id INT, location TEXT, views INT); INSERT INTO virtual_tours (tour_id, location, views) VALUES (1, 'Dubai', 200), (2, 'Dubai', 300), (3, 'Abu Dhabi', 150);<end_of_turn>\\n<start_of_turn>model\\nSELECT MAX(views) FROM virtual_tours WHERE location = 'Dubai';\\n\\nExplanation: This query finds the maximum number of virtual tour views in Dubai by using the MAX function on the views column, and filtering for rows where the location is 'Dubai'.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the total number of kills and deaths for each player in the 'games' table?\\n\\nContext: CREATE TABLE players (id INT, name VARCHAR(50)); CREATE TABLE games (id INT, player_id INT, kills INT, deaths INT, assists INT); INSERT INTO players VALUES (1, 'Aarav Singh'); INSERT INTO players VALUES (2, 'Bella Rodriguez'); INSERT INTO games VALUES (1, 1, 12, 6, 8); INSERT INTO games VALUES (2, 1, 18, 4, 12); INSERT INTO games VALUES (3, 2, 7, 3, 2); INSERT INTO games VALUES (4, 2, 10, 5, 6);<end_of_turn>\\n<start_of_turn>model\\nSELECT player_id, SUM(kills) as total_kills, SUM(deaths) as total_deaths FROM games GROUP BY player_id;\\n\\nExplanation: This query calculates the total number of kills and deaths for each player in the 'games' table by grouping the table by the 'player_id' column and then calculating the sum of kills and deaths for each player.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nFind the total R&D expenditure for each drug in 2022.\\n\\nContext: CREATE TABLE rd_expenditure (drug_name TEXT, expenditure NUMERIC(10, 2), year INTEGER); INSERT INTO rd_expenditure (drug_name, expenditure, year) VALUES ('DrugX', 3500000, 2022), ('DrugX', 3200000, 2021), ('DrugY', 4000000, 2022), ('DrugY', 3800000, 2021);<end_of_turn>\\n<start_of_turn>model\\nSELECT drug_name, SUM(expenditure) as total_rd_expenditure FROM rd_expenditure WHERE year = 2022 GROUP BY drug_name;\\n\\nExplanation: The SQL query calculates the total R&D expenditure for each drug in 2022 by grouping the rd_expenditure table data by drug_name and summing the expenditure for the year 2022.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat are the names and salaries of employees who work in departments with manufacturing activities and have a salary greater than the average salary in those departments?\\n\\nContext: CREATE TABLE Departments (DepartmentID INT PRIMARY KEY, DepartmentName VARCHAR(50)); INSERT INTO Departments (DepartmentID, DepartmentName) VALUES (1, 'Manufacturing'); INSERT INTO Departments (DepartmentID, DepartmentName) VALUES (2, 'Engineering');<end_of_turn>\\n<start_of_turn>model\\nSELECT E.FirstName, E.LastName, E.Salary FROM Employees E INNER JOIN Departments D ON E.Department = D.DepartmentName WHERE D.DepartmentName IN ('Manufacturing') AND E.Salary > (SELECT AVG(E.Salary) FROM Employees E INNER JOIN Departments D ON E.Department = D.DepartmentName WHERE D.DepartmentName IN ('Manufacturing'));\\n\\nExplanation: Joining the Employees table with the Departments table on the Department field, and filtering employees who work in departments with manufacturing activities and have a salary greater than the average salary in those departments.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nFind the number of districts where more than 50% of citizens have participated in public hearings\\n\\nContext: CREATE TABLE Districts (DistrictID INT, District TEXT, TotalCitizens INT, CitizensParticipated INT); INSERT INTO Districts (DistrictID, District, TotalCitizens, CitizensParticipated) VALUES (1, 'District1', 1000, 600), (2, 'District2', 2000, 1200), (3, 'District3', 1500, 800);<end_of_turn>\\n<start_of_turn>model\\nSELECT District FROM Districts WHERE CitizensParticipated > (TotalCitizens * 0.5);\\n\\nExplanation: This SQL query finds the number of districts where more than 50% of citizens have participated in public hearings by filtering the Districts table where CitizensParticipated is greater than 50% of TotalCitizens.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the maximum altitude reached by any aircraft during test flights?\\n\\nContext: CREATE TABLE TestFlights (FlightID INT, AircraftName VARCHAR(100), Manufacturer VARCHAR(50), Altitude FLOAT);<end_of_turn>\\n<start_of_turn>model\\nSELECT MAX(Altitude) FROM TestFlights;\\n\\nExplanation: The SQL query calculates the maximum altitude reached by any aircraft during test flights. It calculates the maximum value of the Altitude column using the MAX function without any filters.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nFind the number of employees who changed their department in 2020\\n\\nContext: CREATE TABLE department_changes (id INT, employee_id INT, change_date DATE, new_department VARCHAR(255)); INSERT INTO department_changes (id, employee_id, change_date, new_department) VALUES (1, 401, '2020-03-01', 'IT'); INSERT INTO department_changes (id, employee_id, change_date, new_department) VALUES (2, 402, '2019-12-20', 'HR');<end_of_turn>\\n<start_of_turn>model\\nSELECT COUNT(DISTINCT employee_id) FROM department_changes WHERE YEAR(change_date) = 2020;\\n\\nExplanation: This query counts the number of unique records in the 'employee_id' column from the 'department_changes' table where the change_date's year is 2020.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nIdentify the top 3 energy-efficient countries in the energy market domain, considering renewable energy production, energy storage capacity, and carbon pricing.\\n\\nContext: CREATE TABLE energy_efficiency (country VARCHAR(20), renewable_energy_production INT, energy_storage_capacity INT, carbon_price DECIMAL(5,2)); INSERT INTO energy_efficiency (country, renewable_energy_production, energy_storage_capacity, carbon_price) VALUES ('Sweden', 650000, 12000, 120.00), ('Norway', 800000, 15000, 150.00), ('Denmark', 450000, 8000, 110.00), ('Finland', 500000, 9000, 90.00);<end_of_turn>\\n<start_of_turn>model\\nSELECT country, (renewable_energy_production + energy_storage_capacity + carbon_price) AS total_energy_efficiency FROM energy_efficiency GROUP BY country ORDER BY total_energy_efficiency DESC LIMIT 3;\\n\\nExplanation: The SQL query calculates the total energy efficiency for each country by adding the renewable energy production, energy storage capacity, and carbon pricing, then selects the top 3 countries with the highest energy efficiency scores.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the total number of mental health parity violations for each type of violation?\\n\\nContext: CREATE TABLE mental_health_parity (violation_type VARCHAR(50), violations INT);<end_of_turn>\\n<start_of_turn>model\\nSELECT violation_type, SUM(violations) FROM mental_health_parity GROUP BY violation_type;\\n\\nExplanation: This query calculates the total number of mental health parity violations for each type of violation from the mental_health_parity table by grouping the records by violation type and summing the number of violations.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the total number of tickets sold for baseball games in the 'Central Division'?\\n\\nContext: CREATE TABLE tickets_sold (ticket_id INT, game_type VARCHAR(50), division VARCHAR(50), tickets_sold INT); INSERT INTO tickets_sold (ticket_id, game_type, division, tickets_sold) VALUES (1, 'Basketball', 'Atlantic Division', 500), (2, 'Football', 'Atlantic Division', 700), (3, 'Basketball', 'Atlantic Division', 600), (4, 'Hockey', 'Central Division', 800), (5, 'Basketball', 'Atlantic Division', 900), (6, 'Soccer', 'Southern Division', 400), (7, 'Baseball', 'Central Division', 300), (8, 'Baseball', 'Central Division', 500), (9, 'Baseball', 'Central Division', 400), (10, 'Basketball', 'Pacific Division', 600);<end_of_turn>\\n<start_of_turn>model\\nSELECT SUM(tickets_sold) FROM tickets_sold WHERE game_type = 'Baseball' AND division = 'Central Division';\\n\\nExplanation: The SQL query filters the records for baseball games in the Central Division. It then calculates the total number of tickets sold for the filtered records.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the success rate of the 'Art Therapy' group sessions?\\n\\nContext: CREATE TABLE sessions (session_id INT, name VARCHAR(255), success BOOLEAN); INSERT INTO sessions (session_id, name, success) VALUES (1, 'Art Therapy', true); INSERT INTO sessions (session_id, name, success) VALUES (2, 'Music Therapy', false); INSERT INTO sessions (session_id, name, success) VALUES (3, 'Art Therapy', true); INSERT INTO sessions (session_id, name, success) VALUES (4, 'Dance Therapy', false);<end_of_turn>\\n<start_of_turn>model\\nSELECT AVG(sessions.success) FROM sessions WHERE sessions.name = 'Art Therapy';\\n\\nExplanation: This query calculates the success rate of the 'Art Therapy' group sessions by filtering the 'sessions' table to only include records where the session name is 'Art Therapy'. It then calculates the average success rate of the resulting records.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat are the top 5 sizes sold in the European market?\\n\\nContext: CREATE TABLE Inventory (product_id INT, product_name VARCHAR(255), available_sizes VARCHAR(255)); CREATE TABLE CustomerSize (customer_id INT, preferred_size VARCHAR(10)); CREATE TABLE Geography (customer_id INT, country VARCHAR(255), region VARCHAR(255));<end_of_turn>\\n<start_of_turn>model\\nSELECT I.product_id, I.product_name, COUNT(C.customer_id) AS sales_count FROM Inventory I INNER JOIN CustomerSize C ON I.available_sizes LIKE CONCAT('%', C.preferred_size, '%') INNER JOIN Geography G ON C.customer_id = G.customer_id WHERE G.region = 'Europe' GROUP BY I.product_id, I.product_name ORDER BY sales_count DESC LIMIT 5;\\n\\nExplanation: First, join the Inventory table with the CustomerSize table on the available_sizes column and the CustomerSize table with the Geography table on the customer_id column. Then, filter the results to only include customers from Europe. Next, group the results by product_id and product_name, and count the number of sales for each product. Finally, order the results by sales count in descending order and limit the output to the top 5 products.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nHow many safety incidents were reported for each vessel type in the Arctic region in the last year?\\n\\nContext: CREATE TABLE safety_incidents ( id INT, vessel_id INT, vessel_type VARCHAR(255), incident_date DATE, region VARCHAR(255) ); INSERT INTO safety_incidents (id, vessel_id, vessel_type, incident_date, region) VALUES (7, 22, 'Icebreaker', '2022-01-15', 'Arctic'); INSERT INTO safety_incidents (id, vessel_id, vessel_type, incident_date, region) VALUES (8, 23, 'Fishing', '2022-02-18', 'Arctic');<end_of_turn>\\n<start_of_turn>model\\nSELECT vessel_type, COUNT(*) as safety_incidents_count FROM safety_incidents WHERE region = 'Arctic' AND incident_date BETWEEN '2021-01-01' AND '2022-01-01' GROUP BY vessel_type;\\n\\nExplanation: Count the number of safety incidents reported for each vessel type in the Arctic region in the last year.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nShow the names of volunteers who have not been assigned to any tasks in the 'volunteers' and 'assignments' tables.\\n\\nContext: CREATE TABLE volunteers (id INT, name VARCHAR(50)); INSERT INTO volunteers (id, name) VALUES (1, 'Volunteer1'), (2, 'Volunteer2'), (3, 'Volunteer3'); CREATE TABLE assignments (id INT, volunteer_id INT, task VARCHAR(50)); INSERT INTO assignments (id, volunteer_id, task) VALUES (1, 1, 'Task1'), (2, 2, 'Task2');<end_of_turn>\\n<start_of_turn>model\\nSELECT volunteers.name FROM volunteers LEFT JOIN assignments ON volunteers.id = assignments.volunteer_id WHERE assignments.volunteer_id IS NULL;\\n\\nExplanation: This query performs a left join between the 'volunteers' and 'assignments' tables on the 'id' and 'volunteer_id' columns, respectively, and returns the names of volunteers who have not been assigned to any tasks.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the average financial capability score for men in South Africa and Brazil?\\n\\nContext: CREATE TABLE afc_scores (name TEXT, gender TEXT, country TEXT, score NUMERIC); INSERT INTO afc_scores (name, gender, country, score) VALUES ('John Doe', 'Male', 'South Africa', 70), ('John Smith', 'Male', 'Brazil', 75), ('Jane Doe', 'Female', 'South Africa', 75);<end_of_turn>\\n<start_of_turn>model\\nSELECT AVG(score) FROM afc_scores WHERE gender = 'Male' AND country IN ('South Africa', 'Brazil');\\n\\nExplanation: The SQL query calculates the average financial capability score for men in South Africa and Brazil by selecting the average score where the gender is 'Male' and the country is either 'South Africa' or 'Brazil'.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the minimum age of clients in the 'California' region?\\n\\nContext: CREATE TABLE clients (id INT, name TEXT, age INT, region TEXT); INSERT INTO clients (id, name, age, region) VALUES (1, 'John Doe', 35, 'California');<end_of_turn>\\n<start_of_turn>model\\nSELECT MIN(age) FROM clients WHERE region = 'California';\\n\\nExplanation: This SQL query calculates the minimum age of clients in the 'California' region. It filters the data to only include clients where the region is 'California', and then calculates the minimum of the 'age' column.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nIdentify the top 5 states with the highest water usage in the agricultural sector.\\n\\nContext: CREATE TABLE AgriculturalWaterUsage (state VARCHAR(20), water_usage FLOAT);<end_of_turn>\\n<start_of_turn>model\\nSELECT state, water_usage FROM AgriculturalWaterUsage ORDER BY water_usage DESC LIMIT 5;\\n\\nExplanation: This query selects the state and water_usage columns from the AgriculturalWaterUsage table, orders the result set in descending order based on water_usage, and returns the top 5 records.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nInsert a new record for a baseball match in Japan with 2000 tickets sold.\\n\\nContext: CREATE TABLE matches (match_id INT, sport VARCHAR(50), location VARCHAR(50), tickets_sold INT);<end_of_turn>\\n<start_of_turn>model\\nINSERT INTO matches (match_id, sport, location, tickets_sold) VALUES (4, 'Baseball', 'Japan', 2000);\\n\\nExplanation: Inserts a new record for a baseball match in Japan with 2000 tickets sold.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the average labor productivity in silver mining?\\n\\nContext: CREATE TABLE labor (employee_id INT, employee_name VARCHAR(50), department VARCHAR(20), hours_worked INT, productivity INT); INSERT INTO labor (employee_id, employee_name, department, hours_worked, productivity) VALUES (1, 'Juan Garcia', 'silver', 160, 500), (2, 'Maria Rodriguez', 'silver', 180, 600), (3, 'Pedro Lopez', 'gold', 165, 700), (4, 'Ana Gomez', 'copper', 170, 550);<end_of_turn>\\n<start_of_turn>model\\nSELECT AVG(l.productivity) AS avg_productivity FROM labor l WHERE l.department = 'silver';\\n\\nExplanation: The SQL query filters the 'labor' table for rows with a department of 'silver' and calculates the average 'productivity' for those rows.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat are the total sales figures for each drug in the 'SalesData' table, grouped by drug name?\\n\\nContext: CREATE TABLE SalesData (drug_name VARCHAR(255), sales_quantity INT, sales_amount DECIMAL(10,2)); INSERT INTO SalesData (drug_name, sales_quantity, sales_amount) VALUES ('DrugA', 150, 25000.00), ('DrugB', 200, 30000.00), ('DrugC', 100, 12000.00);<end_of_turn>\\n<start_of_turn>model\\nSELECT drug_name, SUM(sales_quantity) as total_sales_quantity, SUM(sales_amount) as total_sales_amount FROM SalesData GROUP BY drug_name;\\n\\nExplanation: The SQL query calculates the total sales quantity and sales amount for each drug in the 'SalesData' table. It uses the SUM() function to add up the sales quantity and sales amount for each drug, and the GROUP BY clause to group the results by drug name.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the average donation amount per region, ordered by the highest amount?\\n\\nContext: CREATE TABLE Donations (DonationID INT, DonationRegion TEXT, DonationAmount DECIMAL(10,2)); INSERT INTO Donations (DonationID, DonationRegion, DonationAmount) VALUES (1, 'Asia', 1000.00), (2, 'Africa', 1500.00), (3, 'Europe', 2000.00), (4, 'Asia', 500.00), (5, 'Africa', 800.00), (6, 'Europe', 1200.00);<end_of_turn>\\n<start_of_turn>model\\nSELECT AVG(DonationAmount) AS AvgDonation, DonationRegion FROM Donations GROUP BY DonationRegion ORDER BY AvgDonation DESC;\\n\\nExplanation: The SQL query calculates the average donation amount per region by grouping by the DonationRegion and using the AVG function. It then orders the results by the average donation amount in descending order.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nHow many sustainable material types are used by each brand?\\n\\nContext: CREATE TABLE Brands (Brand_ID INT, Brand_Name TEXT); INSERT INTO Brands (Brand_ID, Brand_Name) VALUES (1, 'H&M'); CREATE TABLE Material_Types (Material_ID INT, Material_Type TEXT, Brand_ID INT);<end_of_turn>\\n<start_of_turn>model\\nSELECT B.Brand_Name, COUNT(DISTINCT MT.Material_Type) AS Number_Of_Sustainable_Material_Types FROM Brands B\\n\\nExplanation: Join the 'Brands' and 'Material_Types' tables on 'Brand_ID'. Calculate the number of sustainable material types used by each brand.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nUpdate the revenue data for a specific restaurant\\n\\nContext: CREATE TABLE revenue (restaurant_id INT, revenue_date DATE, total_revenue DECIMAL(10,2));<end_of_turn>\\n<start_of_turn>model\\nUPDATE revenue SET total_revenue = 5000.00 WHERE restaurant_id = 789 AND revenue_date = '2022-02-15';\\n\\nExplanation: This query updates the total_revenue for a specific restaurant on a specific date in the revenue table.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the total revenue generated from sales in the 'sales' table for products in the 'sustainable_products' table that are made from recycled materials and certified by the 'certified_products' table?\\n\\nContext: CREATE TABLE sales (sale_id INT, product_id INT, price DECIMAL(10,2), quantity INT);CREATE TABLE circular_supply_chain (product_id INT, source VARCHAR(255), quantity INT);CREATE TABLE sustainable_products (product_id INT, category VARCHAR(255), price DECIMAL(10,2), recycled BOOLEAN, certified_by INT);CREATE TABLE certified_products (certification_id INT, name VARCHAR(255));<end_of_turn>\\n<start_of_turn>model\\nSELECT SUM(s.price * s.quantity) FROM sales s JOIN circular_supply_chain c ON s.product_id = c.product_id JOIN sustainable_products sp ON s.product_id = sp.product_id JOIN certified_products cp ON sp.certified_by = cp.certification_id WHERE sp.recycled = TRUE;\\n\\nExplanation: The SQL query calculates the total revenue generated from sales in the 'sales' table for products in the 'sustainable_products' table that are made from recycled materials and certified by the 'certified_products' table. It uses a 'JOIN' to combine records from all four tables based on the 'product_id' and 'certified_by' columns and a 'WHERE' clause to filter records where the 'recycled' column in the 'sustainable_products' table is equal to 'TRUE'. It then uses a 'SUM' function to add up the revenue from all sales records that meet the filter criteria. The revenue is calculated by multiplying the price and quantity of each sale.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the maximum torque for manual transmission vehicles in the 'performance_data' table?\\n\\nContext: CREATE TABLE performance_data (id INT, make VARCHAR(50), model VARCHAR(50), transmission_type VARCHAR(50), torque INT);<end_of_turn>\\n<start_of_turn>model\\nSELECT MAX(torque) FROM performance_data WHERE transmission_type = 'Manual';\\n\\nExplanation: The query finds the maximum torque for manual transmission vehicles using the MAX function on the 'torque' column and filtering for transmission types that are 'Manual'.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the total sales revenue for each drug in Q3 2020, grouped by drug category?\\n\\nContext: CREATE TABLE sales_3(drug_name TEXT, quarter INT, year INT, revenue FLOAT, drug_category TEXT); INSERT INTO sales_3(drug_name, quarter, year, revenue, drug_category) VALUES('DrugS', 3, 2020, 1000000, 'Analgesics'), ('DrugT', 3, 2020, 1200000, 'Antibiotics'), ('DrugU', 3, 2020, 1100000, 'Analgesics'), ('DrugV', 3, 2020, 900000, 'Cardiovascular');<end_of_turn>\\n<start_of_turn>model\\nSELECT drug_category, SUM(revenue) FROM sales_3 WHERE quarter = 3 AND year = 2020 GROUP BY drug_category;\\n\\nExplanation: This query calculates the total sales revenue for each drug category in Q3 2020 by grouping the rows in the sales_3 table based on the drug_category column and then summing the revenue values for each group.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nList all disaster relief centers and their corresponding capacities, sorted by capacity.\\n\\nContext: CREATE TABLE centers (id INT, name VARCHAR(255), capacity INT);CREATE VIEW center_types AS SELECT c.id, t.type FROM centers c JOIN center_types t ON c.type_id = t.id;<end_of_turn>\\n<start_of_turn>model\\nSELECT ct.name, ct.capacity FROM center_types ct ORDER BY ct.capacity DESC;\\n\\nExplanation: Join centers and center_types views on id. Sort the result by capacity in descending order.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nList all therapists and the number of patients they have treated, grouped by their state.\\n\\nContext: CREATE TABLE therapists (therapist_id INT, state TEXT); INSERT INTO therapists (therapist_id, state) VALUES (1, 'New York'), (2, 'New York'), (3, 'Texas'), (4, 'California'); CREATE TABLE therapist_patients (therapist_id INT, patient_id INT); INSERT INTO therapist_patients (therapist_id, patient_id) VALUES (1, 1), (1, 2), (2, 3), (3, 4), (3, 5), (4, 6);<end_of_turn>\\n<start_of_turn>model\\nSELECT therapists.state, COUNT(DISTINCT therapist_patients.patient_id) AS patient_count FROM therapists JOIN therapist_patients ON therapists.therapist_id = therapist_patients.therapist_id GROUP BY therapists.state;\\n\\nExplanation: Joins the therapists and therapist_patients tables on the therapist_id foreign key. Groups the result by state and counts the number of distinct patients treated by therapists in each state.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nIdentify the top 3 states with the highest number of veteran employment opportunities\\n\\nContext: CREATE TABLE veteran_employment (state VARCHAR(50), job_openings INT);<end_of_turn>\\n<start_of_turn>model\\nSELECT state, job_openings FROM veteran_employment ORDER BY job_openings DESC LIMIT 3;\\n\\nExplanation: This SQL query identifies the top 3 states with the highest number of veteran employment opportunities by sorting records by 'job_openings' in descending order and limiting the result set to the first 3 records.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the total number of unique players who participated in eSports events in the 'Shooter' category?\\n\\nContext: CREATE TABLE EventParticipants (event VARCHAR(100), category VARCHAR(50), player VARCHAR(50));<end_of_turn>\\n<start_of_turn>model\\nSELECT COUNT(DISTINCT player) FROM EventParticipants WHERE category = 'Shooter';\\n\\nExplanation: This query calculates the total number of unique players who participated in eSports events in the 'Shooter' category by selecting all records with the 'Shooter' category and counting the number of distinct players using the COUNT(DISTINCT) function.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nList the names of all startups that have received funding and have diverse founding teams (more than one founder with different genders).\\n\\nContext: CREATE TABLE startups (id INT, name TEXT, founder1 TEXT, founder2 TEXT, funding FLOAT); INSERT INTO startups (id, name, founder1, founder2, funding) VALUES (1, 'Acme', 'John Doe', 'Jane Smith', 500000.00); INSERT INTO startups (id, name, founder1, founder2, funding) VALUES (2, 'Beta Corp', 'Jane Smith', 'John Doe', 750000.00); INSERT INTO startups (id, name, founder1, founder2, funding) VALUES (3, 'Gamma Inc', 'Alice', NULL, 300000.00);<end_of_turn>\\n<start_of_turn>model\\nSELECT name FROM startups WHERE (founder1 != founder2) AND (founder1 IS NOT NULL AND founder2 IS NOT NULL);\\n\\nExplanation: This query lists the names of startups with diverse founding teams by selecting the 'name' column where both 'founder1' and 'founder2' are not NULL and have different values.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nList all clients who have a Shariah-compliant personal loan or a socially responsible auto loan?\\n\\nContext: CREATE TABLE client_loans (client_id INT, loan_type VARCHAR(20)); INSERT INTO client_loans (client_id, loan_type) VALUES (1, 'Shariah-compliant personal loan'), (2, 'Socially responsible auto loan'), (3, 'Shariah-compliant mortgage');<end_of_turn>\\n<start_of_turn>model\\nSELECT client_id FROM client_loans WHERE loan_type IN ('Shariah-compliant personal loan', 'Socially responsible auto loan');\\n\\nExplanation: The SQL query lists all clients who have a Shariah-compliant personal loan or a socially responsible auto loan by filtering the \"client_loans\" table using the WHERE clause with the IN operator on the \"loan_type\" column.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nHow many security incidents were mitigated in the EMEA region before Q2 of 2021?\\n\\nContext: CREATE TABLE incidents_by_region (id INT, region TEXT, date_mitigated DATE, incident_status TEXT); INSERT INTO incidents_by_region (id, region, date_mitigated, incident_status) VALUES (1, 'EMEA', '2021-01-02', 'mitigated'); INSERT INTO incidents_by_region (id, region, date_mitigated, incident_status) VALUES (2, 'APAC', '2021-02-03', 'unmitigated'); INSERT INTO incidents_by_region (id, region, date_mitigated, incident_status) VALUES (3, 'EMEA', '2021-03-04', 'mitigated'); INSERT INTO incidents_by_region (id, region, date_mitigated, incident_status) VALUES (4, 'APAC', '2021-04-05', 'mitigated'); INSERT INTO incidents_by_region (id, region, date_mitigated, incident_status) VALUES (5, 'EMEA', '2021-05-06', 'unmitigated');<end_of_turn>\\n<start_of_turn>model\\nSELECT COUNT(*) as count FROM incidents_by_region WHERE region = 'EMEA' AND date_mitigated < '2021-04-01' AND incident_status = 'mitigated';\\n\\nExplanation: This query filters incidents by the EMEA region, the mitigation date before Q2 of 2021, and mitigated status. It then counts the number of incidents and returns the result.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the count of new hires in the last 3 months, by recruiter and source?\\n\\nContext: CREATE TABLE Recruitment (RecruiterID int, RecruiterName varchar(50), CandidateSource varchar(50), NewHire bit, HireDate date); INSERT INTO Recruitment (RecruiterID, RecruiterName, CandidateSource, NewHire, HireDate) VALUES (1, 'Alice', 'Job Board', 1, '2022-01-01'), (2, 'Bob', 'Referral', 1, '2022-02-01'), (3, 'Charlie', 'Career Fair', 0, '2022-03-01');<end_of_turn>\\n<start_of_turn>model\\nSELECT Recruitment.RecruiterName, Recruitment.CandidateSource, COUNT(CASE WHEN Recruitment.NewHire = 1 AND Recruitment.HireDate >= DATEADD(month, -3, GETDATE()) THEN 1 ELSE NULL END) as Count_of_New_Hires FROM Recruitment GROUP BY Recruitment.RecruiterName, Recruitment.CandidateSource;\\n\\nExplanation: The SQL query calculates the count of new hires in the last 3 months, grouped by recruiter and source. It does this by filtering for new hires with a hire date within the last 3 months, and grouping the results by recruiter and source.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the total number of prepaid mobile customers in the 'island' region?\\n\\nContext: CREATE TABLE subscribers (id INT, type VARCHAR(10), region VARCHAR(10)); INSERT INTO subscribers (id, type, region) VALUES (1, 'prepaid', 'island'), (2, 'postpaid', 'island'), (3, 'prepaid', 'island'), (4, 'postpaid', 'coastal');<end_of_turn>\\n<start_of_turn>model\\nSELECT COUNT(*) FROM subscribers WHERE type = 'prepaid' AND region = 'island';\\n\\nExplanation: The SQL query calculates the total number of prepaid mobile customers in the island region by filtering for prepaid and island, and then using the COUNT function.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nHow many IoT sensors are installed in the US and Canada, by type?\\n\\nContext: CREATE TABLE sensors (sensor_id INT, sensor_type VARCHAR(255), country VARCHAR(255)); INSERT INTO sensors (sensor_id, sensor_type, country) VALUES (1, 'temperature', 'US'), (2, 'humidity', 'Canada'), (3, 'moisture', 'US');<end_of_turn>\\n<start_of_turn>model\\nSELECT sensors.country, sensors.sensor_type, COUNT(sensors.sensor_id) FROM sensors GROUP BY sensors.country, sensors.sensor_type;\\n\\nExplanation: This SQL query uses a GROUP BY clause on the 'country' and 'sensor_type' columns of the 'sensors' table. It counts the number of sensors for each unique combination of country and sensor type, providing a count of IoT sensors installed in the US and Canada, by type.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nDelete all test flight records that occurred before 2010\\n\\nContext: CREATE TABLE flights (id INT, flight_type VARCHAR(50), flight_hours DECIMAL(10,2), flight_date DATE);<end_of_turn>\\n<start_of_turn>model\\nDELETE FROM flights WHERE flight_type = 'Test Flight' AND flight_date < '2010-01-01';\\n\\nExplanation: This query deletes all records from the flights table where the flight type is Test Flight and the flight date is before 2010.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nInsert a new row into the 'trades' table with a trade ID of 123, a customer ID of 456, a trade date of '2022-01-01', a security symbol of 'ABC', and a quantity of 100\\n\\nContext: CREATE TABLE trades (trade_id INT PRIMARY KEY, customer_id INT, trade_date DATE, security_symbol VARCHAR(10), quantity INT);<end_of_turn>\\n<start_of_turn>model\\nINSERT INTO trades (trade_id, customer_id, trade_date, security_symbol, quantity) VALUES (123, 456, '2022-01-01', 'ABC', 100);\\n\\nExplanation: This query inserts a new row into the 'trades' table with a specified trade ID, customer ID, trade date, security symbol, and quantity.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the total number of emergency calls and crimes reported during natural disasters?\\n\\nContext: CREATE TABLE disasters (disaster_id INT, disaster_name VARCHAR(255), disaster_date DATE);CREATE TABLE emergency_calls (id INT, disaster_id INT, call_type VARCHAR(255), call_date DATE);CREATE TABLE crimes (id INT, disaster_id INT, crime_type VARCHAR(255), crime_date DATE);<end_of_turn>\\n<start_of_turn>model\\nSELECT 'Total emergency calls' AS metric, COUNT(ec.id) AS count FROM emergency_calls ec JOIN disasters d ON ec.disaster_id = d.disaster_id UNION ALL SELECT 'Total crimes' AS metric, COUNT(c.id) AS count FROM crimes c JOIN disasters d ON c.disaster_id = d.disaster_id;\\n\\nExplanation: This query uses the UNION ALL operator to combine the total number of emergency calls and crimes reported during natural disasters. It does this by joining the emergency_calls and crimes tables with the disasters table on the disaster_id column and calculating the total number of calls and crimes. The results are then labeled as \"Total emergency calls\" and \"Total crimes\" using the metric column.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the total revenue generated from mobile and broadband services in the first quarter of 2021?\\n\\nContext: CREATE TABLE mobile_revenue(quarter INT, revenue FLOAT); INSERT INTO mobile_revenue(quarter, revenue) VALUES (1, 1500000), (2, 1800000), (3, 2250000), (4, 2500000); CREATE TABLE broadband_revenue(quarter INT, revenue FLOAT); INSERT INTO broadband_revenue(quarter, revenue) VALUES (1, 2000000), (2, 2750000), (3, 3250000), (4, 3500000);<end_of_turn>\\n<start_of_turn>model\\nSELECT SUM(revenue) FROM (SELECT revenue FROM mobile_revenue WHERE quarter = 1 UNION SELECT revenue FROM broadband_revenue WHERE quarter = 1);\\n\\nExplanation: This query calculates the total revenue generated from mobile and broadband services in the first quarter of 2021. It does so by summing the revenue for the mobile_revenue and broadband_revenue tables, both where the quarter is 1. It uses a nested subquery to sum the revenue for each table.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the total number of renewable energy projects completed in the states of New South Wales and Victoria since 2015?\\n\\nContext: CREATE TABLE Renewable_Energy_Projects (id INT, project_name VARCHAR(30), state VARCHAR(20), completion_year INT); INSERT INTO Renewable_Energy_Projects (id, project_name, state, completion_year) VALUES (1, 'Solar Farm 1', 'New South Wales', 2016), (2, 'Wind Farm 2', 'New South Wales', 2017), (3, 'Geothermal Plant 3', 'New South Wales', 2018), (4, 'Hydroelectric Dam 4', 'New South Wales', 2019), (5, 'Biomass Powerstation 5', 'New South Wales', 2020), (6, 'Solar Farm 6', 'Victoria', 2016), (7, 'Wind Farm 7', 'Victoria', 2017), (8, 'Geothermal Plant 8', 'Victoria', 2018), (9, 'Hydroelectric Dam 9', 'Victoria', 2019), (10, 'Biomass Powerstation 10', 'Victoria', 2020);<end_of_turn>\\n<start_of_turn>model\\nSELECT COUNT(*) FROM Renewable_Energy_Projects WHERE state IN ('New South Wales', 'Victoria') AND completion_year >= 2015;\\n\\nExplanation: This SQL query counts the total number of renewable energy projects completed in the states of New South Wales and Victoria since 2015 by using the COUNT() function and filtering the results with the WHERE clause.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nDisplay the earliest recorded date in the 'ocean_temperature_data' table.\\n\\nContext: CREATE TABLE ocean_temperature_data (data_id INT, date DATE, temperature FLOAT);<end_of_turn>\\n<start_of_turn>model\\nSELECT MIN(date) FROM ocean_temperature_data;\\n\\nExplanation: This SQL query calculates the minimum value in the 'date' column of the 'ocean_temperature_data' table using the MIN() function, which represents the earliest recorded date.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhich renewable energy projects have the highest installed capacity?\\n\\nContext: CREATE TABLE renewable_energy (country VARCHAR(50), project_type VARCHAR(50), installed_capacity INT); INSERT INTO renewable_energy (country, project_type, installed_capacity) VALUES ('USA', 'Wind', 3000), ('USA', 'Solar', 5000), ('Mexico', 'Wind', 2000), ('Mexico', 'Solar', 4000);<end_of_turn>\\n<start_of_turn>model\\nSELECT project_type, MAX(installed_capacity) FROM renewable_energy;\\n\\nExplanation: This query returns the renewable energy project type with the highest installed capacity.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nDelete all renewable energy projects in 'Rural Region Y'\\n\\nContext: CREATE TABLE renewable_projects (project_id INT, project_name TEXT, location TEXT); INSERT INTO renewable_projects (project_id, project_name, location) VALUES (1, 'Solar Farm A', 'Rural Region Y'), (2, 'Wind Farm B', 'Rural Region X'), (3, 'Hydro Plant C', 'Rural Region Y');<end_of_turn>\\n<start_of_turn>model\\nDELETE FROM renewable_projects WHERE location = 'Rural Region Y';\\n\\nExplanation: This query deletes all records from the renewable_projects table where the location is 'Rural Region Y'.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the total quantity of recycled materials used?\\n\\nContext: CREATE TABLE materials (id INT, name VARCHAR(50), quantity INT); INSERT INTO materials (id, name, quantity) VALUES (1, 'organic cotton', 1000), (2, 'recycled polyester', 1500), (3, 'hemp', 500);<end_of_turn>\\n<start_of_turn>model\\nSELECT SUM(quantity) FROM materials WHERE name LIKE '%recycled%';\\n\\nExplanation: This query calculates the total quantity of recycled materials used by filtering the materials table for materials containing the word 'recycled' and then computing the sum of the quantity.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nList the number of electric vehicles adopted in each state in the US.\\n\\nContext: CREATE TABLE ElectricVehicleAdoptionState (Model VARCHAR(20), State VARCHAR(10), AdoptionRate FLOAT);<end_of_turn>\\n<start_of_turn>model\\nSELECT State, SUM(AdoptionRate) FROM ElectricVehicleAdoptionState WHERE State IS NOT NULL GROUP BY State;\\n\\nExplanation: The query filters the ElectricVehicleAdoptionState table to only show records where State is not null, groups the records by State, then uses the SUM function to calculate the total number of electric vehicles adopted in each state in the US.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nInsert records into the 'creative_applications' table for a new AI tool called 'MusicalMind' that generates music and has been evaluated by 4 judges\\n\\nContext: CREATE TABLE creative_applications (id INT PRIMARY KEY, application_name VARCHAR(50), art_form VARCHAR(20), num_judges INT, total_score INT);<end_of_turn>\\n<start_of_turn>model\\nINSERT INTO creative_applications (id, application_name, art_form, num_judges, total_score) VALUES (1, 'MusicalMind', 'music', 4, 0); UPDATE creative_applications SET total_score = total_score + (judge1_score + judge2_score + judge3_score + judge4_score) WHERE application_name = 'MusicalMind';\\n\\nExplanation: This SQL query inserts a record into the 'creative_applications' table for a new AI tool called 'MusicalMind' that generates music and has been evaluated by 4 judges. It then updates the 'total_score' for that record based on the scores provided by the judges.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the revenue growth of OTAs that offer virtual tours in the LATAM region compared to Q1 2021?\\n\\nContext: CREATE TABLE otas_virtual_tours (ota_id INT, ota_name TEXT, region TEXT, q1_2021 FLOAT, q1_2022 FLOAT); INSERT INTO otas_virtual_tours (ota_id, ota_name, region, q1_2021, q1_2022) VALUES (1, 'OTA C', 'LATAM', 200000, 220000), (2, 'OTA D', 'LATAM', 180000, 192000);<end_of_turn>\\n<start_of_turn>model\\nSELECT ota_name, (q1_2022 - q1_2021) \/ q1_2021 * 100 AS revenue_growth FROM otas_virtual_tours WHERE region = 'LATAM' AND q1_2022 > q1_2021;\\n\\nExplanation: The SQL query lists the revenue growth of OTAs that offer virtual tours in the LATAM region compared to Q1 2021. It calculates the revenue growth using the formula ((Q1 2022 revenue - Q1 2021 revenue) \/ Q1 2021 revenue) * 100 and filters OTAs based on the 'region' column. The WHERE clause filters only those OTAs that have a higher revenue in Q1 2022 than in Q1 2021.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nList all building permits issued for sustainable projects in the state of Oregon.\\n\\nContext: CREATE TABLE building_permits (id INT, project_name VARCHAR(50), project_type VARCHAR(20), state VARCHAR(20)); INSERT INTO building_permits (id, project_name, project_type, state) VALUES (1, 'Green Building', 'Sustainable', 'Oregon'); INSERT INTO building_permits (id, project_name, project_type, state) VALUES (2, 'Solar Farm', 'Sustainable', 'Oregon'); INSERT INTO building_permits (id, project_name, project_type, state) VALUES (3, 'Wind Farm', 'Sustainable', 'Oregon');<end_of_turn>\\n<start_of_turn>model\\nSELECT * FROM building_permits WHERE project_type = 'Sustainable' AND state = 'Oregon';\\n\\nExplanation: This query lists all building permits issued for sustainable projects in the state of Oregon by selecting all columns from the 'building_permits' table where 'project_type' is 'Sustainable' and 'state' is 'Oregon'.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the total landfill capacity (in m3) for each region as of Jan 1, 2020?\\n\\nContext: CREATE TABLE landfill_capacity (region VARCHAR(255), date DATE, capacity FLOAT); INSERT INTO landfill_capacity (region, date, capacity) VALUES ('RegionA', '2020-01-01', 120000.0), ('RegionA', '2019-01-01', 110000.0), ('RegionB', '2020-01-01', 150000.0), ('RegionB', '2019-01-01', 140000.0);<end_of_turn>\\n<start_of_turn>model\\nSELECT region, capacity FROM landfill_capacity WHERE date = '2020-01-01';\\n\\nExplanation: The SQL query filters the data by the date '2020-01-01' and returns the 'capacity' for each 'region'.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat percentage of museum visitors are from outside the city?\\n\\nContext: CREATE TABLE museum_visitors (id INT, visitor_location VARCHAR(50), museum_location VARCHAR(50)); INSERT INTO museum_visitors (id, visitor_location, museum_location) VALUES (1, 'City', 'New York'), (2, 'Suburb', 'New York'), (3, 'City', 'New York'), (4, 'Outside', 'New York'), (5, 'City', 'Los Angeles');<end_of_turn>\\n<start_of_turn>model\\nSELECT (COUNT(CASE WHEN visitor_location = 'Outside' THEN 1 ELSE NULL END) \/ COUNT(*)) * 100.0 AS percentage FROM museum_visitors WHERE museum_location = 'New York';\\n\\nExplanation: This query calculates the percentage of museum visitors who are from outside the city.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the average number of animals adopted by users in 'urban' areas?\\n\\nContext: CREATE TABLE users (user_id INT, name VARCHAR(50), address VARCHAR(50)); INSERT INTO users (user_id, name, address) VALUES (1, 'John Doe', 'rural'), (2, 'Jane Smith', 'urban'); CREATE TABLE adoptions (adoption_id INT, animal_id INT, user_id INT); INSERT INTO adoptions (adoption_id, animal_id, user_id) VALUES (1, 101, 1), (2, 102, 2); CREATE TABLE animals (animal_id INT, animal_name VARCHAR(50)); INSERT INTO animals (animal_id, animal_name) VALUES (101, 'Dog'), (102, 'Cat');<end_of_turn>\\n<start_of_turn>model\\nSELECT AVG(adoptions.adoption_id) FROM adoptions INNER JOIN users ON adoptions.user_id = users.user_id WHERE users.address = 'urban';\\n\\nExplanation: This query calculates the average number of animals adopted by users living in urban areas by joining the 'adoptions' and 'users' tables on the 'user_id' column, and then filtering for users with the address 'urban'. It then takes the average of the number of adoptions.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the average range of electric vehicles manufactured in South Korea?\\n\\nContext: CREATE TABLE EV_Specs (id INT, vehicle_model VARCHAR(255), manufacturing_country VARCHAR(255), range FLOAT); INSERT INTO EV_Specs (id, vehicle_model, manufacturing_country, range) VALUES (1, 'Hyundai Kona Electric', 'South Korea', 258.0); INSERT INTO EV_Specs (id, vehicle_model, manufacturing_country, range) VALUES (2, 'Kia Niro EV', 'South Korea', 239.0); INSERT INTO EV_Specs (id, vehicle_model, manufacturing_country, range) VALUES (3, 'Hyundai Ioniq Electric', 'South Korea', 170.0);<end_of_turn>\\n<start_of_turn>model\\nSELECT AVG(range) FROM EV_Specs WHERE manufacturing_country = 'South Korea';\\n\\nExplanation: This query calculates the average range of electric vehicles manufactured in South Korea by filtering the EV_Specs table based on the manufacturing_country column and then finding the average range.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the average movie duration for French films directed by women?\\n\\nContext: CREATE TABLE movies (id INT, title VARCHAR(255), duration INT, production_country VARCHAR(64), director_id INT, PRIMARY KEY (id), FOREIGN KEY (director_id) REFERENCES directors(id)); CREATE TABLE directors (id INT, name VARCHAR(255), gender VARCHAR(8), PRIMARY KEY (id)); INSERT INTO directors (id, name, gender) VALUES (1, 'Director1', 'Female'), (2, 'Director2', 'Male'); INSERT INTO movies (id, title, duration, production_country, director_id) VALUES (1, 'Movie1', 120, 'France', 1), (2, 'Movie2', 90, 'USA', 2), (3, 'Movie3', 105, 'France', 1);<end_of_turn>\\n<start_of_turn>model\\nSELECT AVG(movies.duration) FROM movies INNER JOIN directors ON movies.director_id = directors.id WHERE directors.gender = 'Female' AND movies.production_country = 'France';\\n\\nExplanation: This query calculates the average movie duration for French films directed by women. It joins the movies and directors tables on the director_id column. Then, it filters the rows to only include movies that were directed by women and produced in France. Finally, it uses the AVG function to calculate the average duration of the selected movies.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the average investment per project in the 'infrastructure_projects' table?\\n\\nContext: CREATE TABLE infrastructure_projects (id INT, project VARCHAR(50), investment FLOAT); INSERT INTO infrastructure_projects (id, project, investment) VALUES (1, 'Road Construction', 25000.0); INSERT INTO infrastructure_projects (id, project, investment) VALUES (2, 'Water Supply', 30000.0);<end_of_turn>\\n<start_of_turn>model\\nSELECT AVG(investment) FROM infrastructure_projects;\\n\\nExplanation: This SQL query calculates the average investment per project by finding the average value of the 'investment' column in the 'infrastructure_projects' table<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the number of flu vaccinations administered by age group in Quebec in Q2 2021?\\n\\nContext: CREATE TABLE flu_vaccinations_2 (id INT, patient_id INT, age_group TEXT, region TEXT, vaccine_date DATE); INSERT INTO flu_vaccinations_2 (id, patient_id, age_group, region, vaccine_date) VALUES (1, 123, '0-4', 'Quebec', '2021-04-05');<end_of_turn>\\n<start_of_turn>model\\nSELECT age_group, COUNT(*) as num_vaccinations FROM flu_vaccinations_2 WHERE region = 'Quebec' AND vaccine_date >= '2021-04-01' AND vaccine_date < '2021-07-01' GROUP BY age_group;\\n\\nExplanation: This query counts the number of flu vaccinations administered by age group in Quebec in Q2 2021.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nHow many polar bears were sighted in the 'polar_bear_sightings' table during the summer months (June, July, August) in the year 2019, broken down by species ('species' column in the 'polar_bear_sightings' table)?\\n\\nContext: CREATE TABLE polar_bear_sightings (id INT, date DATE, sighted BOOLEAN, species VARCHAR(50));<end_of_turn>\\n<start_of_turn>model\\nSELECT MONTH(date) AS month, species, COUNT(*) FROM polar_bear_sightings WHERE MONTH(date) IN (6, 7, 8) AND sighted = TRUE AND YEAR(date) = 2019 GROUP BY month, species;\\n\\nExplanation: The SQL query groups the data by month and species using the MONTH() and GROUP BY functions, and counts the number of polar bear sightings during the summer months and for each species using the COUNT() function.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhich genetic research projects have received funding in Germany?\\n\\nContext: CREATE TABLE genetic_research (id INT, project_name VARCHAR(50), location VARCHAR(50), funding_amount INT); INSERT INTO genetic_research (id, project_name, location, funding_amount) VALUES (1, 'Project C', 'Germany', 8000000); INSERT INTO genetic_research (id, project_name, location, funding_amount) VALUES (2, 'Project D', 'France', 9000000);<end_of_turn>\\n<start_of_turn>model\\nSELECT project_name, funding_amount FROM genetic_research WHERE location = 'Germany';\\n\\nExplanation: This query filters the genetic_research table for projects located in Germany and returns the project name and funding amount for those projects.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the average sales figure for the drug 'Vaxo' in the US?\\n\\nContext: CREATE TABLE sales_figures (drug_name TEXT, region TEXT, sales_value NUMERIC); INSERT INTO sales_figures (drug_name, region, sales_value) VALUES ('Vaxo', 'United States', 1500000), ('Curely', 'Canada', 1200000);<end_of_turn>\\n<start_of_turn>model\\nSELECT AVG(sales_value) FROM sales_figures WHERE drug_name = 'Vaxo' AND region = 'United States';\\n\\nExplanation: This SQL query calculates the average sales figure for the drug 'Vaxo' in the US by filtering the sales_figures table based on drug_name and region, and then calculating the average sales_value for the resulting subset.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nList all biotech startups with their associated funding.\\n\\nContext: CREATE SCHEMA if not exists biotech; USE biotech; CREATE TABLE if not exists startups (id INT PRIMARY KEY, name VARCHAR(255), country VARCHAR(255), funding DECIMAL(10,2)); INSERT INTO startups (id, name, country, funding) VALUES (1, 'StartupA', 'USA', 5000000.00), (2, 'StartupB', 'USA', 7000000.00), (3, 'StartupC', 'Canada', 3000000.00);<end_of_turn>\\n<start_of_turn>model\\nSELECT * FROM startups;\\n\\nExplanation: This query retrieves all records from the startups table, which contains information about biotech startups and their respective funding. It returns all columns (id, name, country, and funding) for all rows in the table.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nHow many farmers are involved in urban agriculture in France and Germany?\\n\\nContext: CREATE TABLE Farmers (FarmerID INT, Country VARCHAR(20), Specialty VARCHAR(20)); INSERT INTO Farmers (FarmerID, Country, Specialty) VALUES (1, 'France', 'Urban Agriculture'), (2, 'Germany', 'Urban Agriculture'), (3, 'USA', 'Conventional Agriculture');<end_of_turn>\\n<start_of_turn>model\\nSELECT COUNT(*) FROM Farmers WHERE Country IN ('France', 'Germany') AND Specialty = 'Urban Agriculture';\\n\\nExplanation: Count the number of farmers involved in urban agriculture in France and Germany with the 'COUNT' function, filtering for the specified countries and specialty.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat are the average preference scores for organic cosmetic products?\\n\\nContext: CREATE TABLE consumer_preferences (product_id INT, product_name VARCHAR(255), preference_score FLOAT, organic BOOLEAN);<end_of_turn>\\n<start_of_turn>model\\nSELECT AVG(preference_score) FROM consumer_preferences WHERE organic = TRUE;\\n\\nExplanation: The SQL query calculates the average preference score for organic cosmetic products by filtering the consumer_preferences table using the WHERE clause and selecting the average preference_score using the AVG function.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the average union membership duration for the 'collective_bargaining' union?\\n\\nContext: CREATE TABLE collective_bargaining (member_id INT, name VARCHAR(50), union_joined_date DATE); INSERT INTO collective_bargaining (member_id, name, union_joined_date) VALUES (5, 'Charlie Davis', '2017-02-14'), (6, 'Deborah Green', '2015-06-09');<end_of_turn>\\n<start_of_turn>model\\nSELECT AVG(DATEDIFF(CURDATE(), union_joined_date)) FROM collective_bargaining;\\n\\nExplanation: This query calculates the average duration of union membership for the 'collective_bargaining' union by subtracting the 'union_joined_date' from the current date for each member and then averaging the results.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhich ethical fashion brands have the lowest revenue per employee?\\n\\nContext: CREATE TABLE brand_data (brand VARCHAR(255), year INT, revenue FLOAT, employees INT); INSERT INTO brand_data (brand, year, revenue, employees) VALUES ('Brand A', 2019, 20000, 100), ('Brand A', 2020, 25000, 120), ('Brand B', 2019, 18000, 80), ('Brand B', 2020, 23000, 100), ('Brand C', 2019, 16000, 60), ('Brand C', 2020, 21000, 75);<end_of_turn>\\n<start_of_turn>model\\nSELECT brand, revenue\/employees as revenue_per_employee FROM brand_data ORDER BY revenue_per_employee ASC;\\n\\nExplanation: This query retrieves the ethical fashion brands with the lowest revenue per employee. It calculates the revenue per employee by dividing the revenue column by the employees column and orders the results in ascending order.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the current price of Quinoa in the local market?\\n\\nContext: CREATE TABLE markets (id INT PRIMARY KEY, crop VARCHAR(100), price FLOAT, date DATE); INSERT INTO markets (id, crop, price, date) VALUES (1, 'Quinoa', 8.0, '2023-03-14');<end_of_turn>\\n<start_of_turn>model\\nSELECT price FROM markets WHERE crop = 'Quinoa';\\n\\nExplanation: This query selects the price of Quinoa from the markets table.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the most common infectious disease in Africa?\\n\\nContext: CREATE TABLE infectious_disease (id INT, disease VARCHAR(50), cases INT, year INT, location VARCHAR(50)); INSERT INTO infectious_disease (id, disease, cases, year, location) VALUES (1, 'Malaria', 500, 2020, 'Africa'); INSERT INTO infectious_disease (id, disease, cases, year, location) VALUES (2, 'Tuberculosis', 300, 2020, 'Asia');<end_of_turn>\\n<start_of_turn>model\\nSELECT disease, MAX(cases) FROM infectious_disease WHERE location = 'Africa' GROUP BY disease;\\n\\nExplanation: This SQL query lists the most common infectious diseases in Africa by selecting the \"disease\" column and using the MAX() function on the \"cases\" column grouped by \"disease\" in the \"infectious_disease\" table and filtering by 'Africa' in the \"location\" column.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the total number of fish in each species?\\n\\nContext: CREATE TABLE FishSpecies (SpeciesID INT, SpeciesName VARCHAR(50), Quantity INT); INSERT INTO FishSpecies VALUES (1, 'Tilapia', 4000), (2, 'Salmon', 3000), (3, 'Trout', 2000);<end_of_turn>\\n<start_of_turn>model\\nSELECT SpeciesName, SUM(Quantity) FROM FishSpecies GROUP BY SpeciesName;\\n\\nExplanation: This query calculates the total number of fish in each species by grouping the FishSpecies table by the SpeciesName column and then summing the Quantity column for each group.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the number of concerts for artists who identify as female and are from Africa in 2025?\\n\\nContext: CREATE TABLE concert_events (event_id INT, artist_id INT, event_date DATE, event_location VARCHAR(255), attendance INT, revenue DECIMAL(10,2), country VARCHAR(50)); INSERT INTO concert_events (event_id, artist_id, event_date, event_location, attendance, revenue, country) VALUES (1, 1, '2025-01-01', 'NYC', 15000, 500000.00, 'South Africa'); CREATE TABLE artist_demographics (artist_id INT, artist_name VARCHAR(255), gender VARCHAR(50), ethnicity VARCHAR(50), country VARCHAR(50)); INSERT INTO artist_demographics (artist_id, artist_name, gender, ethnicity, country) VALUES (1, 'Amina Mohamed', 'female', 'African', 'South Africa');<end_of_turn>\\n<start_of_turn>model\\nSELECT COUNT(*) FROM concert_events ce JOIN artist_demographics ad ON ce.artist_id = ad.artist_id WHERE ad.gender = 'female' AND ad.ethnicity = 'African' AND ce.event_date BETWEEN '2025-01-01' AND '2025-12-31';\\n\\nExplanation: The query calculates the number of concerts for artists who identify as female and are from Africa in 2025. It joins the concert_events and artist_demographics tables on artist_id, filters for artists who identify as female and are from Africa, and concerts in 2025, and then counts the number of concerts for those artists.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nDisplay the percentage of customers who have made a purchase from a vegan brand.\\n\\nContext: CREATE TABLE customer_demographics (customer_id INT, vegan_brand_customer BOOLEAN); INSERT INTO customer_demographics (customer_id, vegan_brand_customer) VALUES (1, true), (2, false), (3, true), (4, false), (5, true), (6, false);<end_of_turn>\\n<start_of_turn>model\\nSELECT (COUNT(*) FILTER (WHERE vegan_brand_customer))::float \/ COUNT(*) as percentage FROM customer_demographics;\\n\\nExplanation: The SQL query calculates the percentage of customers who have made a purchase from a vegan brand. The FILTER clause is used to calculate the number of customers who have made a purchase from a vegan brand, and then the result is divided by the total number of customers to calculate the percentage.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nHow many professional development courses were completed by teachers in the \"Parkside\" school in 2020?\\n\\nContext: CREATE TABLE teachers (teacher_id INT, school VARCHAR(20), courses_completed INT, year INT); INSERT INTO teachers (teacher_id, school, courses_completed, year) VALUES (1, 'Parkside', 10, 2020), (2, 'Parkside', 12, 2020), (3, 'Westside', 8, 2020);<end_of_turn>\\n<start_of_turn>model\\nSELECT SUM(courses_completed) FROM teachers WHERE school = 'Parkside' AND year = 2020;\\n\\nExplanation: The SQL query calculates the total number of professional development courses completed by teachers in the \"Parkside\" school in 2020 by using the SUM function on the courses_completed column, and filtering the data by the school and year columns with the values 'Parkside' and 2020.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nList all pollution control initiatives in the North Atlantic and their corresponding funding amounts.\\n\\nContext: CREATE TABLE pollution_control_initiatives (id INT, initiative TEXT, region TEXT, funding FLOAT); INSERT INTO pollution_control_initiatives (id, initiative, region, funding) VALUES (1, 'Initiative X', 'North Atlantic', 500000), (2, 'Initiative Y', 'Arctic', 700000), (3, 'Initiative Z', 'North Atlantic', 600000);<end_of_turn>\\n<start_of_turn>model\\nSELECT initiative, funding FROM pollution_control_initiatives WHERE region = 'North Atlantic';\\n\\nExplanation: This query lists all pollution control initiatives in the North Atlantic and their corresponding funding amounts by selecting the initiative and funding columns, filtered by the region column with the value 'North Atlantic'.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nDelete records of Arctic wildlife sightings older than 2015\\n\\nContext: CREATE TABLE WildlifeSightings (id INT, species TEXT, year INT, location TEXT); INSERT INTO WildlifeSightings (id, species, year, location) VALUES (1, 'Polar Bear', 2020, 'Barrow'), (2, 'Polar Bear', 2015, 'Barrow'), (3, 'Walrus', 2019, 'Tromso'), (4, 'Walrus', 2014, 'Tromso'), (5, 'Narwhal', 2018, 'Pond Inlet');<end_of_turn>\\n<start_of_turn>model\\nDELETE FROM WildlifeSightings WHERE year < 2015;\\n\\nExplanation: Delete records of Arctic wildlife sightings older than 2015.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the average mission duration for SpaceX's Falcon Heavy?\\n\\nContext: CREATE TABLE Space_Missions (id INT PRIMARY KEY, name VARCHAR(100), spacecraft VARCHAR(100), launch_date DATE, mission_duration INT); INSERT INTO Space_Missions (id, name, spacecraft, launch_date, mission_duration) VALUES (1, 'Mission1', 'Falcon Heavy', '2020-01-01', 120), (2, 'Mission2', 'Falcon Heavy', '2021-02-02', 150);<end_of_turn>\\n<start_of_turn>model\\nSELECT AVG(mission_duration) FROM Space_Missions WHERE spacecraft = 'Falcon Heavy';\\n\\nExplanation: This query calculates the average mission_duration from the Space_Missions table, but only for rows where the spacecraft is 'Falcon Heavy'. It's a SELECT statement that uses an aggregate function to calculate a statistic on a column.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nInsert a new record of an incident type in the 'incident_types' table\\n\\nContext: CREATE TABLE incident_types (id INT, name VARCHAR, description TEXT);<end_of_turn>\\n<start_of_turn>model\\nINSERT INTO incident_types (id, name, description) VALUES (1, 'Phishing Attack', 'Attempt to obtain sensitive information by disguising as a trustworthy entity');\\n\\nExplanation: This query inserts a new record into the 'incident_types' table with the following details: id=1, name='Phishing Attack', description='Attempt to obtain sensitive information by disguising as a trustworthy entity'.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat are the names of all ingredients that are used in both cruelty-free certified products and products not certified as cruelty-free?\\n\\nContext: CREATE TABLE ingredients (ingredient_name VARCHAR(50)); INSERT INTO ingredients (ingredient_name) VALUES ('Water'), ('Mineral Powder'), ('Chemical X'), ('Chemical Y');<end_of_turn>\\n<start_of_turn>model\\nSELECT ingredients.ingredient_name FROM ingredients JOIN product_ingredients ON ingredients.ingredient_name = product_ingredients.ingredient WHERE product_ingredients.ingredient_source IN (SELECT ingredient_source FROM product_ingredients WHERE product_ingredients.product_name IN (SELECT products.product_name FROM products WHERE products.is_cruelty_free = true)) AND ingredients.ingredient_name IN (SELECT ingredient FROM product_ingredients WHERE product_ingredients.product_name NOT IN (SELECT products.product_name FROM products WHERE products.is_cruelty_free = true)) GROUP BY ingredients.ingredient_name HAVING COUNT(DISTINCT product_ingredients.ingredient_source) > 1;\\n\\nExplanation: This SQL query first joins the ingredients and product_ingredients tables on the ingredient_name column. Then it filters the results to only include rows where the ingredient_source is in the list of ingredient sources for cruelty-free certified products and the ingredient_name is in the list of ingredients used in products that are not certified as cruelty-free. This results in a list of all ingredients that are used in both cruelty-free certified products and products not certified as cruelty-free. The query then uses the GROUP BY clause to group the results by ingredient_name and filters the results to only include rows where the ingredient_name has more than one distinct ingredient_source. This results in a list of all ingredients that are used in both cruelty-free certified products and products not certified as cruelty-free.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the average cost of permits issued in the state of California in the construction industry?\\n\\nContext: CREATE TABLE permit (permit_id INT, state VARCHAR(50), industry VARCHAR(50), cost FLOAT); INSERT INTO permit (permit_id, state, industry, cost) VALUES (1, 'California', 'Construction', 5000);<end_of_turn>\\n<start_of_turn>model\\nSELECT AVG(cost) FROM permit WHERE state = 'California' AND industry = 'Construction';\\n\\nExplanation: This query calculates the average cost of permits in California's construction industry by filtering the 'permit' table for the relevant state and industry, then computing the average 'cost'.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat are the names and regions of all traditional artists?\\n\\nContext: CREATE TABLE Artists (Artist_ID INT PRIMARY KEY, Name VARCHAR(100), Country VARCHAR(50), Region VARCHAR(50)); INSERT INTO Artists (Artist_ID, Name, Country, Region) VALUES (1, 'Alice', 'Australia', 'Southern'); INSERT INTO Artists (Artist_ID, Name, Country, Region) VALUES (2, 'Bob', 'New Zealand', 'Southern');<end_of_turn>\\n<start_of_turn>model\\nSELECT Name, Region FROM Artists;\\n\\nExplanation: This query selects the Name and Region columns from the Artists table.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the total production cost of sustainable materials in Antarctica in the last year?\\n\\nContext: CREATE TABLE material_production_antarctica (material_id INT, material_name VARCHAR(50), production_date DATE, production_cost DECIMAL(10,2)); INSERT INTO material_production_antarctica (material_id, material_name, production_date, production_cost) VALUES (1, 'Organic Cotton', '2021-01-05', 100.00), (2, 'Recycled Polyester', '2020-12-10', 120.00), (3, 'Hemp', '2021-03-20', 150.00);<end_of_turn>\\n<start_of_turn>model\\nSELECT SUM(production_cost) FROM material_production_antarctica WHERE material_name IN ('Organic Cotton', 'Recycled Polyester', 'Hemp') AND production_date BETWEEN DATE_SUB(CURDATE(), INTERVAL 1 YEAR) AND CURDATE();\\n\\nExplanation: The SQL query calculates the total production cost of sustainable materials 'Organic Cotton', 'Recycled Polyester', and 'Hemp' in Antarctica in the last year by using the SUM function, the BETWEEN operator, and the DATE_SUB function.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the number of 'women-led community development initiatives' in 'rural India' that have been implemented since 2015?\\n\\nContext: CREATE TABLE initiatives (id INT, name TEXT, region TEXT, leader TEXT, start_date DATE); INSERT INTO initiatives (id, name, region, leader, start_date) VALUES (1, 'Initiative 1', 'rural India', 'Ms. Patel', '2015-01-01'), (2, 'Initiative 2', 'rural India', 'Mr. Patel', '2016-01-01'), (3, 'Initiative 3', 'urban India', 'Ms. Gupta', '2015-01-01');<end_of_turn>\\n<start_of_turn>model\\nSELECT COUNT(initiatives.id) FROM initiatives WHERE initiatives.region = 'rural India' AND initiatives.leader LIKE 'Ms.%' AND initiatives.start_date >= '2015-01-01';\\n\\nExplanation: This query counts the number of 'women-led community development initiatives' in 'rural India' that have been implemented since 2015. It does this by selecting all rows from the 'initiatives' table where the region is 'rural India', the leader's name starts with 'Ms.', and the start date is on or after '2015-01-01', and then counting the number of rows that are selected.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the minimum population for each indigenous community in the Arctic region and how many communities are there in total?\\n\\nContext: CREATE TABLE IndigenousCommunities (id INT, name VARCHAR(50), region VARCHAR(50), population INT); INSERT INTO IndigenousCommunities (id, name, region, population) VALUES (1, 'Community A', 'Arctic', 500); INSERT INTO IndigenousCommunities (id, name, region, population) VALUES (2, 'Community B', 'Arctic', 700); INSERT INTO IndigenousCommunities (id, name, region, population) VALUES (3, 'Community C', 'Antarctic', 800);<end_of_turn>\\n<start_of_turn>model\\nSELECT region, MIN(population), COUNT(name) FROM IndigenousCommunities GROUP BY region;\\n\\nExplanation: This query finds the minimum population for each indigenous community in the Arctic region and counts the total number of communities in the region.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nPresent the maximum depth of marine life research stations per ocean floor mapping project\\n\\nContext: CREATE TABLE ocean_floor_mapping_projects (project_id INT, project_name TEXT, station_id INT); INSERT INTO ocean_floor_mapping_projects (project_id, project_name, station_id) VALUES (1, 'Project 1', 1), (2, 'Project 2', 3), (3, 'Project 3', 2); CREATE TABLE marine_life_research_stations (station_id INT, station_name TEXT, depth FLOAT); INSERT INTO marine_life_research_stations (station_id, station_name, depth) VALUES (1, 'Station A', 2500.3), (2, 'Station B', 1800.5), (3, 'Station C', 3200.7);<end_of_turn>\\n<start_of_turn>model\\nSELECT p.project_name, MAX(m.depth) FROM ocean_floor_mapping_projects p JOIN marine_life_research_stations m ON p.station_id = m.station_id GROUP BY p.project_id;\\n\\nExplanation: We find the maximum depth of marine life research stations per ocean floor mapping project by joining the two tables on the station_id and grouping by project_id, while selecting the maximum depth for each group.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nDelete records in the sustainable_sources table with a source_id greater than 50\\n\\nContext: CREATE TABLE sustainable_sources (source_id INT, name VARCHAR(50), description TEXT, is_certified BOOLEAN);<end_of_turn>\\n<start_of_turn>model\\nDELETE FROM sustainable_sources WHERE source_id > 50;\\n\\nExplanation: This query deletes records from the sustainable_sources table where the source_id is greater than 50.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nHow many vehicles were maintained in the 'East Bay' facility in the first half of the year?\\n\\nContext: CREATE TABLE vehicle_maintenance_by_day (facility_location VARCHAR(50), day_of_year INT, num_vehicles INT); INSERT INTO vehicle_maintenance_by_day (facility_location, day_of_year, num_vehicles) VALUES ('East Bay', 1, 30), ('East Bay', 2, 35), ('East Bay', 3, 32);<end_of_turn>\\n<start_of_turn>model\\nSELECT SUM(num_vehicles) FROM vehicle_maintenance_by_day WHERE facility_location = 'East Bay' AND day_of_year <= 182;\\n\\nExplanation: This query calculates the total number of vehicles maintained in the 'East Bay' facility in the first half of the year by summing up the 'num_vehicles' column values for rows with 'facility_location' equal to 'East Bay' and 'day_of_year' less than or equal to 182.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the average age of patients in the 'rural_hospital_5' table?\\n\\nContext: CREATE TABLE rural_hospital_5 (patient_id INT, age INT, gender VARCHAR(10)); INSERT INTO rural_hospital_5 (patient_id, age, gender) VALUES (1, 70, 'Male'), (2, 45, 'Female'), (3, 55, 'Male'), (4, 60, 'Female'), (5, 35, 'Male'), (6, 50, 'Female'), (7, 65, 'Male');<end_of_turn>\\n<start_of_turn>model\\nSELECT AVG(age) FROM rural_hospital_5;\\n\\nExplanation: This query calculates the average age of patients in the 'rural_hospital_5' table by summing all ages and dividing by the count of patients.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhich carbon offset programs have the highest budget?\\n\\nContext: CREATE TABLE offset_programs (program_name VARCHAR(50), budget FLOAT, year INT);<end_of_turn>\\n<start_of_turn>model\\nSELECT program_name, budget FROM offset_programs WHERE year = 2022 ORDER BY budget DESC LIMIT 1;\\n\\nExplanation: This query retrieves the carbon offset program with the highest budget in 2022 by filtering the records based on year and sorting them in descending order by budget.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nHow many military innovation projects were initiated by the African Union between 2015 and 2020, inclusive?\\n\\nContext: CREATE TABLE military_innovation(id INT, organization VARCHAR(255), project VARCHAR(255), start_year INT); INSERT INTO military_innovation(id, organization, project, start_year) VALUES (1, 'African Union', 'Drones for Peacekeeping', 2016), (2, 'ECOWAS', 'Cybersecurity Training', 2018), (3, 'AU', 'AI in Border Control', 2020);<end_of_turn>\\n<start_of_turn>model\\nSELECT COUNT(*) FROM military_innovation WHERE organization = 'African Union' AND start_year BETWEEN 2015 AND 2020;\\n\\nExplanation: This query counts the number of military innovation projects initiated by the African Union between 2015 and 2020, inclusive.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nAdd a new column year to the funding table and update values\\n\\nContext: CREATE TABLE funding(id INT, organization VARCHAR(255), amount FLOAT, year INT);<end_of_turn>\\n<start_of_turn>model\\nALTER TABLE funding ADD COLUMN year INT;\\n\\nExplanation: A new column year is added to the funding table with the data type INT.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the total amount of resources extracted per month and year, and the resource type for South African mining sites?\\n\\nContext: CREATE TABLE Resources (ResourceID INT, ResourceType VARCHAR(10), ExtractionDate DATE, Quantity INT, SiteID INT, Country VARCHAR(20));<end_of_turn>\\n<start_of_turn>model\\nSELECT EXTRACT(MONTH FROM ExtractionDate) AS Month, EXTRACT(YEAR FROM ExtractionDate) AS Year, ResourceType, SUM(Quantity) FROM Resources WHERE Country = 'South Africa' GROUP BY EXTRACT(MONTH FROM ExtractionDate), EXTRACT(YEAR FROM ExtractionDate), ResourceType;\\n\\nExplanation: The query filters the Resources table, groups the quantities by month, year, and resource type, and calculates the sum of resources extracted for South African mining sites.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the minimum climate finance provided by a single country for climate communication projects in the Latin America and Caribbean region since 2016?\\n\\nContext: CREATE TABLE climate_finance_projects (country VARCHAR(50), finance_amount NUMERIC(10, 2), project_type VARCHAR(50), year INT); INSERT INTO climate_finance_projects (country, finance_amount, project_type, year) VALUES ('Brazil', 50000, 'climate communication', 2016), ('Argentina', 40000, 'climate communication', 2017), ('Colombia', 30000, 'climate communication', 2016);<end_of_turn>\\n<start_of_turn>model\\nSELECT country, MIN(finance_amount) FROM climate_finance_projects WHERE project_type = 'climate communication' AND year >= 2016 GROUP BY country;\\n\\nExplanation: The SQL query calculates the minimum climate finance provided by a single country for climate communication projects in the Latin America and Caribbean region since 2016. It uses the MIN function to calculate the minimum finance amount, the GROUP BY clause to group the results by country, and the WHERE clause to filter the results for climate communication projects and the Latin America and Caribbean region since 2016.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat was the percentage of donations received from each state in H1 2021?\\n\\nContext: CREATE TABLE Donors (DonorID INT, DonationDate DATE, Amount DECIMAL(10,2), State TEXT); INSERT INTO Donors (DonorID, DonationDate, Amount, State) VALUES (1, '2021-01-15', 50.00, 'California'), (2, '2021-02-01', 100.00, 'Texas'), (3, '2021-06-10', 25.00, 'Florida'), (4, '2021-04-20', 75.00, 'California');<end_of_turn>\\n<start_of_turn>model\\nSELECT State, SUM(Amount) as 'Total Donations', (SUM(Amount) \/ (SELECT SUM(Amount) FROM Donors WHERE DonationDate BETWEEN '2021-01-01' AND '2021-06-30') * 100) as 'Percentage of Donations' FROM Donors WHERE DonationDate BETWEEN '2021-01-01' AND '2021-06-30' GROUP BY State;\\n\\nExplanation: This query calculates the percentage of donations received from each state in H1 2021 by summing the Amount field for each unique state in the Donors table where DonationDate is in H1 2021, dividing by the total sum of Amount for all states in H1 2021, and multiplying by 100, grouping by State.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nDelete all records from the sharks table where the weight is greater than 1000.0\\n\\nContext: CREATE TABLE sharks (id INT, species VARCHAR(255), weight FLOAT); INSERT INTO sharks (id, species, weight) VALUES (1, 'Great White', 2000.0), (2, 'Hammerhead', 150.0);<end_of_turn>\\n<start_of_turn>model\\nDELETE FROM sharks WHERE weight > 1000.0;\\n\\nExplanation: This SQL query deletes all records from the sharks table where the weight is greater than 1000.0 by using the DELETE statement and specifying the condition for the rows to be deleted in the WHERE clause.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nList the number of wind farms in Canada, Brazil, and Argentina, as of 2020.\\n\\nContext: CREATE TABLE wind_farms (country VARCHAR(50), operational BOOLEAN, year INT); INSERT INTO wind_farms (country, operational, year) VALUES ('Canada', true, 2020), ('Brazil', true, 2020), ('Argentina', true, 2020), ('Mexico', false, 2020);<end_of_turn>\\n<start_of_turn>model\\nSELECT country, COUNT(*) FROM wind_farms WHERE country IN ('Canada', 'Brazil', 'Argentina') AND operational = true GROUP BY country;\\n\\nExplanation: Filter the data for the wind farms in the specified countries and operational status, and then count the number of rows for each country.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the market share of each OTA in terms of total bookings for all hotels?\\n\\nContext: CREATE TABLE hotels (hotel_id INT, hotel_name TEXT, country TEXT);CREATE TABLE ota_bookings (booking_id INT, hotel_id INT, ota_name TEXT, revenue FLOAT); INSERT INTO hotels (hotel_id, hotel_name, country) VALUES (1, 'Hotel X', 'USA'), (2, 'Hotel Y', 'Canada'); INSERT INTO ota_bookings (booking_id, hotel_id, ota_name, revenue) VALUES (1, 1, 'OTA1', 500), (2, 1, 'OTA2', 700), (3, 2, 'OTA1', 800), (4, 2, 'OTA3', 600);<end_of_turn>\\n<start_of_turn>model\\nSELECT ota.ota_name, SUM(ob.revenue) as total_revenue, (SUM(ob.revenue) \/ (SELECT SUM(ob2.revenue) FROM ota_bookings ob2)) as market_share FROM hotels h INNER JOIN ota_bookings ob ON h.hotel_id = ob.hotel_id INNER JOIN (SELECT DISTINCT hotel_id, ota_name FROM ota_bookings) ota ON h.hotel_id = ota.hotel_id GROUP BY ota.ota_name;\\n\\nExplanation: This SQL query first performs an INNER JOIN between the hotels and ota_bookings tables based on the hotel_id. It then performs another INNER JOIN to get the distinct ota_names for each hotel. Lastly, it calculates the total revenue generated by each OTA and their market share in terms of total bookings for all hotels.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the total number of green building certifications issued in 'City K' for each year?\\n\\nContext: CREATE TABLE GreenBuildings (BuildingID INT, CertificationYear INT, City VARCHAR(255)); INSERT INTO GreenBuildings (BuildingID, CertificationYear, City) VALUES (1, 2019, 'City K'), (2, 2020, 'City K');<end_of_turn>\\n<start_of_turn>model\\nSELECT CertificationYear, COUNT(*) FROM GreenBuildings WHERE City = 'City K' GROUP BY CertificationYear;\\n\\nExplanation: This query calculates the total number of green building certifications issued in 'City K' for each year by counting all records in the GreenBuildings table where the City is 'City K', and grouping the results by CertificationYear.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhich districts have seen a decrease in lifelong learning program enrollment in the last 5 years?\\n\\nContext: CREATE TABLE lifelong_learning (student_id INT, district_id INT, year INT, enrolled BOOLEAN); INSERT INTO lifelong_learning (student_id, district_id, year, enrolled) VALUES (1, 1001, 2016, true), (2, 1001, 2017, true), (3, 1001, 2018, false), (4, 1001, 2019, false), (5, 1001, 2020, true), (6, 1002, 2016, true), (7, 1002, 2017, true), (8, 1002, 2018, false), (9, 1002, 2019, false), (10, 1002, 2020, false);<end_of_turn>\\n<start_of_turn>model\\nSELECT district_id, year, CASE WHEN LAG(enrolled) OVER (PARTITION BY district_id ORDER BY year) = true AND enrolled = false THEN 1 ELSE 0 END as enrollment_decreased FROM lifelong_learning WHERE year BETWEEN 2016 AND 2020 GROUP BY district_id, year HAVING SUM(enrollment_decreased) > 0;\\n\\nExplanation: The query checks if there is a decrease in enrollment in lifelong learning programs for each district in the last 5 years. It then groups the data by district_id and year and returns the districts where there is at least one decrease in enrollment in lifelong learning programs.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhich country has the highest percentage of fair trade factories?\\n\\nContext: CREATE TABLE factories_by_country(factory_id INT, country VARCHAR(20), fair_trade BOOLEAN); INSERT INTO factories_by_country(factory_id, country, fair_trade) VALUES(1, 'Brazil', true), (2, 'India', true), (3, 'China', false), (4, 'Indonesia', true);<end_of_turn>\\n<start_of_turn>model\\nSELECT country, COUNT(*) * 100.0 \/ (SELECT COUNT(*) FROM factories_by_country WHERE country = f.country) AS percentage FROM factories_by_country f WHERE fair_trade = true GROUP BY country ORDER BY percentage DESC LIMIT 1;\\n\\nExplanation: This query calculates the percentage of fair trade factories for each country in the factories_by_country table and retrieves the country with the highest percentage by using a correlated subquery and a group by clause.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nList all public services, their budget allocations, and corresponding citizen feedback ratings, if any.\\n\\nContext: CREATE TABLE public_services (id INT PRIMARY KEY, service VARCHAR(255), location VARCHAR(255), budget DECIMAL(10, 2), provider VARCHAR(255)); CREATE TABLE citizen_feedback (id INT PRIMARY KEY, city VARCHAR(255), age INT, feedback TEXT); CREATE TABLE public_feedback (id INT PRIMARY KEY, city VARCHAR(255), service VARCHAR(255), rating INT, comment TEXT);<end_of_turn>\\n<start_of_turn>model\\nSELECT p.service, p.budget, pf.rating FROM public_services p LEFT JOIN public_feedback pf ON p.service = pf.service;\\n\\nExplanation: 1. Select the service and budget columns from the 'public_services' table and the rating column from the 'public_feedback' table. 2. Left join the 'public_services' table with the 'public_feedback' table on the condition: public_services.service = public_feedback.service. 3. Display all records from 'public_services', matching records from 'public_feedback' and null values where there is no match.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nHow many news articles were published in the \"National\" category with a word count greater than 800?\\n\\nContext: CREATE TABLE Articles (ArticleID INT, Title VARCHAR(100), Category VARCHAR(50), WordCount INT, PublishedDate DATE);<end_of_turn>\\n<start_of_turn>model\\nSELECT COUNT(*) FROM Articles WHERE Category = 'National' AND WordCount > 800;\\n\\nExplanation: We count the number of news articles in the \"National\" category with a word count greater than 800 by using the COUNT function on the ArticleID column, filtering the data by Category and WordCount columns.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nHow many products does each supplier supply?\\n\\nContext: CREATE TABLE products (product_id INT, product_name VARCHAR(50), supplier_id INT); CREATE TABLE suppliers (supplier_id INT, supplier_name VARCHAR(50)); INSERT INTO products (product_id, product_name, supplier_id) VALUES (1, 'T-Shirt', 1), (2, 'Jeans', 2), (3, 'Shoes', 3), (4, 'Dress', 1), (5, 'Bag', 2); INSERT INTO suppliers (supplier_id, supplier_name) VALUES (1, 'GreenEarth'), (2, 'EcoBlue'), (3, 'CircularWear');<end_of_turn>\\n<start_of_turn>model\\nSELECT suppliers.supplier_name, COUNT(products.product_id) FROM suppliers LEFT JOIN products ON suppliers.supplier_id = products.supplier_id GROUP BY suppliers.supplier_name;\\n\\nExplanation: The SQL query lists the number of products supplied by each supplier by performing a LEFT JOIN between the 'suppliers' and 'products' tables on the 'supplier_id' column, then grouping the records by the 'supplier_name' column and calculating the count of product_id using the COUNT function.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhich climate mitigation projects have the same funding amount as the project with the highest funding in South America?\\n\\nContext: CREATE TABLE climate_mitigation_projects ( id INT, name VARCHAR(255), location VARCHAR(255), funding FLOAT ); INSERT INTO climate_mitigation_projects (id, name, location, funding) VALUES (1, 'Project F', 'South America', 8000000); INSERT INTO climate_mitigation_projects (id, name, location, funding) VALUES (2, 'Project G', 'South America', 5000000);<end_of_turn>\\n<start_of_turn>model\\nSELECT * FROM climate_mitigation_projects WHERE funding = (SELECT MAX(funding) FROM climate_mitigation_projects WHERE location = 'South America');\\n\\nExplanation: This query selects all columns from the 'climate_mitigation_projects' table where 'funding' is equal to the maximum 'funding' value in the same table for 'South America'.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the total number of healthcare workers in each rural area?\\n\\nContext: CREATE TABLE rural_areas (id INT, name TEXT, num_workers INT, avg_age FLOAT); INSERT INTO rural_areas (id, name, num_workers, avg_age) VALUES (1, 'Rural Area 1', 100, 49.5), (2, 'Rural Area 2', 125, 47.8); CREATE TABLE rural_clinics (id INT, name TEXT, location TEXT, num_workers INT, avg_age FLOAT); INSERT INTO rural_clinics (id, name, location, num_workers, avg_age) VALUES (1, 'Rural Clinic A', 'Rural Area 1', 10, 45.3), (2, 'Rural Clinic B', 'Rural Area 2', 15, 42.8);<end_of_turn>\\n<start_of_turn>model\\nSELECT r.name, SUM(rural_clinics.num_workers + rural_areas.num_workers) FROM rural_areas r JOIN rural_clinics ON r.name = rural_clinics.location GROUP BY r.name;\\n\\nExplanation: This query joins the 'rural_areas' and 'rural_clinics' tables on the 'location' column and then calculates the sum of 'num_workers' for each rural area using the SUM() function, providing the total number of healthcare workers in each rural area.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nShow the number of active players in each game in the last month?\\n\\nContext: CREATE TABLE game_sessions (id INT, player_id INT, game_id INT, session_date DATE); INSERT INTO game_sessions (id, player_id, game_id, session_date) VALUES (1, 1, 1, '2022-03-01'), (2, 2, 2, '2022-03-15'), (3, 1, 3, '2022-04-01'); CREATE TABLE games (id INT, game_name VARCHAR(100)); INSERT INTO games (id, game_name) VALUES (1, 'Rocket League'), (2, 'Fortnite'), (3, 'Apex Legends');<end_of_turn>\\n<start_of_turn>model\\nSELECT g.game_name, COUNT(DISTINCT gs.player_id) as active_players FROM game_sessions gs JOIN games g ON gs.game_id = g.id WHERE gs.session_date >= (CURRENT_DATE - INTERVAL '1 month') GROUP BY g.game_name;\\n\\nExplanation: Joining the game_sessions and games tables, then filtering the records based on the session_date. Finally, summarizing the number of active players in each game in the last month.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the number of unique severities in the 'vulnerabilities' table?\\n\\nContext: CREATE TABLE schema1.vulnerabilities (id INT, name VARCHAR(255), severity VARCHAR(50), description TEXT, date_discovered DATE, last_observed DATE); INSERT INTO schema1.vulnerabilities (id, name, severity, description, date_discovered, last_observed) VALUES (1, 'SQL Injection', 'Critical', 'Allows unauthorized access', '2021-01-01', '2021-02-01');<end_of_turn>\\n<start_of_turn>model\\nSELECT COUNT(DISTINCT severity) FROM schema1.vulnerabilities;\\n\\nExplanation: This query uses the DISTINCT keyword with COUNT() to count the number of unique severity values in the 'severities' column.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the total number of digital assets issued by companies based in the US, and how many of those are smart contracts?\\n\\nContext: CREATE TABLE Companies (company_id INT, company_name VARCHAR(255), company_country VARCHAR(255)); INSERT INTO Companies (company_id, company_name, company_country) VALUES (1, 'Ethereum Foundation', 'Switzerland'), (2, 'ConsenSys', 'US'), (3, 'Cardano Foundation', 'Switzerland'); CREATE TABLE DigitalAssets (asset_id INT, asset_name VARCHAR(255), company_id INT, is_smart_contract BOOLEAN); INSERT INTO DigitalAssets (asset_id, asset_name, company_id, is_smart_contract) VALUES (1, 'ETH', 2, false), (2, 'DAI', 2, true), (3, 'ADA', 3, false);<end_of_turn>\\n<start_of_turn>model\\nSELECT SUM(CASE WHEN DigitalAssets.company_country = 'US' THEN 1 ELSE 0 END) AS total_us_assets, SUM(CASE WHEN DigitalAssets.company_country = 'US' AND DigitalAssets.is_smart_contract = true THEN 1 ELSE 0 END) AS us_smart_contracts FROM DigitalAssets INNER JOIN Companies ON DigitalAssets.company_id = Companies.company_id;\\n\\nExplanation: 1. Inner join Companies and DigitalAssets tables on company_id. 2. Summarize total US assets and US smart contracts using SUM and CASE WHEN statements. 3. CASE WHEN statement checks if the company is based in the US and if the asset is a smart contract. 4. SUM function counts the number of records fulfilling the conditions.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the maximum depth of any point in the Indian Ocean?\\n\\nContext: CREATE TABLE ocean_floors (id INT, region TEXT, point TEXT, depth INT); INSERT INTO ocean_floors (id, region, point, depth) VALUES (1, 'Indian Ocean', 'Java Trench', 8075), (2, 'Indian Ocean', 'Sunda Trench', 7450);<end_of_turn>\\n<start_of_turn>model\\nSELECT MAX(depth) FROM ocean_floors WHERE region = 'Indian Ocean';\\n\\nExplanation: This query finds the maximum depth in the 'ocean_floors' table for the 'Indian Ocean' region.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the total sales revenue for each country, ordered by the total sales revenue in descending order?\\n\\nContext: CREATE TABLE Countries (CountryID INT, CountryName VARCHAR(255));CREATE TABLE Garments (GarmentID INT, CountryID INT, SalePrice DECIMAL(10,2));CREATE TABLE Sales (SaleID INT, GarmentID INT, SaleDate DATE, Quantity INT);<end_of_turn>\\n<start_of_turn>model\\nSELECT c.CountryName, SUM(g.SalePrice * s.Quantity) AS TotalRevenue FROM Countries c JOIN Garments g ON c.CountryID = g.CountryID JOIN Sales s ON g.GarmentID = s.GarmentID GROUP BY c.CountryName ORDER BY TotalRevenue DESC;\\n\\nExplanation: This query calculates the total sales revenue for each country by joining the Countries, Garments, and Sales tables on CountryID, GarmentID, and GarmentID, respectively. It then groups the results by CountryName and calculates the total sales revenue using the SUM function. Finally, it orders the results by the total sales revenue in descending order.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nFind the total number of publications in the 'Journal of Engineering' and 'Journal of Natural Sciences'\\n\\nContext: CREATE TABLE publications (id INT, title VARCHAR(50), journal VARCHAR(30)); INSERT INTO publications (id, title, journal) VALUES (1, 'A Study on Renewable Energy', 'Journal of Engineering'), (2, 'The Impact of Climate Change', 'Journal of Natural Sciences');<end_of_turn>\\n<start_of_turn>model\\nSELECT SUM(CASE WHEN journal IN ('Journal of Engineering', 'Journal of Natural Sciences') THEN 1 ELSE 0 END) FROM publications;\\n\\nExplanation: This query calculates the total number of publications in the 'Journal of Engineering' and 'Journal of Natural Sciences' by summing 1 for each row where the 'journal' is either 'Journal of Engineering' or 'Journal of Natural Sciences'.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the average transaction value (in USD) for Ethereum smart contracts?\\n\\nContext: CREATE TABLE ethereum_smart_contracts (contract_address VARCHAR(42), transaction_value DECIMAL(18,2));<end_of_turn>\\n<start_of_turn>model\\nSELECT AVG(transaction_value) FROM ethereum_smart_contracts;\\n\\nExplanation: The SQL query calculates the average value of all transactions in the 'ethereum_smart_contracts' table.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nHow much water was saved by conservation initiatives in the United States in the year 2019?\\n\\nContext: CREATE TABLE water_conservation_initiatives (id INT, country VARCHAR(50), year INT, amount_saved FLOAT);<end_of_turn>\\n<start_of_turn>model\\nSELECT SUM(amount_saved) FROM water_conservation_initiatives WHERE country = 'United States' AND year = 2019;\\n\\nExplanation: This query calculates the total amount of water saved by conservation initiatives in the United States in the year 2019. It does so by summing up the amount_saved values in the water_conservation_initiatives table for the United States and 2019.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nUpdate ticket sales records in the \"ticket_sales\" table for events in New York\\n\\nContext: CREATE TABLE ticket_sales (id INT PRIMARY KEY, team VARCHAR(50), event_date DATE, tickets_sold INT, total_sales DECIMAL(10,2));<end_of_turn>\\n<start_of_turn>model\\nUPDATE ticket_sales SET total_sales = total_sales * 1.10 WHERE event_date BETWEEN '2022-01-01' AND '2022-12-31' AND team = 'Giants';\\n\\nExplanation: * The UPDATE statement is used to modify records in the \"ticket_sales\" table.* The WHERE clause filters records based on the event_date and team, and the SET clause increments the total_sales by 10% for those records.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the total volume of packages shipped to the Asia-Pacific region from our Los Angeles warehouse in the last quarter?\\n\\nContext: CREATE TABLE Warehouse (id INT, name VARCHAR(50), location VARCHAR(50)); INSERT INTO Warehouse (id, name, location) VALUES (1, 'Los Angeles', 'USA'); CREATE TABLE Shipment (id INT, warehouse_id INT, region VARCHAR(50), volume INT); INSERT INTO Shipment (id, warehouse_id, region, volume) VALUES (1, 1, 'Asia-Pacific', 100), (2, 1, 'Asia-Pacific', 150), (3, 1, 'Europe', 120);<end_of_turn>\\n<start_of_turn>model\\nSELECT SUM(volume) FROM Shipment WHERE warehouse_id = (SELECT id FROM Warehouse WHERE location = 'Los Angeles') AND region = 'Asia-Pacific' AND shipment_date BETWEEN DATE_SUB(CURDATE(), INTERVAL 3 MONTH) AND CURDATE();\\n\\nExplanation: This query calculates the total volume of packages shipped to the Asia-Pacific region from the Los Angeles warehouse in the last quarter. It does this by summing the volume column in the Shipment table where the warehouse_id matches the id of the Los Angeles warehouse and the region is Asia-Pacific. It also filters the results to only include shipments made in the last quarter.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nDelete the record of a brand sourcing recycled polyester from a country in 2019.\\n\\nContext: CREATE TABLE recycled_polyester (brand VARCHAR(50), country VARCHAR(50), year INT); INSERT INTO recycled_polyester (brand, country, year) VALUES ('BrandA', 'China', 2020), ('BrandB', 'Taiwan', 2020), ('BrandC', 'Japan', 2019);<end_of_turn>\\n<start_of_turn>model\\nDELETE FROM recycled_polyester WHERE brand = 'BrandC' AND country = 'Japan' AND year = 2019;\\n\\nExplanation: The SQL query deletes the record of a brand sourcing recycled polyester from a country in 2019 by removing the row where 'brand' equals 'BrandC', 'country' equals 'Japan', and 'year' equals 2019.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nHow many reported crimes involved theft in 'parkside' during the last week of October 2020?\\n\\nContext: CREATE TABLE crimes (id INT, type VARCHAR(20), location VARCHAR(20), report_date DATE); INSERT INTO crimes (id, type, location, report_date) VALUES (1, 'theft', 'parkside', '2020-10-25');<end_of_turn>\\n<start_of_turn>model\\nSELECT COUNT(*) FROM crimes WHERE type = 'theft' AND location = 'parkside' AND report_date BETWEEN '2020-10-25' AND '2020-10-31';\\n\\nExplanation: The SQL query determines the number of reported crimes involving theft in 'parkside' during the last week of October 2020 by filtering the 'crimes' table by crime type, location, and date range and then counting the number of records using the COUNT() function.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhich artists and their artworks have the highest average ratings in the African region?\\n\\nContext: CREATE TABLE Artists (ArtistID INT, ArtistName TEXT, Region TEXT); INSERT INTO Artists (ArtistID, ArtistName, Region) VALUES (1, 'Vincent van Gogh', 'Europe'); INSERT INTO Artists (ArtistID, ArtistName, Region) VALUES (2, 'Pablo Picasso', 'Europe'); CREATE TABLE Artworks (ArtworkID INT, ArtworkName TEXT, ArtistID INT, AverageRating DECIMAL(3,2)); INSERT INTO Artworks (ArtworkID, ArtworkName, ArtistID, AverageRating) VALUES (1, 'Starry Night', 1, 4.5); INSERT INTO Artworks (ArtworkID, ArtworkName, ArtistID, AverageRating) VALUES (2, 'Guernica', 2, 4.3);<end_of_turn>\\n<start_of_turn>model\\nSELECT A.ArtistName, AVG(AverageRating) as AvgRating FROM Artworks A JOIN Artists B ON A.ArtistID = B.ArtistID WHERE B.Region = 'Africa' GROUP BY A.ArtistName;\\n\\nExplanation: This SQL query calculates the average rating of artworks for artists from the African region. It first joins the Artworks table with the Artists table based on the ArtistID. Then, it filters the records for artists from the African region. Finally, it calculates the average rating for each artist, grouped by their names.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nDelete all records from the table \"soil_moisture\" where the \"moisture\" is less than 30\\n\\nContext: CREATE TABLE soil_moisture (id INT PRIMARY KEY, farm_id INT, moisture INT, date DATE);<end_of_turn>\\n<start_of_turn>model\\nDELETE FROM soil_moisture WHERE moisture < 30;\\n\\nExplanation: This query deletes all records from the \"soil_moisture\" table where the \"moisture\" is less than 30.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nHow many graduate students are there in each department?\\n\\nContext: CREATE TABLE students (id INT, department VARCHAR(255)); INSERT INTO students (id, department) VALUES (1, 'Computer Science'), (2, 'Physics'), (3, 'Computer Science'), (4, 'Mathematics'), (5, 'Physics');<end_of_turn>\\n<start_of_turn>model\\nSELECT department, COUNT(*) FROM students GROUP BY department;\\n\\nExplanation: This SQL query counts the number of graduate students in each department. It does this by using the COUNT function with no arguments and the GROUP BY clause on the department column.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nCreate a table named 'ethical_ai_research'\\n\\nContext: CREATE TABLE ethical_ai_research (id INT PRIMARY KEY, title VARCHAR(255), abstract TEXT, author_name VARCHAR(255), author_affiliation VARCHAR(255), publication_date DATETIME);<end_of_turn>\\n<start_of_turn>model\\nCREATE TABLE ethical_ai_research (id INT PRIMARY KEY, title VARCHAR(255), abstract TEXT, author_name VARCHAR(255), author_affiliation VARCHAR(255), publication_date DATETIME);\\n\\nExplanation: A new table 'ethical_ai_research' is being created with columns: id, title, abstract, author_name, author_affiliation, and publication_date. The id column is the primary key.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhich countries have the most ethical AI initiatives, and how many of them are focused on social good?\\n\\nContext: CREATE SCHEMA if not exists ai_stats; CREATE TABLE if not exists ai_stats.ethical_initiatives (country VARCHAR(255), initiatives INT, focused_on_social_good BOOLEAN); INSERT INTO ai_stats.ethical_initiatives (country, initiatives, focused_on_social_good) VALUES ('USA', 100, true), ('Canada', 50, false), ('Germany', 75, true), ('South Africa', 25, true);<end_of_turn>\\n<start_of_turn>model\\nSELECT country, SUM(focused_on_social_good) as focused_on_social_good, MAX(initiatives) as initiatives FROM ai_stats.ethical_initiatives GROUP BY country ORDER BY initiatives DESC;\\n\\nExplanation: The SQL query finds the countries with the most ethical AI initiatives by grouping the ethical_initiatives table by country and calculating the sum of the focused_on_social_good column and the maximum initiatives for each group. The result is a list of countries sorted by the maximum number of initiatives, with the number of initiatives focused on social good also listed.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the number of AI safety incidents recorded for each region in the 'safety_incidents' table, grouped by incident type?\\n\\nContext: CREATE TABLE safety_incidents (region VARCHAR(20), incident_type VARCHAR(20), incident_count INT); INSERT INTO safety_incidents (region, incident_type, incident_count) VALUES ('North America', 'autonomous_vehicle', 3), ('North America', 'AI_assistant', 1), ('Europe', 'autonomous_vehicle', 2);<end_of_turn>\\n<start_of_turn>model\\nSELECT region, incident_type, SUM(incident_count) as total_incidents FROM safety_incidents GROUP BY region, incident_type;\\n\\nExplanation: The SQL query calculates the number of AI safety incidents for each region in the 'safety_incidents' table, grouped by incident type. It does this by grouping the table by the 'region' and 'incident_type' columns and calculating the sum of the 'incident_count' values for each group. This gives the total number of incidents for each combination of region and incident type.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nHow many visitors engaged with digital content in Tokyo?\\n\\nContext: CREATE TABLE VisitorEngagement (id INT, city VARCHAR(50), visitor_count INT, digital_content BOOLEAN);<end_of_turn>\\n<start_of_turn>model\\nSELECT SUM(visitor_count) FROM VisitorEngagement WHERE city = 'Tokyo' AND digital_content = TRUE;\\n\\nExplanation: This SQL query sums (SUM) the number of visitors (visitor_count) from the \"VisitorEngagement\" table who engaged with digital content in Tokyo.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nCount the number of female and male employees in each department\\n\\nContext: CREATE TABLE Departments (department_id INT, department_name VARCHAR(50), manufacturer_id INT); INSERT INTO Departments (department_id, department_name, manufacturer_id) VALUES (1, 'Ethical Manufacturing', 1), (2, 'Circular Economy', 2), (3, 'Workforce Development', 3); CREATE TABLE Employees (employee_id INT, employee_name VARCHAR(50), department_id INT, gender VARCHAR(10)); INSERT INTO Employees (employee_id, employee_name, department_id, gender) VALUES (1, 'Employee1', 1, 'Female'), (2, 'Employee2', 1, 'Male'), (3, 'Employee3', 2, 'Female'), (4, 'Employee4', 3, 'Non-binary');<end_of_turn>\\n<start_of_turn>model\\nSELECT d.department_name, e.gender, COUNT(e.employee_id) AS num_employees FROM Departments d INNER JOIN Employees e ON d.department_id = e.department_id GROUP BY d.department_name, e.gender;\\n\\nExplanation: The SQL query counts the number of female and male employees in each department by performing an inner join between the Departments and Employees tables on the department_id field, and then grouping the results by department_name and gender.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nList the top 3 countries with the highest technology accessibility score in Africa.\\n\\nContext: CREATE TABLE technology_scores (country VARCHAR(50), region VARCHAR(20), score INT); INSERT INTO technology_scores (country, region, score) VALUES ('Nigeria', 'Africa', 70), ('Egypt', 'Africa', 80), ('South Africa', 'Africa', 90), ('Kenya', 'Africa', 75), ('Ethiopia', 'Africa', 60);<end_of_turn>\\n<start_of_turn>model\\nSELECT country, score FROM technology_scores WHERE region = 'Africa' ORDER BY score DESC LIMIT 3;\\n\\nExplanation: This SQL query lists the top 3 countries with the highest technology accessibility score in Africa by using the ORDER BY clause to sort the scores in descending order, and then using the LIMIT clause to get the top 3 records.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the average amount of climate finance spent by 'medium' and 'large' organizations?\\n\\nContext: CREATE TABLE org_climate_finance (org_size VARCHAR(20), amount FLOAT); INSERT INTO org_climate_finance (org_size, amount) VALUES ('small', 20000), ('medium', 50000), ('large', 75000), ('extra_large', 100000);<end_of_turn>\\n<start_of_turn>model\\nSELECT AVG(amount) FROM org_climate_finance WHERE org_size IN ('medium', 'large');\\n\\nExplanation: This query calculates the average amount of climate finance spent by 'medium' and 'large' organizations from the org_climate_finance table.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the total billing amount for cases with a duration of more than 60 days?\\n\\nContext: CREATE TABLE Cases (CaseID int, AttorneyID int, DurationDays int); INSERT INTO Cases (CaseID, AttorneyID, DurationDays) VALUES (1, 1, 45), (2, 2, 120), (3, 3, 32), (4, 1, 90), (5, 5, 65), (6, 4, 40); CREATE TABLE CaseBilling (CaseID int, BillingAmount decimal(10,2)); INSERT INTO CaseBilling (CaseID, BillingAmount) VALUES (1, 4500.00), (2, 12000.00), (3, 3200.00), (4, 9000.00), (5, 6500.00), (6, 4000.00);<end_of_turn>\\n<start_of_turn>model\\nSELECT SUM(BillingAmount) AS TotalBillingAmount FROM CaseBilling JOIN Cases ON CaseBilling.CaseID = Cases.CaseID WHERE DurationDays > 60;\\n\\nExplanation: Calculates the total billing amount for cases with a duration of more than 60 days. It joins the 'Cases' and 'CaseBilling' tables on their corresponding IDs and filters for cases with a duration greater than 60 days. Finally, it calculates the sum of the billing amounts for these cases.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the average number of users with accessibility needs in each technology domain?\\n\\nContext: CREATE TABLE users (id INT, accessibility_needs BOOLEAN, domain VARCHAR(255)); INSERT INTO users (id, accessibility_needs, domain) VALUES (1, true, 'AI ethics'), (2, false, 'climate change'), (3, true, 'technology accessibility'), (4, false, 'digital divide'), (5, true, 'AI ethics'), (6, false, 'technology for social good'), (7, true, 'digital divide');<end_of_turn>\\n<start_of_turn>model\\nSELECT AVG(accessibility_needs) FROM (SELECT COUNT(*) AS accessibility_needs, domain FROM users GROUP BY domain) AS subquery;\\n\\nExplanation: This query calculates the average number of users with accessibility needs in each technology domain. It does this by first grouping the users table by domain and counting the number of users with accessibility needs for each group. Then, it applies the AVG function to the result.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the average donation amount from donors in the United States?\\n\\nContext: CREATE TABLE donors (id INT, name TEXT, country TEXT, donation_amount DECIMAL); INSERT INTO donors (id, name, country, donation_amount) VALUES (1, 'John Doe', 'USA', 100.00), (2, 'Jane Smith', 'Canada', 50.00);<end_of_turn>\\n<start_of_turn>model\\nSELECT AVG(donation_amount) FROM donors WHERE country = 'USA';\\n\\nExplanation: The SQL query calculates the average donation amount by using the AVG() function on the donation_amount column, and filters the data to only include records where the country is 'USA'.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the average labor productivity in the mining industry?\\n\\nContext: CREATE TABLE productivity (productivity_id INT, employee_id INT, units_produced INT, hours_worked INT, industry VARCHAR(255)); INSERT INTO productivity (productivity_id, employee_id, units_produced, hours_worked, industry) VALUES (1, 1, 100, 10, 'Mining'), (2, 2, 150, 12, 'Mining');<end_of_turn>\\n<start_of_turn>model\\nSELECT AVG(units_produced\/hours_worked) FROM productivity WHERE industry = 'Mining';\\n\\nExplanation: This query calculates the average labor productivity in the mining industry by filtering the 'productivity' table for the industry 'Mining' and then using the AVG aggregate function to calculate the average ratio of units produced to hours worked.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nInsert a new record into the 'CommunityPrograms' table with the following data: 'NeighborhoodWatch', '2023-03-14'\\n\\nContext: CREATE TABLE CommunityPrograms (ProgramName VARCHAR(50), StartDate DATE);<end_of_turn>\\n<start_of_turn>model\\nINSERT INTO CommunityPrograms (ProgramName, StartDate) VALUES ('NeighborhoodWatch', '2023-03-14');\\n\\nExplanation: This query inserts a new record into the 'CommunityPrograms' table with the data 'NeighborhoodWatch' and '2023-03-14' for the 'ProgramName' and 'StartDate' columns, respectively. It uses the INSERT INTO statement, followed by the table name and the list of columns to insert data into, enclosed in parentheses. The VALUES keyword is followed by the data enclosed in parentheses.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat was the total revenue from users in Mexico and South Korea for the 'fashion' product category in Q3 2022?\\n\\nContext: CREATE TABLE products (product_id INT, product_name VARCHAR(255), category VARCHAR(255)); INSERT INTO products (product_id, product_name, category) VALUES (1, 'Dress 1', 'fashion'), (2, 'Shirt 1', 'fashion'); CREATE TABLE users (user_id INT, user_country VARCHAR(255)); INSERT INTO users (user_id, user_country) VALUES (1, 'Mexico'), (2, 'South Korea'); CREATE TABLE orders (order_id INT, user_id INT, product_id INT, order_date DATE, revenue DECIMAL(10, 2)); INSERT INTO orders (order_id, user_id, product_id, order_date, revenue) VALUES (1, 1, 1, '2022-07-01', 50), (2, 2, 1, '2022-07-05', 60);<end_of_turn>\\n<start_of_turn>model\\nSELECT SUM(revenue) FROM orders o JOIN products p ON o.product_id = p.product_id JOIN users u ON o.user_id = u.user_id WHERE u.user_country IN ('Mexico', 'South Korea') AND p.category = 'fashion' AND o.order_date BETWEEN '2022-07-01' AND '2022-09-30';\\n\\nExplanation: The query joins the orders, products, and users tables to filter on the desired conditions (Mexico and South Korea users, fashion category, and Q3 2022 dates) and sums the revenue accordingly.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the maximum age of patients in rural_clinic from Canada?\\n\\nContext: CREATE TABLE rural_clinic (patient_id INT, age INT, gender VARCHAR(10), country VARCHAR(20));<end_of_turn>\\n<start_of_turn>model\\nSELECT MAX(age) FROM rural_clinic WHERE country = 'Canada';\\n\\nExplanation: The SQL query finds the maximum (MAX) age of patients in the 'rural_clinic' table who are from Canada.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat are the names of countries with marine conservation programs?\\n\\nContext: CREATE TABLE conservation_programs (country TEXT, marine_conservation BOOLEAN); INSERT INTO conservation_programs (country, marine_conservation) VALUES ('Canada', true), ('Brazil', false), ('Spain', true);<end_of_turn>\\n<start_of_turn>model\\nSELECT country FROM conservation_programs WHERE marine_conservation = true;\\n\\nExplanation: This SQL query filters the 'conservation_programs' table based on the 'marine_conservation' column, returning a list of countries where the 'marine_conservation' is true (representing countries with marine conservation programs).<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the total number of articles and the percentage of articles in the 'politics' category, for each country?\\n\\nContext: CREATE TABLE articles (article_id INT, title VARCHAR(50), category VARCHAR(20), country VARCHAR(20)); INSERT INTO articles (article_id, title, category, country) VALUES (1, 'Politics in 2022', 'politics', 'USA'), (2, 'British Politics', 'politics', 'UK'), (3, 'Indian Economy', 'economy', 'India');<end_of_turn>\\n<start_of_turn>model\\nSELECT country, COUNT(*) as article_count, 100.0 * COUNT(CASE WHEN category = 'politics' THEN 1 END) \/ COUNT(*) as politics_percentage FROM articles GROUP BY country;\\n\\nExplanation: First, we use the COUNT function with the GROUP BY clause to calculate the number of articles for each country. Then, we use the COUNT and CASE clauses to calculate the number of articles in the 'politics' category for each country. Finally, we calculate the percentage by dividing the number of articles in the 'politics' category by the total number of articles in each country and multiplying by 100.0.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the total amount of research grants awarded to each country in 2018?\\n\\nContext: CREATE TABLE country_grants_2018 (id INT, country VARCHAR(255), grant_amount INT); INSERT INTO country_grants_2018 (id, country, grant_amount) VALUES (1, 'USA', 75000), (2, 'Canada', 50000), (3, 'Mexico', 60000), (4, 'Brazil', 80000);<end_of_turn>\\n<start_of_turn>model\\nSELECT country, SUM(grant_amount) as total_grants FROM country_grants_2018 GROUP BY country;\\n\\nExplanation: This query groups the country_grants_2018 table by country, then calculates the total grant amount for each country in 2018.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nFind the number of properties in each city that were built before 2000.\\n\\nContext: CREATE TABLE cities (id INT, name VARCHAR(30)); CREATE TABLE properties (id INT, city VARCHAR(20), year_built INT); INSERT INTO cities (id, name) VALUES (1, 'Vancouver'), (2, 'Seattle'), (3, 'Portland'); INSERT INTO properties (id, city, year_built) VALUES (101, 'Vancouver', 1995), (102, 'Vancouver', 2010), (103, 'Seattle', 1985), (104, 'Seattle', 2005), (105, 'Portland', 1999), (106, 'Portland', 2002);<end_of_turn>\\n<start_of_turn>model\\nSELECT cities.name, COUNT(properties.id) FROM cities INNER JOIN properties ON cities.name = properties.city WHERE properties.year_built < 2000 GROUP BY cities.name;\\n\\nExplanation: This SQL query finds the number of properties in each city that were built before 2000 by joining the cities and properties tables on the name column, filtering the results based on the year_built column, and grouping the results by the name column.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nList all autonomous driving research projects and their respective funding sources.\\n\\nContext: CREATE TABLE AutonomousDrivingResearch (id INT, project_name VARCHAR(50), funding_source VARCHAR(50)); INSERT INTO AutonomousDrivingResearch (id, project_name, funding_source) VALUES (1, 'Project A', 'Company X'); INSERT INTO AutonomousDrivingResearch (id, project_name, funding_source) VALUES (2, 'Project B', 'Government Y');<end_of_turn>\\n<start_of_turn>model\\nSELECT project_name, funding_source FROM AutonomousDrivingResearch;\\n\\nExplanation: This query retrieves all autonomous driving research projects and their respective funding sources by selecting the project_name and funding_source columns from the AutonomousDrivingResearch table.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the minimum research grant amount awarded to a faculty member in the Physics department?\\n\\nContext: CREATE TABLE Faculty (FacultyID INT, Name VARCHAR(50), Department VARCHAR(50), Gender VARCHAR(10), Salary INT); INSERT INTO Faculty (FacultyID, Name, Department, Gender, Salary) VALUES (1, 'Alice', 'Physics', 'Female', 80000); INSERT INTO Faculty (FacultyID, Name, Department, Gender, Salary) VALUES (2, 'Bob', 'Physics', 'Male', 85000); CREATE TABLE ResearchGrants (GrantID INT, FacultyID INT, Amount INT); INSERT INTO ResearchGrants (GrantID, FacultyID, Amount) VALUES (1, 1, 90000); INSERT INTO ResearchGrants (GrantID, FacultyID, Amount) VALUES (2, 2, 95000);<end_of_turn>\\n<start_of_turn>model\\nSELECT MIN(Amount) FROM ResearchGrants rg INNER JOIN Faculty f ON rg.FacultyID = f.FacultyID WHERE f.Department = 'Physics';\\n\\nExplanation: This SQL query calculates the minimum research grant amount awarded to a faculty member in the Physics department. It first joins the ResearchGrants and Faculty tables on FacultyID, then filters for the Physics department, and finally calculates the minimum grant amount using the MIN function.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nList the number of job applications in the 'hr' schema's 'job_applications' table by job location\\n\\nContext: CREATE TABLE hr.job_applications (id INT, job_id INT, applicant_id INT, applied_date DATE, job_location VARCHAR(50));<end_of_turn>\\n<start_of_turn>model\\nSELECT job_location, COUNT(*) FROM hr.job_applications GROUP BY job_location;\\n\\nExplanation: The SQL query groups the 'job_applications' table by the 'job_location' column and calculates the number of rows for each group.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nUpdate employee salaries in the Employees table by 5% for the 'Construction' department.\\n\\nContext: CREATE TABLE Employees (EmployeeID INT, FirstName VARCHAR(50), LastName VARCHAR(50), Position VARCHAR(50), Department VARCHAR(50), Salary DECIMAL(10,2), FOREIGN KEY (EmployeeID) REFERENCES Projects(EmployeeID));<end_of_turn>\\n<start_of_turn>model\\nUPDATE Employees SET Salary = Salary * 1.05 WHERE Department = 'Construction';\\n\\nExplanation: This SQL query updates the Salary column in the Employees table by a factor of 1.05 (5%) for all employees in the 'Construction' department.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the ratio of female to male solo artists in the Hip Hop genre?\\n\\nContext: CREATE TABLE artists (id INT, name VARCHAR(50), gender VARCHAR(10), genre VARCHAR(20), is_solo BOOLEAN); INSERT INTO artists (id, name, gender, genre, is_solo) VALUES (1, 'Cardi B', 'Female', 'Hip Hop', TRUE), (2, 'Kendrick Lamar', 'Male', 'Hip Hop', TRUE);<end_of_turn>\\n<start_of_turn>model\\nSELECT COUNT(*) FILTER (WHERE gender = 'Female' AND is_solo = TRUE) \/ COUNT(*) FILTER (WHERE gender = 'Male' AND is_solo = TRUE) FROM artists WHERE genre = 'Hip Hop';\\n\\nExplanation: This query calculates the ratio of female to male solo artists in the Hip Hop genre by filtering the artists table for solo artists and the genre, and then calculating the count for each gender and dividing the two counts.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nFind the number of projects in the 'public_works' table that were completed in each month of the year, for the year 2019.\\n\\nContext: CREATE TABLE public_works (id INT, name VARCHAR(50), location VARCHAR(50), start_date DATE, completion_date DATE);<end_of_turn>\\n<start_of_turn>model\\nSELECT DATEPART(year, completion_date) as year, DATEPART(month, completion_date) as month, COUNT(*) as num_projects FROM public_works WHERE completion_date >= '2019-01-01' AND completion_date < '2020-01-01' GROUP BY DATEPART(year, completion_date), DATEPART(month, completion_date);\\n\\nExplanation: This SQL query finds the number of projects in the 'public_works' table that were completed in each month of the year, for the year 2019. It uses the DATEPART() function to extract the year and month from the completion_date column, and the COUNT() function to count the number of projects for each month. The query then groups the data by the year and month and orders the results by the month.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nCount the number of non-compliant food inspections\\n\\nContext: CREATE TABLE inspection_reports (id INT, restaurant_id INT, inspection_date DATE, is_compliant BOOLEAN); INSERT INTO inspection_reports (id, restaurant_id, inspection_date, is_compliant) VALUES (1, 1, '2021-01-01', false); INSERT INTO inspection_reports (id, restaurant_id, inspection_date, is_compliant) VALUES (2, 2, '2021-02-01', true);<end_of_turn>\\n<start_of_turn>model\\nSELECT COUNT(*) FROM inspection_reports WHERE is_compliant = false;\\n\\nExplanation: Count the number of non-compliant food inspections by filtering the is_compliant column with the value 'false' and then applying the COUNT function.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the name of the hospital with the smallest budget in New York?\\n\\nContext: CREATE TABLE hospitals (name TEXT, budget INTEGER, beds INTEGER, state TEXT); INSERT INTO hospitals (name, budget, beds, state) VALUES ('HospitalA', 500000, 75, 'New York'), ('HospitalB', 400000, 60, 'New York'), ('HospitalC', 600000, 50, 'New York'), ('HospitalD', 300000, 80, 'New York'), ('HospitalE', 700000, 100, 'New York');<end_of_turn>\\n<start_of_turn>model\\nSELECT name FROM hospitals WHERE state = 'New York' ORDER BY budget ASC LIMIT 1;\\n\\nExplanation: This SQL query identifies the name of the hospital with the smallest budget in New York. It does so by filtering the hospitals table to only include rows where the state is 'New York' and then using the ORDER BY clause to sort the results in ascending order based on the budget column. The LIMIT clause is used to only return the top row.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the difference between the maximum and minimum safety violation costs for chemical plants in Brazil?\\n\\nContext: CREATE TABLE chemical_plants (plant_id INT, plant_name VARCHAR(50), country VARCHAR(50), safety_violation_cost DECIMAL(10,2)); INSERT INTO chemical_plants (plant_id, plant_name, country, safety_violation_cost) VALUES (1, 'Plant A', 'Brazil', 5000), (2, 'Plant B', 'Brazil', 8000), (3, 'Plant C', 'USA', 3000);<end_of_turn>\\n<start_of_turn>model\\nSELECT MAX(safety_violation_cost) - MIN(safety_violation_cost) FROM chemical_plants WHERE country = 'Brazil';\\n\\nExplanation: Calculate the difference between the maximum and minimum safety_violation_cost for plants located in Brazil by subtracting the minimum safety_violation_cost from the maximum safety_violation_cost for plants in Brazil.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the maximum number of creative AI applications developed in a single country?\\n\\nContext: CREATE TABLE ai_applications (app_id INT, name TEXT, country TEXT, category TEXT); INSERT INTO ai_applications (app_id, name, country, category) VALUES (1, 'ArtBot', 'Nigeria', 'Creative'), (2, 'MusicGen', 'South Africa', 'Creative'), (3, 'DataViz', 'US', 'Analytical'), (4, 'ChatAssist', 'Canada', 'Assistive'), (5, 'AIArt', 'Japan', 'Creative'), (6, 'AIWriter', 'Germany', 'Creative');<end_of_turn>\\n<start_of_turn>model\\nSELECT MAX(count_per_country) FROM (SELECT COUNT(*) AS count_per_country FROM ai_applications GROUP BY country);\\n\\nExplanation: This query calculates the maximum number of creative AI applications developed in a single country. It does this by using a subquery to calculate the number of creative AI applications developed in each country. The main query then calculates the maximum number of applications by using the MAX() function on the count_per_country column from the subquery.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nSELECT DISTINCT MemberID, Gender FROM Members WHERE State = 'CA';\\n\\nContext: CREATE TABLE Members (MemberID INT, Name VARCHAR(50), Age INT, Gender VARCHAR(10), City VARCHAR(50), State VARCHAR(20)); INSERT INTO Members (MemberID, Name, Age, Gender, City, State) VALUES (1005, 'Sofia Rodriguez', 29, 'Female', 'San Francisco', 'CA'); INSERT INTO Members (MemberID, Name, Age, Gender, City, State) VALUES (1006, 'Mohammed Al-Said', 36, 'Male', 'San Diego', 'CA');<end_of_turn>\\n<start_of_turn>model\\nSELECT MemberID, WorkoutType, DATE_TRUNC('month', Date) as Month FROM Workouts GROUP BY MemberID, WorkoutType, Month ORDER BY Month DESC;\\n\\nExplanation: This query retrieves the member IDs, workout types, and the month (truncated to the beginning of the month) for each workout, grouped by member, workout type, and month. The result set is ordered by month in descending order.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nHow many attendees participated in dance programs by age group in H1 2022?\\n\\nContext: CREATE TABLE DanceAttendance (id INT, age_group VARCHAR(10), program VARCHAR(20), attendance INT, attendance_date DATE); INSERT INTO DanceAttendance (id, age_group, program, attendance, attendance_date) VALUES (1, '5-10', 'Ballet', 25, '2022-01-05'), (2, '11-15', 'Hip Hop', 30, '2022-03-12'), (3, '16-20', 'Contemporary', 20, '2022-02-25');<end_of_turn>\\n<start_of_turn>model\\nSELECT program, age_group, SUM(attendance) as total_attendance FROM DanceAttendance WHERE YEAR(attendance_date) = 2022 AND MONTH(attendance_date) <= 6 AND program = 'Dance' GROUP BY program, age_group;\\n\\nExplanation: The SQL query calculates the total number of attendees who participated in dance programs by age group in H1 2022. It first filters the DanceAttendance table for records with a program of 'Dance' and an attendance date in H1 2022, then groups the results by program and age group, and finally calculates the total attendance for each program and age group.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the total mass of all spacecraft that have been launched since 2010?\\n\\nContext: CREATE TABLE Spacecraft (SpacecraftID INT, Name VARCHAR(50), Manufacturer VARCHAR(50), LaunchDate DATE, Mass FLOAT); INSERT INTO Spacecraft VALUES (1, 'Juno', 'NASA', '2011-08-05', 3625), (2, 'Curiosity', 'NASA', '2012-11-26', 1982), (3, 'Mangalyaan', 'ISRO', '2013-11-05', 1350);<end_of_turn>\\n<start_of_turn>model\\nSELECT SUM(Mass) FROM Spacecraft WHERE YEAR(LaunchDate) >= 2010;\\n\\nExplanation: This query calculates the total mass of all spacecraft that have been launched since 2010 by using the SUM function on the Mass column, filtering the Spacecraft table for rows where the LaunchDate column is greater than or equal to the year 2010.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nUpdate the salaries of employees in the IT department with a 3% increase.\\n\\nContext: CREATE TABLE EmployeeData (EmployeeID INT, Department VARCHAR(50), Salary DECIMAL(10, 2)); INSERT INTO EmployeeData VALUES (1, 'IT', 50000); INSERT INTO EmployeeData VALUES (2, 'HR', 55000); INSERT INTO EmployeeData VALUES (3, 'Finance', 60000);<end_of_turn>\\n<start_of_turn>model\\nUPDATE EmployeeData SET Salary = Salary * 1.03 WHERE Department = 'IT';\\n\\nExplanation: This query filters the EmployeeData table by the Department column, setting the condition to 'IT'. It then updates the Salary column by multiplying the current value by 1.03, increasing the salary by 3% for employees in the IT department.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nList unique last names of attorneys who handled more than 30 bankruptcy cases and their respective counts.\\n\\nContext: CREATE TABLE bankruptcy_cases (case_id INT, attorney_id INT, attorney_last_name VARCHAR(50));<end_of_turn>\\n<start_of_turn>model\\nSELECT attorney_last_name, COUNT(*) as case_count FROM bankruptcy_cases GROUP BY attorney_last_name HAVING COUNT(*) > 30;\\n\\nExplanation: The SQL query groups the 'bankruptcy_cases' table by 'attorney_last_name' and calculates the count of records in each group using the COUNT function. It then filters the groups with more than 30 cases using the HAVING clause.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the average age of the aircraft in the Aircraft_Table?\\n\\nContext: CREATE TABLE Aircraft_Table (id INT, model VARCHAR(100), year_manufactured INT);<end_of_turn>\\n<start_of_turn>model\\nSELECT AVG(YEAR_MANUFACTURED) FROM Aircraft_Table;\\n\\nExplanation: This SQL query calculates the average age of the aircraft in the Aircraft_Table by using the AVG function and the YEAR_MANUFACTURED column.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the total revenue generated per day, grouped by date?\\n\\nContext: CREATE TABLE sales (id INT, sale_date DATE, menu_item VARCHAR(50), quantity INT, price DECIMAL(5,2)); INSERT INTO sales (id, sale_date, menu_item, quantity, price) VALUES (8, '2022-01-11', 'Burger', 1, 8.00), (9, '2022-01-12', 'Fries', 2, 3.00), (10, '2022-01-13', 'Salad', 1, 7.00);<end_of_turn>\\n<start_of_turn>model\\nSELECT sale_date, SUM(quantity * price) as total_revenue FROM sales GROUP BY sale_date ORDER BY sale_date;\\n\\nExplanation: This query groups the sales table by sale_date, calculating the total revenue for each date and ordering the results by date.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the minimum fare for subway routes in the 'north' region?\\n\\nContext: CREATE TABLE subway_fares (region VARCHAR(10), fare DECIMAL(5,2)); INSERT INTO subway_fares (region, fare) VALUES ('east', 3.00), ('west', 3.25), ('north', 3.50), ('south', 3.75);<end_of_turn>\\n<start_of_turn>model\\nSELECT MIN(fare) FROM subway_fares WHERE region = 'north';\\n\\nExplanation: This query calculates the minimum fare for subway routes in the 'north' region by finding the lowest fare in that region.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the distribution of cities in our news article database?\\n\\nContext: CREATE TABLE NewsArticles (id INT, title VARCHAR(255), city VARCHAR(255));<end_of_turn>\\n<start_of_turn>model\\nSELECT city, COUNT(*) AS count FROM NewsArticles GROUP BY city;\\n\\nExplanation: We use the COUNT function to calculate the number of cities in our news article database. We group by the city to ensure that we are getting the correct count for each city.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nIdentify the top 3 countries with the highest total quantity of organic fruits in the inventory.\\n\\nContext: CREATE TABLE inventory(id INT PRIMARY KEY, product VARCHAR(50), quantity INT, country VARCHAR(50), organic BOOLEAN); INSERT INTO inventory(id, product, quantity, country, organic) VALUES (1, 'conventional apples', 100, 'USA', FALSE), (2, 'organic apples', 200, 'Mexico', TRUE), (3, 'organic oranges', 150, 'Spain', TRUE), (4, 'conventional bananas', 300, 'Colombia', FALSE), (5, 'organic bananas', 250, 'Ecuador', TRUE);<end_of_turn>\\n<start_of_turn>model\\nSELECT country, SUM(quantity) AS total_quantity FROM inventory WHERE organic = TRUE GROUP BY country ORDER BY total_quantity DESC LIMIT 3;\\n\\nExplanation: This SQL query filters the inventory table for organic products, calculates the total quantity for each country of origin using the SUM function and GROUP BY clause, and orders the results in descending order based on total quantity. The query then returns the top 3 countries with the highest total quantity of organic fruits using the LIMIT clause.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nHow many days elapsed between a patient's infectious disease onset and resolution?\\n\\nContext: CREATE TABLE cases (id INT, patient_id INT, disease TEXT, onset_date DATE, resolution_date DATE); INSERT INTO cases (id, patient_id, disease, onset_date, resolution_date) VALUES (1, 1, 'Measles', '2021-01-05', '2021-01-10'); INSERT INTO cases (id, patient_id, disease, onset_date, resolution_date) VALUES (2, 2, 'Chickenpox', '2021-02-10', '2021-02-15');<end_of_turn>\\n<start_of_turn>model\\nSELECT disease, DATEDIFF(resolution_date, onset_date) as days_to_resolution FROM cases;\\n\\nExplanation: The SQL query calculates the number of days between the onset and resolution dates for each case of infectious disease, supporting disease duration analysis.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nUpdate the guest rating to 4.5 for the hotel with ID 101 in the 'luxury' segment.\\n\\nContext: CREATE TABLE hotel_ratings (hotel_id INT, segment VARCHAR(20), guest_rating FLOAT);<end_of_turn>\\n<start_of_turn>model\\nUPDATE hotel_ratings SET guest_rating = 4.5 WHERE hotel_id = 101 AND segment = 'luxury';\\n\\nExplanation: This query updates the guest rating to 4.5 for the hotel with ID 101 in the 'luxury' segment. It uses the 'hotel_id' and 'segment' columns to filter the records and update the 'guest_rating' column in the 'hotel_ratings' table.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the minimum cargo weight for shipments to the port of Rotterdam?\\n\\nContext: CREATE TABLE ports (port_id INT, port_name VARCHAR(50), country VARCHAR(50)); INSERT INTO ports VALUES (1, 'Rotterdam', 'Netherlands'); CREATE TABLE shipments (shipment_id INT, port_id INT, cargo_weight INT); INSERT INTO shipments VALUES (1, 1, 5000), (2, 1, 3000), (3, 1, 7000);<end_of_turn>\\n<start_of_turn>model\\nSELECT MIN(cargo_weight) FROM shipments JOIN ports ON shipments.port_id = ports.port_id WHERE ports.port_name = 'Rotterdam';\\n\\nExplanation: This SQL query calculates the minimum cargo weight for shipments to the port of Rotterdam. It first joins the 'shipments' table with the 'ports' table on the port_id field. Then, it filters the records to only include shipments to the port of Rotterdam by using the WHERE clause. Finally, the query calculates the minimum cargo weight using the MIN function.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the daily recycling rate for the region of Andalusia?\\n\\nContext: CREATE TABLE region_recycling (region VARCHAR(255), recycling_rate DECIMAL(5,2), total_waste INT, day INT); INSERT INTO region_recycling (region, recycling_rate, total_waste, day) VALUES ('Andalusia', 0.35, 150000, 5);<end_of_turn>\\n<start_of_turn>model\\nSELECT recycling_rate FROM region_recycling WHERE region='Andalusia' AND day=5;\\n\\nExplanation: This query retrieves the daily recycling rate for Andalusia on the 5th day of the month.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nAdd a new table with information about lawyers\\n\\nContext: CREATE TABLE lawyers (id INT PRIMARY KEY, name VARCHAR(255), state VARCHAR(2));<end_of_turn>\\n<start_of_turn>model\\nCREATE TABLE lawyer_cases (id INT PRIMARY KEY, lawyer_id INT, case_number VARCHAR(50), FOREIGN KEY (lawyer_id) REFERENCES lawyers(id));\\n\\nExplanation: This SQL statement adds a new table 'lawyer_cases' that includes information about lawyers and their cases. The table has columns for id, lawyer id, and case number. The lawyer id column references the id column in the 'lawyers' table.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the total budget for successful community development initiatives in the 'community_development' table?\\n\\nContext: CREATE TABLE community_development (id INT, initiative VARCHAR(50), budget FLOAT, status VARCHAR(20));<end_of_turn>\\n<start_of_turn>model\\nSELECT SUM(budget) FROM community_development WHERE status = 'successful';\\n\\nExplanation: This query calculates the total budget for successful community development initiatives in the 'community_development' table by summing the 'budget' column for projects with a status of 'successful'.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the average mental health parity violation fine amount by state?\\n\\nContext: CREATE TABLE violations (violation_id INT, violation_date DATE, violation_details VARCHAR(255), fine_amount INT, state_id INT);<end_of_turn>\\n<start_of_turn>model\\nSELECT AVG(fine_amount) as avg_fine_amount, state_id FROM violations GROUP BY state_id;\\n\\nExplanation: This query calculates the average mental health parity violation fine amount by state by joining the violations table with the states table on the state_id column and then using the AVG function to find the average fine_amount for each group.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nList the names of all Green Building certifications established between 2000 and 2010, in ascending order.\\n\\nContext: CREATE SCHEMA green_buildings; CREATE TABLE certifications (certification_name VARCHAR(255), year_established INT); INSERT INTO certifications (certification_name, year_established) VALUES ('LEED', 2000), ('BREEAM', 1998), ('Green Star', 2008), ('WELL', 2014);<end_of_turn>\\n<start_of_turn>model\\nSELECT certification_name FROM green_buildings.certifications WHERE year_established >= 2000 AND year_established <= 2010 ORDER BY certification_name;\\n\\nExplanation: This SQL query lists the names of all Green Building certifications established between 2000 and 2010, in ascending order. The query filters the certifications table in the green_buildings schema based on the year_established column and orders the results by the certification_name column in ascending order.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nDelete the 'peacekeeping_operations' table\\n\\nContext: CREATE TABLE peacekeeping_operations (id INT PRIMARY KEY, name VARCHAR(255), continent VARCHAR(255), status VARCHAR(255));<end_of_turn>\\n<start_of_turn>model\\nDROP TABLE peacekeeping_operations;\\n\\nExplanation: This query deletes the 'peacekeeping_operations' table. It uses the DROP TABLE statement, specifying the name of the table to delete.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nHow many total visitors did the museum have from countries with more than 100 million population?\\n\\nContext: CREATE TABLE Countries (CountryName VARCHAR(50), Population INT); INSERT INTO Countries (CountryName, Population) VALUES ('United States', 331002651), ('China', 1439323776), ('India', 1380004385), ('Indonesia', 273523615), ('Pakistan', 220892340);<end_of_turn>\\n<start_of_turn>model\\nSELECT COUNT(v.VisitorID) FROM Visitors v JOIN Countries c ON v.Country = c.CountryName WHERE c.Population > 100000000;\\n\\nExplanation: This query joins the Visitors table with the Countries table on the Country column, then filters the records where the Population is greater than 100 million, and finally counts the number of visitor records.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the average salary difference between male and female employees in each department?\\n\\nContext: CREATE TABLE EmployeeSalary (EmployeeID INT, Department VARCHAR(255), Gender VARCHAR(255), Salary INT); INSERT INTO EmployeeSalary (EmployeeID, Department, Gender, Salary) VALUES (1, 'IT', 'Male', 70000), (2, 'Finance', 'Female', 80000), (3, 'IT', 'Female', 75000), (4, 'HR', 'Non-binary', 60000);<end_of_turn>\\n<start_of_turn>model\\nSELECT Department, AVG(CASE WHEN Gender = 'Male' THEN Salary ELSE NULL END) AS Avg_Male_Salary, AVG(CASE WHEN Gender = 'Female' THEN Salary ELSE NULL END) AS Avg_Female_Salary, AVG(CASE WHEN Gender = 'Non-binary' THEN Salary ELSE NULL END) AS Avg_Non_binary_Salary FROM EmployeeSalary GROUP BY Department;\\n\\nExplanation: The SQL query calculates the average salary difference between male and female employees in each department by using the AVG function on a CASE statement that checks the Gender column. The query returns three columns: Avg_Male_Salary, Avg_Female_Salary, and Avg_Non_binary_Salary, which represent the average salary for each gender in the given department.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nFind the 'Production Time' for 'Jackets' in 'North America'.\\n\\nContext: CREATE TABLE production_time(garment VARCHAR(20), region VARCHAR(20), production_time INT); INSERT INTO production_time VALUES('Jackets', 'North America', 20);<end_of_turn>\\n<start_of_turn>model\\nSELECT production_time FROM production_time WHERE garment = 'Jackets' AND region = 'North America';\\n\\nExplanation: Select the 'Production Time' for 'Jackets' in 'North America' directly from the production_time table.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nCompare public health policy analysis for two counties (Cook and Harris)\\n\\nContext: CREATE TABLE public_health_policy (id INT, county TEXT, policy_name TEXT, policy_description TEXT); INSERT INTO public_health_policy (id, county, policy_name, policy_description) VALUES (1, 'Cook', 'Policy 1', 'Description 1'), (2, 'Harris', 'Policy 2', 'Description 2');<end_of_turn>\\n<start_of_turn>model\\nSELECT county, policy_name, policy_description FROM public_health_policy WHERE county IN ('Cook', 'Harris');\\n\\nExplanation: This query retrieves the public health policy analysis for the two specified counties by filtering on county.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nFind the number of properties with inclusive housing policies in each neighborhood, ordered from highest to lowest.\\n\\nContext: CREATE TABLE Neighborhoods (NeighborhoodID INT, NeighborhoodName VARCHAR(255)); CREATE TABLE Properties (PropertyID INT, NeighborhoodID INT, InclusiveHousing BOOLEAN);<end_of_turn>\\n<start_of_turn>model\\nSELECT NeighborhoodName, COUNT(*) AS InclusivePropertiesCount FROM Properties JOIN Neighborhoods ON Properties.NeighborhoodID = Neighborhoods.NeighborhoodID WHERE InclusiveHousing = 1 GROUP BY NeighborhoodName ORDER BY InclusivePropertiesCount DESC;\\n\\nExplanation: This query calculates the number of properties with inclusive housing policies in each neighborhood, ordered from highest to lowest. It joins the Properties table with the Neighborhoods table based on the NeighborhoodID, filters for properties with inclusive housing policies, and groups the results by neighborhood to calculate the number of inclusive properties. The results are ordered by the number of inclusive properties, from highest to lowest.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nUpdate the diagnosis of patient 'Eve' to 'diabetes' in 'RuralHealthFacility4'.\\n\\nContext: CREATE TABLE RuralHealthFacility4 (patient_id INT, patient_name VARCHAR(50), age INT, diagnosis VARCHAR(20)); INSERT INTO RuralHealthFacility4 (patient_id, patient_name, age, diagnosis) VALUES (8, 'Eve', 35, 'hypertension');<end_of_turn>\\n<start_of_turn>model\\nUPDATE RuralHealthFacility4 SET diagnosis = 'diabetes' WHERE patient_name = 'Eve';\\n\\nExplanation: This SQL query updates the diagnosis of patient 'Eve' to 'diabetes' in the 'RuralHealthFacility4' table.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nCalculate the total budget for the 'education' program from the 'budget_report' table.\\n\\nContext: CREATE TABLE budget_report (program VARCHAR(50), budget DECIMAL(10,2));<end_of_turn>\\n<start_of_turn>model\\nSELECT SUM(budget) FROM budget_report WHERE program = 'education';\\n\\nExplanation: This query calculates the sum of the 'budget' column in the 'budget_report' table for the 'education' program.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the maximum number of investment rounds for startups founded by individuals who identify as LGBTQ+?\\n\\nContext: CREATE TABLE investments(id INT, startup_id INT, round_number INT, investment_amount INT); INSERT INTO investments VALUES (1, 1, 1, 1000000); INSERT INTO investments VALUES (2, 1, 2, 5000000); INSERT INTO investments VALUES (3, 2, 1, 2000000);<end_of_turn>\\n<start_of_turn>model\\nSELECT MAX(round_number) FROM investments JOIN startups ON investments.startup_id = startups.id WHERE startups.founder_identity = 'LGBTQ+';\\n\\nExplanation: The SQL query joins the startups and investments tables on the startup_id column, filters the results to only include startups founded by individuals who identify as LGBTQ+, and calculates the maximum round_number.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the maximum number of investments for high-risk accounts in the Latin America region?\\n\\nContext: CREATE TABLE investments (id INT, account_risk_level VARCHAR(10), region VARCHAR(20), num_investments INT); INSERT INTO investments (id, account_risk_level, region, num_investments) VALUES (1, 'high', 'Latin America', 3), (2, 'medium', 'North America', 2), (3, 'low', 'Europe', 1), (4, 'high', 'Asia-Pacific', 4);<end_of_turn>\\n<start_of_turn>model\\nSELECT MAX(num_investments) FROM investments WHERE account_risk_level = 'high' AND region = 'Latin America';\\n\\nExplanation: This SQL query calculates the maximum number of investments for high-risk accounts in the Latin America region by using the MAX function on the num_investments column, and filtering the records by the account_risk_level and region columns with the specified values.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nCount the number of creative AI applications by type\\n\\nContext: CREATE TABLE creative_ai (application_name TEXT, application_type TEXT); INSERT INTO creative_ai (application_name, application_type) VALUES ('App1', 'Image Generation'), ('App2', 'Text Generation'), ('App3', 'Music Generation');<end_of_turn>\\n<start_of_turn>model\\nSELECT application_type, COUNT(*) FROM creative_ai GROUP BY application_type;\\n\\nExplanation: Count the number of applications for each type in the 'creative_ai' table.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nHow many farmers in Nepal adopted innovative agricultural practices in 2019?\\n\\nContext: CREATE TABLE Farmers (Farmer_ID INT, Farmer_Name TEXT, Location TEXT, Innovations_Adopted INT, Year INT); INSERT INTO Farmers (Farmer_ID, Farmer_Name, Location, Innovations_Adopted, Year) VALUES (1, 'Ram Bahadur', 'Nepal', 1, 2019);<end_of_turn>\\n<start_of_turn>model\\nSELECT SUM(Innovations_Adopted) FROM Farmers WHERE Year = 2019 AND Location = 'Nepal';\\n\\nExplanation: This query calculates the number of farmers in Nepal who adopted innovative agricultural practices in 2019. It filters the Farmers table by the specified conditions (Year = 2019 and Location = 'Nepal') and then sums the Innovations_Adopted column values for the selected records.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nHow many patents were filed by 'CompanyD' in 'RegionE' between 2016 and 2019?\\n\\nContext: CREATE TABLE patents(company varchar(20), region varchar(20), year int, num_patents int);INSERT INTO patents VALUES ('CompanyD', 'RegionE', 2016, 20);INSERT INTO patents VALUES ('CompanyD', 'RegionE', 2017, 25);INSERT INTO patents VALUES ('CompanyD', 'RegionE', 2018, 30);INSERT INTO patents VALUES ('CompanyD', 'RegionE', 2019, 35);<end_of_turn>\\n<start_of_turn>model\\nSELECT SUM(num_patents) FROM patents WHERE company = 'CompanyD' AND region = 'RegionE' AND year BETWEEN 2016 AND 2019;\\n\\nExplanation: The SQL query calculates the total number of patents filed by 'CompanyD' in 'RegionE' between 2016 and 2019 by summing up the 'num_patents' column values where the 'company' is 'CompanyD', the 'region' is 'RegionE', and the 'year' is between 2016 and 2019.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhich countries have renewable energy projects with a combined capacity of at least 500 MW in the projects and project_capacity tables?\\n\\nContext: CREATE TABLE projects(id INT, project_name VARCHAR(50), project_type VARCHAR(50), country VARCHAR(50));CREATE TABLE project_capacity(project_id INT, capacity_mw FLOAT);<end_of_turn>\\n<start_of_turn>model\\nSELECT p.country FROM projects p INNER JOIN project_capacity pc ON p.id = pc.project_id GROUP BY p.country HAVING SUM(pc.capacity_mw) >= 500;\\n\\nExplanation: This query performs an inner join of the projects and project_capacity tables on the id column of the projects table and the project_id column of the project_capacity table. It then groups the results by country and filters for countries with a combined capacity of at least 500 MW.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhich biotech startups received funding in Q3 2022?\\n\\nContext: CREATE TABLE startup_funding (id INT, name VARCHAR(255), amount FLOAT, funding_date DATE); INSERT INTO startup_funding (id, name, amount, funding_date) VALUES (1, 'StartupA', 5000000, '2022-10-15'); INSERT INTO startup_funding (id, name, amount, funding_date) VALUES (2, 'StartupB', 7000000, '2022-07-20');<end_of_turn>\\n<start_of_turn>model\\nSELECT name FROM startup_funding WHERE funding_date BETWEEN '2022-07-01' AND '2022-09-30';\\n\\nExplanation: This query selects the 'name' column from the 'startup_funding' table where the 'funding_date' is between '2022-07-01' and '2022-09-30', returning startups funded during Q3 2022.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the average donation amount from donors in California?\\n\\nContext: CREATE TABLE donors (id INT, name TEXT, state TEXT, donation_amount DECIMAL); INSERT INTO donors (id, name, state, donation_amount) VALUES (1, 'John Doe', 'California', 150.00), (2, 'Jane Smith', 'Texas', 200.00);<end_of_turn>\\n<start_of_turn>model\\nSELECT AVG(donation_amount) FROM donors WHERE state = 'California';\\n\\nExplanation: This SQL query calculates the average donation amount from donors in California by using the AVG function on the donation_amount column, and filtering the data for donors from California using the WHERE clause.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nList the top 3 countries with the highest number of cultural heritage sites.\\n\\nContext: CREATE TABLE cultural_sites (site_id INT, site_name VARCHAR(50), country VARCHAR(50)); INSERT INTO cultural_sites VALUES (1, 'Acropolis', 'Greece'), (2, 'Colosseum', 'Italy'), (3, 'Machu Picchu', 'Peru'), (4, 'Taj Mahal', 'India'), (5, 'Petra', 'Jordan');<end_of_turn>\\n<start_of_turn>model\\nSELECT country, COUNT(*) as site_count FROM cultural_sites GROUP BY country ORDER BY site_count DESC LIMIT 3;\\n\\nExplanation: This query lists the top 3 countries with the highest number of cultural heritage sites. It groups the cultural_sites table by the country column and applies the COUNT function to each group. The query then orders the groups by the site_count column in descending order and limits the results to the top 3 rows, resulting in the top 3 countries with the highest number of cultural heritage sites.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the average response time for each category in 'incident_response' table for the year 2021?\\n\\nContext: CREATE TABLE incident_response (incident_id INT, incident_date DATE, category VARCHAR(20), response_time INT); INSERT INTO incident_response (incident_id, incident_date, category, response_time) VALUES (1, '2021-01-01', 'Medical', 8), (2, '2021-02-15', 'Fire', 6), (3, '2021-03-01', 'Traffic', 10);<end_of_turn>\\n<start_of_turn>model\\nSELECT category, AVG(response_time) FROM incident_response WHERE YEAR(incident_date) = 2021 GROUP BY category;\\n\\nExplanation: This SQL query calculates the average response time for each category in the 'incident_response' table for the year 2021. It groups the records by the 'category' column and then calculates the average 'response_time' for each group.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the total amount donated and number of volunteers for each organization?\\n\\nContext: CREATE TABLE funding (org_id INT, amount DECIMAL(10,2), funding_date DATE); INSERT INTO funding (org_id, amount, funding_date) VALUES (1, 5000.00, '2020-07-01'), (2, 7000.00, '2020-08-15'), (1, 3000.00, '2020-10-05'); CREATE TABLE volunteers (org_id INT, num_volunteers INT); INSERT INTO volunteers (org_id, num_volunteers) VALUES (1, 10), (2, 20);<end_of_turn>\\n<start_of_turn>model\\nSELECT org_id, SUM(amount) AS total_funding, num_volunteers FROM funding f JOIN volunteers v ON f.org_id = v.org_id GROUP BY org_id;\\n\\nExplanation: This query joins data from the funding and volunteers tables, then calculates the total amount of funding and number of volunteers for each organization.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nList the number of cases for each attorney from the 'Chicago' office, ordered by the number of cases in descending order?\\n\\nContext: CREATE TABLE offices (office_id INT, office_name VARCHAR(20)); INSERT INTO offices (office_id, office_name) VALUES (1, 'Boston'), (2, 'New York'), (3, 'Chicago'); CREATE TABLE cases (case_id INT, attorney_id INT, office_id INT); INSERT INTO cases (case_id, attorney_id, office_id) VALUES (1, 101, 1), (2, 102, 1), (3, 103, 1), (4, 104, 2), (5, 105, 3), (6, 106, 3), (7, 107, 3);<end_of_turn>\\n<start_of_turn>model\\nSELECT attorney_id, COUNT(*) as num_cases FROM cases JOIN offices ON cases.office_id = offices.office_id WHERE offices.office_name = 'Chicago' GROUP BY attorney_id ORDER BY num_cases DESC;\\n\\nExplanation: This query joins the 'cases' and 'offices' tables based on the office_id, filters the data for the 'Chicago' office, groups the data by attorney_id, and finally orders the results by the number of cases in descending order.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nHow many hospital beds are allocated for mental health in each state?\\n\\nContext: CREATE TABLE hospitals (id INT, state VARCHAR(20), beds INT, mental_health BOOLEAN); INSERT INTO hospitals (id, state, beds, mental_health) VALUES (1, 'California', 100, TRUE);<end_of_turn>\\n<start_of_turn>model\\nSELECT state, SUM(beds) FROM hospitals WHERE mental_health = TRUE GROUP BY state;\\n\\nExplanation: The SQL query calculates the total number of hospital beds allocated for mental health in each state using the SUM function on the 'beds' column and GROUP BY clause on the 'state' column. It filters the data for mental health hospitals using the WHERE clause.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the most popular activity among male members in their 50s?\\n\\nContext: CREATE TABLE members (id INT, age INT, gender VARCHAR(10)); INSERT INTO members (id, age, gender) VALUES (1, 52, 'Male'); CREATE TABLE workouts (id INT, member_id INT, activity VARCHAR(50), duration INT); INSERT INTO workouts (id, member_id, activity, duration) VALUES (1, 1, 'Swimming', 60);<end_of_turn>\\n<start_of_turn>model\\nSELECT activity, COUNT(*) AS count FROM members JOIN workouts ON members.id = workouts.member_id WHERE members.gender = 'Male' AND members.age BETWEEN 50 AND 59 GROUP BY activity ORDER BY count DESC LIMIT 1;\\n\\nExplanation: The query calculates the most popular activity among male members in their 50s. It joins the members and workouts tables based on member IDs and filters rows where the member's gender is 'Male' and the age is between 50 and 59. The query then groups the results by the activity column and calculates the count for each activity. The results are sorted in descending order by the count and limited to the top 1 activity.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nDelete the 'ProgramOutcomes' table.\\n\\nContext: CREATE TABLE ProgramOutcomes (program VARCHAR(255), outcome VARCHAR(255), year INT);<end_of_turn>\\n<start_of_turn>model\\nDROP TABLE ProgramOutcomes;\\n\\nExplanation: 1. A DROP TABLE statement is used to delete the ProgramOutcomes table.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nDelete records of policy_advocacy_3 with ID 4.\\n\\nContext: CREATE TABLE policy_advocacy_3 (id INT, initiative TEXT, region TEXT, year INT); INSERT INTO policy_advocacy_3 (id, initiative, region, year) VALUES (1, 'Inclusion Program', 'Europe', 2019), (2, 'Accessible Education', 'Europe', 2020), (3, 'Disability Rights', 'Europe', 2018), (4, 'Digital Accessibility', 'Europe', 2017);<end_of_turn>\\n<start_of_turn>model\\nDELETE FROM policy_advocacy_3 WHERE id = 4;\\n\\nExplanation: This query deletes records of policy_advocacy_3 with ID 4 by specifying the condition in the WHERE clause.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nIdentify food safety violations by restaurant location\\n\\nContext: CREATE TABLE food_safety_inspections (restaurant_location VARCHAR(255), violation_count INT); INSERT INTO food_safety_inspections (restaurant_location, violation_count) VALUES ('Location 1', '2'), ('Location 2', '3'), ('Location 3', '1'), ('Location 4', '5');<end_of_turn>\\n<start_of_turn>model\\nSELECT restaurant_location, violation_count FROM food_safety_inspections ORDER BY violation_count DESC;\\n\\nExplanation: This SQL query identifies food safety violations by restaurant location by selecting the restaurant_location and violation_count columns and ordering the results by violation_count in descending order.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nlist all astronauts who have never been on a space mission\\n\\nContext: CREATE TABLE Astronauts(astronaut_id INT, name VARCHAR(50), country VARCHAR(50), missions INT);<end_of_turn>\\n<start_of_turn>model\\nSELECT name FROM Astronauts WHERE missions = 0;\\n\\nExplanation: The SQL query filters the Astronauts table to only show the names of astronauts who have never been on a space mission by using the WHERE clause with the = operator and checking if the missions column is equal to 0.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the total number of articles published per day in the articles table, in descending order, for the past week?\\n\\nContext: CREATE TABLE articles (article_id INT, publication_date DATE); INSERT INTO articles (article_id, publication_date) VALUES (1, '2023-02-01'), (2, '2023-02-02'), (3, '2023-02-03'), (4, '2023-02-04'), (5, '2023-02-05'), (6, '2023-02-06'), (7, '2023-02-07'), (8, '2023-02-08');<end_of_turn>\\n<start_of_turn>model\\nSELECT DATE(publication_date) AS date, COUNT(*) AS num_articles FROM articles WHERE publication_date >= DATE_SUB(NOW(), INTERVAL 1 WEEK) GROUP BY date ORDER BY date DESC;\\n\\nExplanation: The total number of articles published per day for the past week is calculated by extracting the date from the publication_date column, grouping by date, and filtering for dates within the past week. The results are then ordered in descending order by date.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nList all space telescopes and their primary mirrors' diameters.\\n\\nContext: CREATE TABLE space_telescopes (id INT, name VARCHAR(255), primary_mirror_diameter INT); INSERT INTO space_telescopes (id, name, primary_mirror_diameter) VALUES (1, 'Hubble', 2400); INSERT INTO space_telescopes (id, name, primary_mirror_diameter) VALUES (2, 'James Webb', 6000);<end_of_turn>\\n<start_of_turn>model\\nSELECT name, primary_mirror_diameter FROM space_telescopes;\\n\\nExplanation: This query selects the name and primary_mirror_diameter columns from the space_telescopes table to display.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nInsert a new record for 'New York' with a temperature of 32 degrees on '2022-12-25'.\\n\\nContext: CREATE TABLE weather (city VARCHAR(255), temperature FLOAT, date DATE);<end_of_turn>\\n<start_of_turn>model\\nINSERT INTO weather (city, temperature, date) VALUES ('New York', 32, '2022-12-25');\\n\\nExplanation: The SQL query inserts a new record into the weather table for New York on December 25 with a temperature of 32 degrees using the INSERT INTO statement.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the total quantity of materials sourced from eco-friendly suppliers by each company?\\n\\nContext: CREATE TABLE eco_friendly_suppliers(company VARCHAR(50), material VARCHAR(50), quantity INT);<end_of_turn>\\n<start_of_turn>model\\nSELECT company, SUM(quantity) FROM eco_friendly_suppliers GROUP BY company;\\n\\nExplanation: The SQL query calculates the total quantity of materials sourced from eco-friendly suppliers by each company by grouping the records by the company attribute and calculating the sum of the quantity attribute.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the total premium for each gender?\\n\\nContext: See context<end_of_turn>\\n<start_of_turn>model\\nSELECT * FROM total_premium_by_gender;\\n\\nExplanation: This query retrieves the total premium for each gender by querying the \"total_premium_by_gender\" view.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nUpdate the name and state of public works project with ID 7 to 'Project G' and 'Texas' respectively.\\n\\nContext:  CREATE TABLE public_works_projects (    id INT PRIMARY KEY,    name VARCHAR(255),    state VARCHAR(255),    completion_date DATE,    cost INT ); INSERT INTO public_works_projects (id, name, state, completion_date, cost) VALUES (1, 'Project A', 'California', '2016-01-01', 7000000), (7, 'Project Y', 'Louisiana', '2019-01-01', 9000000); <end_of_turn>\\n<start_of_turn>model\\n WITH cte AS (    UPDATE public_works_projects    SET name = 'Project G', state = 'Texas'    WHERE id = 7    RETURNING *    ) SELECT * FROM cte; \\n\\nExplanation: The CTE updates the name and state of the project with ID 7 and returns the updated record.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the total revenue for each restaurant that offers vegan options in Q3 2022?\\n\\nContext: CREATE TABLE restaurant_menu (restaurant_id INT, has_vegan_options BOOLEAN); INSERT INTO restaurant_menu (restaurant_id, has_vegan_options) VALUES (1, true), (2, false); CREATE TABLE restaurant_revenue (restaurant_id INT, revenue DECIMAL(10,2), transaction_date DATE); INSERT INTO restaurant_revenue (restaurant_id, revenue, transaction_date) VALUES (1, 10000, '2022-07-01'), (2, 8000, '2022-07-02');<end_of_turn>\\n<start_of_turn>model\\nSELECT r.restaurant_id, SUM(revenue) as total_revenue FROM restaurant_revenue r JOIN restaurant_menu m ON r.restaurant_id = m.restaurant_id WHERE m.has_vegan_options = true GROUP BY r.restaurant_id;\\n\\nExplanation: The SQL query calculates the total revenue for each restaurant that offers vegan options in Q3 2022. It first joins the restaurant_menu and restaurant_revenue tables on restaurant_id. Then, it filters the records based on has_vegan_options being true using the WHERE clause. Lastly, it groups the records by restaurant_id and calculates the total revenue for each restaurant using the SUM aggregate function.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the percentage of female faculty members in the School of Business?\\n\\nContext: CREATE TABLE faculty_members (id INT, faculty_name VARCHAR(50), faculty_department VARCHAR(50), faculty_gender VARCHAR(10)); INSERT INTO faculty_members (id, faculty_name, faculty_department, faculty_gender) VALUES (1, 'Jane Smith', 'Management', 'Female'), (2, 'John Doe', 'Marketing', 'Male'), (3, 'Bob Johnson', 'Finance', 'Male'), (4, 'Sara Davis', 'Accounting', 'Female'), (5, 'Mike Brown', 'Economics', 'Male');<end_of_turn>\\n<start_of_turn>model\\nSELECT (COUNT(*) FILTER (WHERE faculty_gender = 'Female')) * 100.0 \/ COUNT(*) FROM faculty_members WHERE faculty_department LIKE '%Business%';\\n\\nExplanation: This SQL query calculates the percentage of female faculty members in the School of Business. It does this by using a SELECT statement to retrieve the count of female faculty members in the School of Business, dividing that count by the total number of faculty members in the School of Business, and then multiplying the result by 100 to get the percentage. The query uses the FILTER clause to only include rows where the faculty gender is female, and filters the results to only include rows where the faculty department is in the School of Business.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhich artist has the second-highest total ticket sales?\\n\\nContext: CREATE TABLE tickets (artist_name TEXT, tickets_sold INT); INSERT INTO tickets (artist_name, tickets_sold) VALUES ('Taylor Swift', 1250000), ('BTS', 1500000), ('Adele', 1000000), ('Queen', 1100000);<end_of_turn>\\n<start_of_turn>model\\nSELECT artist_name, SUM(tickets_sold) as total_tickets_sold FROM tickets GROUP BY artist_name ORDER BY total_tickets_sold DESC LIMIT 1 OFFSET 1;\\n\\nExplanation: This query calculates the total ticket sales for each artist by grouping the tickets table by artist_name and applying the SUM function to tickets_sold. It then orders the results by the total ticket sales in descending order, returns only the second row, which will be the artist with the second-highest total ticket sales.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the average donation amount per volunteer for the 'Helping Hands' program?\\n\\nContext: CREATE TABLE Donations (id INT, donor_name VARCHAR(50), donation_amount DECIMAL(10,2), donation_date DATE, donor_program VARCHAR(50));<end_of_turn>\\n<start_of_turn>model\\nSELECT AVG(Donations.donation_amount) FROM Donations INNER JOIN (SELECT id, total_volunteers FROM Programs WHERE program_name = 'Helping Hands') AS ProgramVolunteers ON 1=1 WHERE Donations.donor_program = ProgramVolunteers.id;\\n\\nExplanation: Perform a subquery to get the total number of volunteers for the 'Helping Hands' program. Then, perform an inner join between the Donations table and the subquery results, filtering the Donations table to only include donations made by volunteers from the 'Helping Hands' program. Finally, calculate the average donation amount for the filtered set.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhich sustainable material has the highest average price?\\n\\nContext: CREATE TABLE material_prices (id INT, material VARCHAR(50), price DECIMAL(10, 2)); INSERT INTO material_prices (id, material, price) VALUES (1, 'organic silk', 35.00), (2, 'organic linen', 18.50);<end_of_turn>\\n<start_of_turn>model\\nSELECT material, AVG(price) as avg_price FROM material_prices GROUP BY material ORDER BY avg_price DESC LIMIT 1;\\n\\nExplanation: This SQL query calculates the average price of sustainable materials by grouping them, ordering in descending order and limiting to 1.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nIdentify the total number of donors and total donation amount for women-led NGOs in the Arts sector in Q3 2021.\\n\\nContext: CREATE TABLE Donations (id INT, donor_id INT, ngo_leader VARCHAR(255), category VARCHAR(255), amount DECIMAL(10, 2), donation_date DATE); INSERT INTO Donations (id, donor_id, ngo_leader, category, amount, donation_date) VALUES (1, 1001, 'Female', 'Arts', 5000, '2021-09-05'), (2, 1002, 'Male', 'Environment', 3000, '2021-07-15'), (3, 1003, 'Female', 'Arts', 7000, '2021-10-30'), (4, 1004, 'Male', 'Education', 4000, '2021-06-25');<end_of_turn>\\n<start_of_turn>model\\nSELECT category, COUNT(DISTINCT donor_id) as total_donors, SUM(amount) as total_donation FROM Donations WHERE donation_date BETWEEN '2021-07-01' AND '2021-09-30' AND ngo_leader = 'Female' AND category = 'Arts' GROUP BY category;\\n\\nExplanation: The SQL query filters donations by category, ngo_leader, and Q3 2021. It then calculates the total number of distinct donors and the sum of donation amounts per category by using COUNT DISTINCT and SUM functions.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the total budget allocated for transportation services in Brazil in 2019?\\n\\nContext: CREATE SCHEMA br_schema;CREATE TABLE br_schema.transportation_budget (year INT, service VARCHAR(20), amount INT);INSERT INTO br_schema.transportation_budget (year, service, amount) VALUES (2019, 'Transportation', 20000000);<end_of_turn>\\n<start_of_turn>model\\nSELECT amount FROM br_schema.transportation_budget WHERE year = 2019 AND service = 'Transportation';\\n\\nExplanation: The SQL query calculates the total budget allocated for transportation services in Brazil in 2019 by selecting the amount column from the transportation_budget table where the year is 2019 and the service is Transportation.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the difference in budgets between the most expensive campaign and the least expensive campaign?\\n\\nContext: CREATE TABLE campaigns (id INT, name VARCHAR(50), location VARCHAR(50), budget INT);<end_of_turn>\\n<start_of_turn>model\\nSELECT MAX(budget) - MIN(budget) FROM campaigns;\\n\\nExplanation: This query calculates the difference between the maximum and minimum budgets of all campaigns, providing the difference in spending between the most expensive and least expensive campaigns.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the total number of users in Indonesia and Malaysia who have engaged with a specific ad, and what was the total revenue generated from these engagements?\\n\\nContext: CREATE TABLE ad_engagements (user_id INT, ad_id INT, country VARCHAR(2), engagement_time FLOAT, revenue FLOAT); INSERT INTO ad_engagements (user_id, ad_id, country, engagement_time, revenue) VALUES (1, 1001, 'ID', 12.3, 5.0), (2, 1001, 'MY', 15.5, 6.0);<end_of_turn>\\n<start_of_turn>model\\nSELECT SUM(CASE WHEN country IN ('ID', 'MY') THEN revenue ELSE 0 END) as total_revenue FROM ad_engagements WHERE ad_id = 1001;\\n\\nExplanation: This SQL query calculates the total revenue generated from users in Indonesia and Malaysia who have engaged with a specific ad. It achieves this by using the SUM and CASE statements to sum the revenue for the specified countries and ad_id. The WHERE clause filters the results to only include records for the specified ad.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the total playtime for each player in January 2021?\\n\\nContext: CREATE TABLE player_daily_playtime (player_id INT, play_date DATE, playtime INT); INSERT INTO player_daily_playtime (player_id, play_date, playtime) VALUES (1, '2021-01-01', 100), (1, '2021-01-02', 200), (1, '2021-01-03', 300), (2, '2021-01-01', 400), (2, '2021-01-02', 500), (2, '2021-01-03', 600);<end_of_turn>\\n<start_of_turn>model\\nSELECT player_id, SUM(playtime) FROM player_daily_playtime WHERE play_date BETWEEN '2021-01-01' AND '2021-01-31' GROUP BY player_id;\\n\\nExplanation: This query calculates the total playtime for each player in January 2021. It does so by filtering for rows where the 'play_date' is in January 2021, grouping by the 'player_id' column, and then summing the 'playtime' column for each group.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the average rating of cruelty-free cosmetics products launched in the last year?\\n\\nContext: CREATE TABLE product (product_id INT, name TEXT, launch_date DATE, rating FLOAT, cruelty_free BOOLEAN);<end_of_turn>\\n<start_of_turn>model\\nSELECT AVG(rating) FROM product WHERE cruelty_free = TRUE AND launch_date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR);\\n\\nExplanation: The SQL query calculates the average rating of cruelty-free cosmetics products launched in the last year by filtering the product table for rows where cruelty_free is TRUE and launch_date is within the last year, and then computing the average rating for those rows.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nList the top 3 green building certifications by number of certified projects in the green_buildings table.\\n\\nContext: CREATE TABLE green_buildings (building_id INT, building_name VARCHAR(255), location VARCHAR(255), certification_id INT, certification_name VARCHAR(255));<end_of_turn>\\n<start_of_turn>model\\nSELECT certification_name, COUNT(*) AS num_projects FROM green_buildings GROUP BY certification_id ORDER BY num_projects DESC LIMIT 3;\\n\\nExplanation: This query groups the green_buildings table by certification_id and calculates the number of projects for each certification. It then orders the results in descending order by the number of projects and limits the output to the top 3 certifications.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWho are the top 2 donors in terms of total donation amount for each program, ordered by program?\\n\\nContext: CREATE TABLE donors_ext (id INT, name VARCHAR(50), donation_amount DECIMAL(10,2), donation_date DATE, program VARCHAR(50)); INSERT INTO donors_ext (id, name, donation_amount, donation_date, program) VALUES (1, 'Alice', 500.00, '2022-02-01', 'Refugee Support'), (2, 'Bob', 300.00, '2022-03-10', 'Disaster Response');<end_of_turn>\\n<start_of_turn>model\\nSELECT name, program, SUM(donation_amount) AS total_donation, RANK() OVER (PARTITION BY program ORDER BY SUM(donation_amount) DESC) AS donation_rank FROM donors_ext GROUP BY name, program HAVING donation_rank <= 2 ORDER BY program;\\n\\nExplanation: This query calculates the total donation amount per donor and program, assigns a rank based on the total donation amount in descending order, and filters the top 2 donors per program.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the total calorie intake from organic food items?\\n\\nContext: CREATE TABLE food_items (item_id INT, name VARCHAR(50), organic BOOLEAN, calories INT); INSERT INTO food_items (item_id, name, organic, calories) VALUES (1, 'Apple', true, 95), (2, 'Broccoli', true, 55), (3, 'Chips', false, 154), (4, 'Soda', false, 140);<end_of_turn>\\n<start_of_turn>model\\nSELECT SUM(calories) FROM food_items WHERE organic = true;\\n\\nExplanation: The SQL query calculates the total calorie intake from organic food items by filtering records with the 'organic' flag set to true and calculating the sum of the 'calories' column.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the total value of socially responsible loans issued to clients in the Midwest region?\\n\\nContext: CREATE TABLE clients (client_id INT, region VARCHAR(20), socially_responsible_loan DECIMAL(10, 2)); INSERT INTO clients (client_id, region, socially_responsible_loan) VALUES (1, 'Midwest', 12000.00), (2, 'Northeast', 9000.00), (3, 'Midwest', 15000.00), (4, 'West', 10000.00);<end_of_turn>\\n<start_of_turn>model\\nSELECT SUM(socially_responsible_loan) FROM clients WHERE region = 'Midwest';\\n\\nExplanation: The SQL query calculates the total value of socially responsible loans issued to clients in the Midwest region. It filters the clients table by region, returning a sum of the socially_responsible_loan column for all rows with a region of 'Midwest'.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the maximum duration of a voyage for vessels that have voyaged to the Port of Singapore?\\n\\nContext: CREATE TABLE Vessels (VesselID INT, VesselName VARCHAR(255)); INSERT INTO Vessels (VesselID, VesselName) VALUES (1, 'VesselA'), (2, 'VesselB'), (3, 'VesselC'); CREATE TABLE Voyages (VoyageID INT, VesselID INT, StartPort VARCHAR(255), EndPort VARCHAR(255), VoyageDuration INT); INSERT INTO Voyages (VoyageID, VesselID, StartPort, EndPort, VoyageDuration) VALUES (1, 1, 'Los Angeles', 'Singapore', 15), (2, 2, 'Singapore', 'Hong Kong', 12), (3, 3, 'Singapore', 'Tokyo', 18);<end_of_turn>\\n<start_of_turn>model\\nSELECT MAX(VoyageDuration) FROM Voyages V WHERE V.EndPort = 'Singapore';\\n\\nExplanation: The SQL query calculates the maximum duration of a voyage for vessels that have voyaged to the Port of Singapore. It filters the records to only include those with the EndPort of Singapore and calculates the maximum voyage duration for these vessels.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nRemove a record from the network_investments table\\n\\nContext: CREATE TABLE network_investments (investment_id INT, location VARCHAR(50), investment_type VARCHAR(50), investment_amount DECIMAL(10,2), investment_date DATE);<end_of_turn>\\n<start_of_turn>model\\nDELETE FROM network_investments WHERE investment_id = 67890;\\n\\nExplanation: This query deletes the record with the investment ID 67890 from the 'network_investments' table.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat are the circular economy initiatives in Tokyo in 2022?\\n\\nContext: CREATE TABLE circular_economy (city varchar(255), year int, initiative varchar(255)); INSERT INTO circular_economy (city, year, initiative) VALUES ('Tokyo', 2020, 'E-Waste Recycling'), ('Tokyo', 2021, 'Food Waste Reduction'), ('Tokyo', 2022, 'Textile Recycling');<end_of_turn>\\n<start_of_turn>model\\nSELECT initiative FROM circular_economy WHERE city = 'Tokyo' AND year = 2022;\\n\\nExplanation: This query retrieves the initiatives for Tokyo in 2022 by selecting the initiative column where 'city' is 'Tokyo' and 'year' is 2022.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nUpdate the budget of the 'Healthcare' program to 16000.\\n\\nContext: CREATE TABLE Programs (ProgramID int, Name varchar(50), Budget money); INSERT INTO Programs (ProgramID, Name, Budget) VALUES (1, 'Education', 10000), (2, 'Healthcare', 15000);<end_of_turn>\\n<start_of_turn>model\\nUPDATE Programs SET Budget = 16000 WHERE Name = 'Healthcare';\\n\\nExplanation: The SQL query updates the budget of the 'Healthcare' program to 16000 by filtering the records based on the program name.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nFind the average landfill capacity used by the 'City' and 'County' sectors, excluding records with a capacity of 0.\\n\\nContext: CREATE TABLE landfill_data (sector VARCHAR(20), capacity FLOAT); INSERT INTO landfill_data (sector, capacity) VALUES ('City', 500), ('City', 600), ('County', 700), ('County', 800), ('Private', 900), ('State', 1000);<end_of_turn>\\n<start_of_turn>model\\nSELECT AVG(capacity) FROM landfill_data WHERE sector IN ('City', 'County') AND capacity > 0;\\n\\nExplanation: This query calculates the average landfill capacity used by the 'City' and 'County' sectors, excluding records with a capacity of 0. It does this by using the AVG function to calculate the average 'capacity' value for the 'City' and 'County' sectors, as determined by the WHERE clause.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat are the top 5 most common issues in technology for social good, and how many projects address each issue?\\n\\nContext: CREATE TABLE issues (id INT, issue VARCHAR(50), project_count INT); INSERT INTO issues (id, issue, project_count) VALUES (1, 'Climate change', 15), (2, 'Education', 20), (3, 'Healthcare', 25), (4, 'Lack of infrastructure', 30), (5, 'Poverty', 35), (6, 'Gender equality', 10);<end_of_turn>\\n<start_of_turn>model\\nSELECT issue, project_count FROM issues ORDER BY project_count DESC LIMIT 5;\\n\\nExplanation: This query selects the top 5 most common issues in technology for social good, and the number of projects addressing each issue. It uses the ORDER BY clause to order the results by project_count in descending order, and the LIMIT keyword to limit the results to the top 5.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nIdentify the top 5 oil-producing wells in the Gulf of Mexico\\n\\nContext: CREATE TABLE wells (id INT PRIMARY KEY, name TEXT, location TEXT); INSERT INTO wells (id, name, location) VALUES (1, 'Well A', 'Gulf of Mexico'), (2, 'Well B', 'Gulf of Mexico'), (3, 'Well C', 'North Sea'), (4, 'Well D', 'Gulf of Mexico'); CREATE TABLE oil_production (well_id INT, year INT, production REAL); INSERT INTO oil_production (well_id, year, production) VALUES (1, 2020, 500000), (1, 2021, 600000), (2, 2020, 450000), (2, 2021, 520000), (3, 2020, 250000), (3, 2021, 280000), (4, 2020, 700000), (4, 2021, 750000);<end_of_turn>\\n<start_of_turn>model\\nSELECT w.name, SUM(op.production) as total_production FROM wells w JOIN oil_production op ON w.id = op.well_id WHERE w.location = 'Gulf of Mexico' GROUP BY w.name ORDER BY total_production DESC LIMIT 5;\\n\\nExplanation: This query first joins the wells and oil_production tables on the well_id\/id field. It then filters the results to only include records where the location is 'Gulf of Mexico'. Next, it groups the results by well name and calculates the sum of production for each group. Finally, it orders the results by total production in descending order and limits the results to the top 5 records.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the maximum daily transaction volume for any digital asset in the 'emerging_markets' schema?\\n\\nContext: CREATE SCHEMA emerging_markets; CREATE TABLE emerging_markets.digital_assets (asset_name VARCHAR(10), daily_transaction_volume BIGINT); INSERT INTO emerging_markets.digital_assets (asset_name, daily_transaction_volume) VALUES ('AssetX', 8000000), ('AssetY', 7000000), ('AssetZ', 6000000), ('AssetW', 5000000), ('AssetV', 4000000);<end_of_turn>\\n<start_of_turn>model\\nSELECT MAX(daily_transaction_volume) FROM emerging_markets.digital_assets;\\n\\nExplanation: This query identifies the maximum daily transaction volume for any digital asset in the 'emerging_markets' schema by selecting the maximum value in the daily_transaction_volume column of the digital_assets table in the 'emerging_markets' schema.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nUpdate product_category for products that are present in both 'products' and 'products_sustainability' tables\\n\\nContext: CREATE TABLE products (id INT, name TEXT, category TEXT);CREATE TABLE products_sustainability (id INT, name TEXT, sustainable_label TEXT);<end_of_turn>\\n<start_of_turn>model\\nUPDATE products p SET category = 'sustainable' WHERE p.id IN (SELECT ps.id FROM products_sustainability ps);\\n\\nExplanation: The SQL query updates product_category to 'sustainable' for products that are present in both 'products' and 'products_sustainability' tables.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the sum of ad spending for each advertising campaign in \"south_america_ads\" table?\\n\\nContext: CREATE TABLE south_america_ads (ad_id INT, campaign_id INT, ad_spend DECIMAL(10,2));<end_of_turn>\\n<start_of_turn>model\\nSELECT campaign_id, SUM(ad_spend) AS total_spend FROM south_america_ads GROUP BY campaign_id;\\n\\nExplanation: The SQL query selects the campaign ID and sums the ad spend for each campaign ID from the \"south_america_ads\" table, grouped by campaign ID.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the percentage of on-time deliveries for each courier company for deliveries within the EU in the last quarter, ordered by the highest percentage first?\\n\\nContext: CREATE TABLE eu_deliveries(id INT, courier VARCHAR(255), delivery_date DATE, delivery_country VARCHAR(255), on_time BOOLEAN); INSERT INTO eu_deliveries(id, courier, delivery_date, delivery_country, on_time) VALUES (1, 'UPS', '2022-02-01', 'Germany', true);<end_of_turn>\\n<start_of_turn>model\\nSELECT courier, AVG(on_time) * 100 as on_time_percentage FROM eu_deliveries WHERE delivery_country LIKE 'EU%' AND delivery_date BETWEEN DATE_SUB(CURDATE(), INTERVAL 90 DAY) AND CURDATE() GROUP BY courier HAVING COUNT(*) FILTER (WHERE on_time = true) > 0 ORDER BY on_time_percentage DESC;\\n\\nExplanation: The query calculates the percentage of on-time deliveries for each courier company for deliveries within the EU in the last quarter. It uses the WHERE clause to filter the eu_deliveries table for EU deliveries and deliveries within the last 90 days. It then groups the results by courier and calculates the average percentage of on-time deliveries for each. Finally, it orders the results in descending order based on the percentage of on-time deliveries.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat was the average safety rating of vehicles released in 2020?\\n\\nContext: CREATE TABLE Vehicles (id INT, name VARCHAR(255), safety_rating DECIMAL(3,2), release_year INT); INSERT INTO Vehicles (id, name, safety_rating, release_year) VALUES (1, 'Model X', 5.3, 2020); INSERT INTO Vehicles (id, name, safety_rating, release_year) VALUES (2, 'Model 3', 5.7, 2020);<end_of_turn>\\n<start_of_turn>model\\nSELECT AVG(safety_rating) FROM Vehicles WHERE release_year = 2020;\\n\\nExplanation: Calculate the average safety rating of vehicles released in 2020.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the total volume of timber produced by each country in 2022?\\n\\nContext: CREATE TABLE country (country_code CHAR(3), country_name VARCHAR(100)); INSERT INTO country (country_code, country_name) VALUES ('CAN', 'Canada'), ('USA', 'United States'), ('MEX', 'Mexico'); CREATE TABLE timber_production (country_code CHAR(3), year INT, volume INT); INSERT INTO timber_production (country_code, year, volume) VALUES ('CAN', 2022, 15000), ('CAN', 2021, 14000), ('USA', 2022, 20000), ('USA', 2021, 18000), ('MEX', 2022, 8000), ('MEX', 2021, 7000);<end_of_turn>\\n<start_of_turn>model\\nSELECT c.country_name, SUM(tp.volume) as total_volume FROM timber_production tp INNER JOIN country c ON tp.country_code = c.country_code WHERE tp.year = 2022 GROUP BY c.country_name;\\n\\nExplanation: This query calculates the total volume of timber produced in 2022 for each country by joining the timber_production table with the country table on the country_code column. The query then filters for the year 2022 and groups the results by country_name. Finally, it calculates the total volume of timber produced for each country.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nUpdate records of artists who have changed their traditional art skills\\n\\nContext: CREATE TABLE artists (id INT, name VARCHAR(50), country VARCHAR(50)); CREATE TABLE skills (id INT, artist_id INT, art_type VARCHAR(50)); INSERT INTO artists (id, name, country) VALUES (1, 'John', 'USA'), (2, 'Pablo', 'Mexico'); INSERT INTO skills (id, artist_id, art_type) VALUES (1, 1, 'Painting'), (2, 2, 'Sculpting')<end_of_turn>\\n<start_of_turn>model\\nUPDATE skills SET art_type = 'Printmaking' WHERE artist_id = 1\\n\\nExplanation: The UPDATE statement modifies the art_type of the artist with id 1 from Painting to Printmaking. This reflects changes in an artist's traditional art skills over time.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the maximum weight of invertebrates in the Indian Ocean?\\n\\nContext: CREATE TABLE Species (id INT PRIMARY KEY, name VARCHAR(50), type VARCHAR(50)); INSERT INTO Species (id, name, type) VALUES (1, 'Tuna', 'Fish'); INSERT INTO Species (id, name, type) VALUES (2, 'Krill', 'Crustacean'); INSERT INTO Species (id, name, type) VALUES (3, 'Squid', 'Invertebrate');   CREATE TABLE Observations (id INT PRIMARY KEY, species_id INT, location VARCHAR(50), weight REAL); INSERT INTO Observations (id, species_id, location, weight) VALUES (1, 1, 'Pacific Ocean', 20.5); INSERT INTO Observations (id, species_id, location, weight) VALUES (2, 2, 'Atlantic Ocean', 0.003); INSERT INTO Observations (id, species_id, location, weight) VALUES (3, 3, 'Indian Ocean', 0.45);<end_of_turn>\\n<start_of_turn>model\\nSELECT MAX(O.weight) FROM Observations O JOIN Species S ON O.species_id = S.id WHERE S.type = 'Invertebrate' AND O.location = 'Indian Ocean';\\n\\nExplanation: Retrieve the maximum weight of invertebrates in the Indian Ocean by joining the Observations and Species tables, filtering for invertebrate type and Indian Ocean location.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nShow the number of carbon offset initiatives in each US state, sorted in descending order.\\n\\nContext: CREATE TABLE carbon_offsets (initiative VARCHAR(255), state VARCHAR(255));<end_of_turn>\\n<start_of_turn>model\\nSELECT state, COUNT(initiative) as num_initiatives FROM carbon_offsets WHERE state IN (SELECT state FROM states) GROUP BY state ORDER BY num_initiatives DESC;\\n\\nExplanation: The SQL query selects the state column and the count of initiatives from the carbon_offsets table, filtering the rows by the state column set to any of the US states. The subquery in the WHERE clause ensures that only US states are included. The GROUP BY clause groups the rows by state, and the ORDER BY clause sorts the groups in descending order by the count of initiatives. This will result in a list of US states with the number of carbon offset initiatives in each state, sorted in descending order.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the obesity rate among adults in California in 2019?\\n\\nContext: CREATE TABLE Adults_Health (ID INT, Age INT, Weight FLOAT, Height FLOAT, State VARCHAR(20), Year INT); INSERT INTO Adults_Health (ID, Age, Weight, Height, State, Year) VALUES (1, 35, 95.2, 170, 'California', 2019); INSERT INTO Adults_Health (ID, Age, Weight, Height, State, Year) VALUES (2, 40, 102.5, 175, 'California', 2019);<end_of_turn>\\n<start_of_turn>model\\nSELECT AVG(Weight \/ POWER(Height \/ 100, 2)) FROM Adults_Health WHERE State = 'California' AND Year = 2019;\\n\\nExplanation: This query calculates the obesity rate among adults in California in 2019. It does so by using the AVG function to find the average BMI (Body Mass Index) of adults from the 'Weight' and 'Height' columns, filtered by 'California' state and 2019 year.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nList all campaigns in the public_awareness_campaigns table and their corresponding budgets.\\n\\nContext: CREATE TABLE public_awareness_campaigns (campaign_id INT, name VARCHAR(50), city VARCHAR(50), state VARCHAR(50), country VARCHAR(50), start_date DATE, end_date DATE, budget FLOAT); INSERT INTO public_awareness_campaigns (campaign_id, name, city, state, country, start_date, end_date, budget) VALUES (1, 'Mental Health Matters', 'Los Angeles', 'CA', 'USA', '2021-05-01', '2021-06-30', 50000); INSERT INTO public_awareness_campaigns (campaign_id, name, city, state, country, start_date, end_date, budget) VALUES (2, 'Mind Your Mind', 'Toronto', 'ON', 'Canada', '2021-06-15', '2021-07-31', 75000);<end_of_turn>\\n<start_of_turn>model\\nSELECT campaign_id, name, budget FROM public_awareness_campaigns;\\n\\nExplanation: This SQL query lists all campaigns and their corresponding budgets by selecting the campaign_id, name, and budget columns from the public_awareness_campaigns table.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the total number of network devices installed in each region, and the total revenue generated from broadband services in those regions?\\n\\nContext: CREATE TABLE network_devices (id INT, region VARCHAR(20), install_date DATE); CREATE TABLE subscribers (id INT, region VARCHAR(20), service VARCHAR(20), revenue DECIMAL(10,2));<end_of_turn>\\n<start_of_turn>model\\nSELECT n.region, COUNT(n.id) AS num_devices, SUM(s.revenue) AS total_revenue FROM network_devices n INNER JOIN subscribers s ON n.region = s.region GROUP BY n.region;\\n\\nExplanation: This query counts the number of network devices and calculates the total revenue generated from broadband services in each region by joining the network_devices and subscribers tables on the region column, grouping the results by region, and calculating the count of devices and sum of revenue for each group.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nInsert a new record into the 'Customers' table with customer ID 'C1003', name 'Melissa', city 'Detroit', state 'MI', and zip code '48221'\\n\\nContext: CREATE TABLE Customers (CustomerID VARCHAR(5), Name VARCHAR(20), City VARCHAR(20), State VARCHAR(10), ZipCode VARCHAR(10));<end_of_turn>\\n<start_of_turn>model\\nINSERT INTO Customers (CustomerID, Name, City, State, ZipCode) VALUES ('C1003', 'Melissa', 'Detroit', 'MI', '48221');\\n\\nExplanation: This query inserts a new record into the 'Customers' table with the specified customer details.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nList all donations made to the 'Education' program in the 'NonprofitDB' database, along with the donor's name and address.\\n\\nContext: CREATE TABLE Donation (ID INT, Amount DECIMAL(10, 2), DonorID INT, ProgramID INT); INSERT INTO Donation (ID, Amount, DonorID, ProgramID) VALUES (1, 500.00, 1, 1), (2, 1000.00, 2, 1), (3, 250.00, 3, 1), (4, 750.00, 4, 2); CREATE TABLE Donor (ID INT, Name VARCHAR(255), Address VARCHAR(255)); INSERT INTO Donor (ID, Name, Address) VALUES (1, 'John Doe', '123 Main St'), (2, 'Jane Smith', '456 Elm St'), (3, 'Alice Johnson', '789 Oak St'), (4, 'Bob Brown', '321 Pine St');<end_of_turn>\\n<start_of_turn>model\\nSELECT d.Amount, d.DonorID, donor.Name, donor.Address FROM Donation d JOIN Donor donor ON d.DonorID = donor.ID WHERE d.ProgramID = 1;\\n\\nExplanation: This SQL query lists all donations made to the 'Education' program by joining the Donation and Donor tables on the DonorID column, filtering the results for ProgramID = 1, and selecting the required columns.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the minimum viewership of TV shows produced in Canada?\\n\\nContext: CREATE TABLE Canadian_TV (title TEXT, viewership INTEGER); INSERT INTO Canadian_TV (title, viewership) VALUES ('TVShow1', 500000), ('TVShow2', 600000), ('TVShow3', 700000), ('TVShow4', 800000), ('TVShow5', 900000), ('TVShow6', 1000000);<end_of_turn>\\n<start_of_turn>model\\nSELECT MIN(viewership) FROM Canadian_TV;\\n\\nExplanation: The SQL query finds the minimum viewership of TV shows produced in Canada by using the MIN function on the 'viewership' column.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the total budget for education in each city?\\n\\nContext: CREATE TABLE City_Budget(City VARCHAR(20), Department VARCHAR(20), Budget INT); INSERT INTO City_Budget(City, Department, Budget) VALUES('Los Angeles', 'Parks', 20000000); INSERT INTO City_Budget(City, Department, Budget) VALUES('Los Angeles', 'Education', 40000000); INSERT INTO City_Budget(City, Department, Budget) VALUES('San Francisco', 'Parks', 15000000); INSERT INTO City_Budget(City, Department, Budget) VALUES('San Francisco', 'Education', 30000000);<end_of_turn>\\n<start_of_turn>model\\nSELECT City, SUM(Budget) FROM City_Budget WHERE Department = 'Education' GROUP BY City;\\n\\nExplanation: This query calculates the total budget for education in each city. It filters the City_Budget table for the 'Education' department, groups the results by city, and calculates the sum of budgets for each group.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the average billing amount for each attorney by case type?\\n\\nContext: CREATE TABLE cases (case_id INT, case_type VARCHAR(255)); INSERT INTO cases (case_id, case_type) VALUES (1, 'Civil'), (2, 'Criminal'); CREATE TABLE attorneys (attorney_id INT, attorney_name VARCHAR(255)); INSERT INTO attorneys (attorney_id, attorney_name) VALUES (1, 'John Smith'), (2, 'Jane Doe'); CREATE TABLE billing (bill_id INT, case_id INT, attorney_id INT, amount DECIMAL(10, 2)); INSERT INTO billing (bill_id, case_id, attorney_id, amount) VALUES (1, 1, 1, 500.00), (2, 1, 2, 250.00), (3, 2, 1, 750.00);<end_of_turn>\\n<start_of_turn>model\\nSELECT a.attorney_name, c.case_type, AVG(b.amount) as avg_billing FROM cases c INNER JOIN attorneys a ON c.attorney_id = a.attorney_id INNER JOIN billing b ON c.case_id = b.case_id AND a.attorney_id = b.attorney_id GROUP BY a.attorney_name, c.case_type;\\n\\nExplanation: The SQL query performs an inner join between the cases, attorneys, and billing tables, joining on the attorney_id and case_id fields. It then calculates the average billing amount for each attorney by case type by grouping the results by the attorney_name and case_type fields and averaging the amount field.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nCalculate the average miles per gallon for sports cars by country\\n\\nContext: CREATE TABLE vehicles (vehicle_id INT, vehicle_type VARCHAR(20), country VARCHAR(20), mpg INT); INSERT INTO vehicles VALUES (1, 'Sports Car', 'USA', 25), (2, 'SUV', 'Canada', 22), (3, 'Sports Car', 'USA', 30), (4, 'Hatchback', 'Mexico', 35), (5, 'Sports Car', 'Canada', 28);<end_of_turn>\\n<start_of_turn>model\\nSELECT country, AVG(mpg) FROM vehicles WHERE vehicle_type = 'Sports Car' GROUP BY country;\\n\\nExplanation: 1. Filters records where vehicle_type is 'Sports Car' 2. Groups records by country 3. Calculates the average mpg for each group<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the average number of visitors per exhibition in each city?\\n\\nContext: CREATE TABLE Exhibitions (id INT, city VARCHAR(255), visitors INT); INSERT INTO Exhibitions (id, city, visitors) VALUES (1, 'New York', 2500), (2, 'Los Angeles', 1800), (3, 'Chicago', 2200), (4, 'San Francisco', 1500), (5, 'Miami', 1200); INSERT INTO Exhibitions (id, city, visitors) VALUES (6, 'New York', 1500), (7, 'Los Angeles', 1000), (8, 'Chicago', 1800), (9, 'San Francisco', 1000), (10, 'Miami', 1600);<end_of_turn>\\n<start_of_turn>model\\nSELECT city, AVG(visitors) FROM Exhibitions GROUP BY city;\\n\\nExplanation: The SQL query calculates the average number of visitors per exhibition in each city.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nCalculate the total weight of fish for each species in the 'UnderweightFish' table that weigh less than 0.5 kg\\n\\nContext: CREATE TABLE UnderweightFish (id INT, species VARCHAR(255), weight FLOAT, length FLOAT); INSERT INTO UnderweightFish (id, species, weight, length) VALUES (1, 'Sardine', 0.3, 0.1); INSERT INTO UnderweightFish (id, species, weight, length) VALUES (2, 'Anchovy', 0.2, 0.08); INSERT INTO UnderweightFish (id, species, weight, length) VALUES (3, 'Herring', 0.4, 0.15);<end_of_turn>\\n<start_of_turn>model\\nSELECT species, SUM(weight) FROM UnderweightFish WHERE weight < 0.5 GROUP BY species;\\n\\nExplanation: This SQL query calculates the total weight of fish for each species in the 'UnderweightFish' table that weigh less than 0.5 kg by using the SUM() function on the 'weight' column, the WHERE clause with the condition 'weight < 0.5', and the GROUP BY clause on the 'species' column.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the maximum safety rating for hybrid vehicles in each country?\\n\\nContext: CREATE TABLE Vehicles (Id INT, Name VARCHAR(100), Type VARCHAR(50), SafetyRating FLOAT, Country VARCHAR(100)); INSERT INTO Vehicles (Id, Name, Type, SafetyRating, Country) VALUES (1, 'Prius', 'Hybrid', 5.0, 'Japan'); INSERT INTO Vehicles (Id, Name, Type, SafetyRating, Country) VALUES (2, 'Volvo XC90', 'Hybrid', 4.9, 'Sweden'); INSERT INTO Vehicles (Id, Name, Type, SafetyRating, Country) VALUES (3, 'i3', 'Hybrid', 4.7, 'Germany');<end_of_turn>\\n<start_of_turn>model\\nSELECT Country, MAX(SafetyRating) FROM Vehicles WHERE Type = 'Hybrid' GROUP BY Country;\\n\\nExplanation: We discover the maximum safety rating for hybrid vehicles in each country by filtering on Type and grouping by Country, then selecting the maximum SafetyRating.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nCount the number of meat and pantry items\\n\\nContext: CREATE TABLE ingredients (id INT, name TEXT, category TEXT); INSERT INTO ingredients (id, name, category) VALUES (1, 'Tomato', 'Produce'), (2, 'Olive Oil', 'Pantry'), (3, 'Chicken Breast', 'Meat'), (4, 'Salt', 'Pantry');<end_of_turn>\\n<start_of_turn>model\\nSELECT SUM(CASE WHEN category IN ('Meat', 'Pantry') THEN 1 ELSE 0 END) FROM ingredients;\\n\\nExplanation: This query counts the number of meat and pantry items by selecting the 'category' column and applying the SUM aggregate function to a CASE statement that checks if the category is 'Meat' or 'Pantry'.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the total R&D expenditure for a specific drug in a certain year?\\n\\nContext: CREATE TABLE drugs (id INT, name VARCHAR(255), category VARCHAR(255)); CREATE TABLE rd_expenditures (id INT, drug_id INT, year INT, amount DECIMAL(10, 2));<end_of_turn>\\n<start_of_turn>model\\nSELECT SUM(rd_expenditures.amount) FROM rd_expenditures JOIN drugs ON rd_expenditures.drug_id = drugs.id WHERE drugs.name = 'DrugA' AND rd_expenditures.year = 2020;\\n\\nExplanation: The SQL query joins the rd_expenditures and drugs tables on the drug_id column and filters for 'DrugA' and the year 2020. It then calculates the sum of the amount column for the matching rows.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the maximum number of visitors for an exhibition in Chicago in 2020?\\n\\nContext: CREATE TABLE ExhibitionsChicago (id INT, exhibition_name VARCHAR(30), city VARCHAR(20), year INT, visitor_count INT); INSERT INTO ExhibitionsChicago (id, exhibition_name, city, year, visitor_count) VALUES (1, 'Van Gogh in Chicago', 'Chicago', 2020, 100000), (2, 'Impressionism in Motion', 'Chicago', 2020, 85000), (3, 'Ancient Egypt', 'Chicago', 2020, 120000);<end_of_turn>\\n<start_of_turn>model\\nSELECT exhibition_name, MAX(visitor_count) FROM ExhibitionsChicago WHERE city = 'Chicago' AND year = 2020;\\n\\nExplanation: This query retrieves the exhibition name with the maximum number of visitors in Chicago in 2020 by using the MAX function on the visitor_count column, filtered by the city and year columns.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhich countries have the highest average age of players participating in ESports events on PC platforms?\\n\\nContext: CREATE TABLE Players (PlayerID INT, Age INT, GamePlatform VARCHAR(10), Country VARCHAR(20));CREATE TABLE ESportsEvents (EventID INT, PlayerID INT);<end_of_turn>\\n<start_of_turn>model\\nSELECT ev.Country, AVG(p.Age) as AvgAge FROM Players p INNER JOIN ESportsEvents e ON p.PlayerID = e.PlayerID WHERE p.GamePlatform = 'PC' GROUP BY ev.Country ORDER BY AvgAge DESC LIMIT 3;\\n\\nExplanation: This query calculates the average age of players who have participated in ESports events on PC platforms, groups them by country, and returns the top 3 countries with the highest average age.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the average annual rainfall and temperature for each region in the \"regions\" and \"weather\" tables?\\n\\nContext: CREATE TABLE regions (id INT, name VARCHAR(50)); CREATE TABLE weather (id INT, region_id INT, year INT, rainfall FLOAT, temperature FLOAT);<end_of_turn>\\n<start_of_turn>model\\nSELECT regions.name AS region, AVG(weather.rainfall) AS avg_rainfall, AVG(weather.temperature) AS avg_temperature FROM regions INNER JOIN weather ON regions.id = weather.region_id GROUP BY regions.name;\\n\\nExplanation: This query retrieves the average annual rainfall and temperature for each region in the \"regions\" and \"weather\" tables by performing an inner join on the \"id\" column of the \"regions\" table and the \"region_id\" column of the \"weather\" table and grouping the results by region name using the GROUP BY clause. The average annual rainfall is calculated using the AVG() function on the \"rainfall\" column of the \"weather\" table and the average annual temperature is calculated using the AVG() function on the \"temperature\" column of the \"weather\" table.<end_of_turn><eos>"}
{"text":"<bos><start_of_turn>user\\nWhat is the total amount spent on network infrastructure in the European region?\\n\\nContext: CREATE TABLE network_investments (investment_id INT, amount FLOAT, region VARCHAR(20)); INSERT INTO network_investments (investment_id, amount, region) VALUES (1, 500000, 'Europe'), (2, 600000, 'Africa');<end_of_turn>\\n<start_of_turn>model\\nSELECT SUM(amount) FROM network_investments WHERE region = 'Europe';\\n\\nExplanation: This query calculates the total amount spent on network infrastructure in the European region by summing the amount column for records where the region is Europe.<end_of_turn><eos>"}
